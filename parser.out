Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> PROGRAM NAME SEMICOLON VARS F PRINCIPAL
Rule 2     F -> FUNCION F
Rule 3     F -> empty
Rule 4     VARS -> VAR TIPO VARIABLE V2 V3
Rule 5     V2 -> COMMA VARIABLE V2
Rule 6     V2 -> SEMICOLON
Rule 7     V3 -> TIPO VARIABLE V2 V3
Rule 8     V3 -> empty
Rule 9     FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO
Rule 10    V4 -> VARS
Rule 11    V4 -> empty
Rule 12    PARAMS -> TIPO NAME P1
Rule 13    P1 -> COMMA PARAMS P1
Rule 14    P1 -> empty
Rule 15    CUERPO -> LBRACKET E RBRACKET
Rule 16    E -> E1
Rule 17    E -> empty
Rule 18    E1 -> ESTATUTO
Rule 19    E1 -> ESTATUTO E1
Rule 20    TIPO -> INT
Rule 21    TIPO -> FLOAT
Rule 22    TIPO -> CHAR
Rule 23    TIPO_FUNCION -> INT
Rule 24    TIPO_FUNCION -> FLOAT
Rule 25    TIPO_FUNCION -> CHAR
Rule 26    TIPO_FUNCION -> VOID
Rule 27    PRINCIPAL -> MAIN LPAREN RPAREN CUERPO
Rule 28    VARIABLE -> NAME E2
Rule 29    E2 -> LSBRACKET EXP RSBRACKET
Rule 30    E2 -> empty
Rule 31    ESTATUTO -> ASIGNACION
Rule 32    ESTATUTO -> LLAMADA
Rule 33    ESTATUTO -> RETORNO
Rule 34    ESTATUTO -> LECTURA
Rule 35    ESTATUTO -> ESCRITURA
Rule 36    ESTATUTO -> CONDICION
Rule 37    ESTATUTO -> CICLO_W
Rule 38    ESTATUTO -> CICLO_F
Rule 39    ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON
Rule 40    LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON
Rule 41    E1 -> EXP
Rule 42    E1 -> EXP COMMA E1
Rule 43    LLAMADAF -> NAME LPAREN E1 RPAREN
Rule 44    RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON
Rule 45    LECTURA -> READ LPAREN V3 RPAREN SEMICOLON
Rule 46    V3 -> VARIABLE COMMA V3
Rule 47    V3 -> VARIABLE
Rule 48    ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON
Rule 49    E2 -> S_EXP
Rule 50    E2 -> S_EXP COMMA E2
Rule 51    CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
Rule 52    ELSE1 -> ELSE CUERPO
Rule 53    ELSE1 -> empty
Rule 54    CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO
Rule 55    CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO
Rule 56    H_EXP -> T
Rule 57    T -> T_EXP
Rule 58    T -> T_EXP OR T
Rule 59    T_EXP -> G
Rule 60    G -> G_EXP
Rule 61    G -> G_EXP AND G
Rule 62    G_EXP -> EXP B
Rule 63    B -> GREATER_OR_EQUAL EXP
Rule 64    B -> LESS_OR_EQUAL EXP
Rule 65    B -> GREATER_THAN EXP
Rule 66    B -> LESS_THAN EXP
Rule 67    B -> IS_EQUAL EXP
Rule 68    B -> NOT_EQUAL EXP
Rule 69    B -> empty
Rule 70    S_EXP -> C_STRING
Rule 71    S_EXP -> EXP
Rule 72    EXP -> TERMINO T
Rule 73    T -> PLUS TERMINO T
Rule 74    T -> MINUS TERMINO T
Rule 75    T -> empty
Rule 76    TERMINO -> FACTOR F2
Rule 77    F2 -> DIVIDE FACTOR F2
Rule 78    F2 -> MULTIPLY FACTOR F2
Rule 79    F2 -> empty
Rule 80    FACTOR -> LPAREN H_EXP RPAREN
Rule 81    FACTOR -> C_INT
Rule 82    FACTOR -> C_FLOAT
Rule 83    FACTOR -> C_CHAR
Rule 84    FACTOR -> VARIABLE
Rule 85    FACTOR -> LLAMADAF
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 61
CHAR                 : 22 25
COMMA                : 5 13 42 46 50
C_CHAR               : 83
C_FLOAT              : 82
C_INT                : 55 55 81
C_STRING             : 70
DIVIDE               : 77
DO                   : 54 55
ELSE                 : 52
EQUALS               : 39 55
FLOAT                : 21 24
FROM                 : 55
FUNC                 : 9
GREATER_OR_EQUAL     : 63
GREATER_THAN         : 65
IF                   : 51
INT                  : 20 23
IS_EQUAL             : 67
LBRACKET             : 15
LESS_OR_EQUAL        : 64
LESS_THAN            : 66
LPAREN               : 9 27 40 43 44 45 48 51 54 80
LSBRACKET            : 29
MAIN                 : 27
MINUS                : 74
MULTIPLY             : 78
NAME                 : 1 9 12 28 40 43 55
NOT_EQUAL            : 68
OR                   : 58
PLUS                 : 73
PRINT                : 48
PROGRAM              : 1
RBRACKET             : 15
READ                 : 45
RETURN               : 44
RPAREN               : 9 27 40 43 44 45 48 51 54 80
RSBRACKET            : 29
SEMICOLON            : 1 6 39 40 44 45 48
THEN                 : 51
TO                   : 55
VAR                  : 4
VOID                 : 26
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 31
B                    : 62
CICLO_F              : 38
CICLO_W              : 37
CONDICION            : 36
CUERPO               : 9 27 51 52 54 55
E                    : 15
E1                   : 16 19 40 42 43
E2                   : 28 48 50
ELSE1                : 51
ESCRITURA            : 35
ESTATUTO             : 18 19
EXP                  : 29 39 41 42 44 62 63 64 65 66 67 68 71
F                    : 1 2
F2                   : 76 77 78
FACTOR               : 76 77 78
FUNCION              : 2
G                    : 59 61
G_EXP                : 60 61
H_EXP                : 51 54 80
LECTURA              : 34
LLAMADA              : 32
LLAMADAF             : 85
P1                   : 12 13
PARAMS               : 9 13
PRINCIPAL            : 1
PROGRAMA             : 0
RETORNO              : 33
S_EXP                : 49 50
T                    : 56 58 72 73 74
TERMINO              : 72 73 74
TIPO                 : 4 7 12
TIPO_FUNCION         : 9
T_EXP                : 57 58
V2                   : 4 5 7
V3                   : 4 7 45 46
V4                   : 9
VARIABLE             : 4 5 7 39 46 47 84
VARS                 : 1 10
empty                : 3 8 11 14 17 30 53 69 75 79

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . PROGRAM NAME SEMICOLON VARS F PRINCIPAL

    PROGRAM         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> PROGRAM . NAME SEMICOLON VARS F PRINCIPAL

    NAME            shift and go to state 3


state 3

    (1) PROGRAMA -> PROGRAM NAME . SEMICOLON VARS F PRINCIPAL

    SEMICOLON       shift and go to state 4


state 4

    (1) PROGRAMA -> PROGRAM NAME SEMICOLON . VARS F PRINCIPAL
    (4) VARS -> . VAR TIPO VARIABLE V2 V3

    VAR             shift and go to state 6

    VARS                           shift and go to state 5

state 5

    (1) PROGRAMA -> PROGRAM NAME SEMICOLON VARS . F PRINCIPAL
    (2) F -> . FUNCION F
    (3) F -> . empty
    (9) FUNCION -> . FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO
    (86) empty -> .

    FUNC            shift and go to state 10
    MAIN            reduce using rule 86 (empty -> .)

    F                              shift and go to state 7
    FUNCION                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (4) VARS -> VAR . TIPO VARIABLE V2 V3
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    TIPO                           shift and go to state 11

state 7

    (1) PROGRAMA -> PROGRAM NAME SEMICOLON VARS F . PRINCIPAL
    (27) PRINCIPAL -> . MAIN LPAREN RPAREN CUERPO

    MAIN            shift and go to state 16

    PRINCIPAL                      shift and go to state 15

state 8

    (2) F -> FUNCION . F
    (2) F -> . FUNCION F
    (3) F -> . empty
    (9) FUNCION -> . FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO
    (86) empty -> .

    FUNC            shift and go to state 10
    MAIN            reduce using rule 86 (empty -> .)

    FUNCION                        shift and go to state 8
    F                              shift and go to state 17
    empty                          shift and go to state 9

state 9

    (3) F -> empty .

    MAIN            reduce using rule 3 (F -> empty .)


state 10

    (9) FUNCION -> FUNC . TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO
    (23) TIPO_FUNCION -> . INT
    (24) TIPO_FUNCION -> . FLOAT
    (25) TIPO_FUNCION -> . CHAR
    (26) TIPO_FUNCION -> . VOID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    VOID            shift and go to state 22

    TIPO_FUNCION                   shift and go to state 18

state 11

    (4) VARS -> VAR TIPO . VARIABLE V2 V3
    (28) VARIABLE -> . NAME E2

    NAME            shift and go to state 24

    VARIABLE                       shift and go to state 23

state 12

    (20) TIPO -> INT .

    NAME            reduce using rule 20 (TIPO -> INT .)


state 13

    (21) TIPO -> FLOAT .

    NAME            reduce using rule 21 (TIPO -> FLOAT .)


state 14

    (22) TIPO -> CHAR .

    NAME            reduce using rule 22 (TIPO -> CHAR .)


state 15

    (1) PROGRAMA -> PROGRAM NAME SEMICOLON VARS F PRINCIPAL .

    $end            reduce using rule 1 (PROGRAMA -> PROGRAM NAME SEMICOLON VARS F PRINCIPAL .)


state 16

    (27) PRINCIPAL -> MAIN . LPAREN RPAREN CUERPO

    LPAREN          shift and go to state 25


state 17

    (2) F -> FUNCION F .

    MAIN            reduce using rule 2 (F -> FUNCION F .)


state 18

    (9) FUNCION -> FUNC TIPO_FUNCION . NAME LPAREN PARAMS RPAREN V4 CUERPO

    NAME            shift and go to state 26


state 19

    (23) TIPO_FUNCION -> INT .

    NAME            reduce using rule 23 (TIPO_FUNCION -> INT .)


state 20

    (24) TIPO_FUNCION -> FLOAT .

    NAME            reduce using rule 24 (TIPO_FUNCION -> FLOAT .)


state 21

    (25) TIPO_FUNCION -> CHAR .

    NAME            reduce using rule 25 (TIPO_FUNCION -> CHAR .)


state 22

    (26) TIPO_FUNCION -> VOID .

    NAME            reduce using rule 26 (TIPO_FUNCION -> VOID .)


state 23

    (4) VARS -> VAR TIPO VARIABLE . V2 V3
    (5) V2 -> . COMMA VARIABLE V2
    (6) V2 -> . SEMICOLON

    COMMA           shift and go to state 28
    SEMICOLON       shift and go to state 29

    V2                             shift and go to state 27

state 24

    (28) VARIABLE -> NAME . E2
    (29) E2 -> . LSBRACKET EXP RSBRACKET
    (30) E2 -> . empty
    (49) E2 -> . S_EXP
    (50) E2 -> . S_EXP COMMA E2
    (86) empty -> .
    (70) S_EXP -> . C_STRING
    (71) S_EXP -> . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 32
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    C_STRING        shift and go to state 36
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    E2                             shift and go to state 31
    EXP                            shift and go to state 33
    empty                          shift and go to state 34
    S_EXP                          shift and go to state 35
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 25

    (27) PRINCIPAL -> MAIN LPAREN . RPAREN CUERPO

    RPAREN          shift and go to state 45


state 26

    (9) FUNCION -> FUNC TIPO_FUNCION NAME . LPAREN PARAMS RPAREN V4 CUERPO

    LPAREN          shift and go to state 46


state 27

    (4) VARS -> VAR TIPO VARIABLE V2 . V3
    (7) V3 -> . TIPO VARIABLE V2 V3
    (8) V3 -> . empty
    (46) V3 -> . VARIABLE COMMA V3
    (47) V3 -> . VARIABLE
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR
    (86) empty -> .
    (28) VARIABLE -> . NAME E2

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    NAME            shift and go to state 24

    TIPO                           shift and go to state 47
    VARIABLE                       shift and go to state 48
    V3                             shift and go to state 49
    empty                          shift and go to state 50

state 28

    (5) V2 -> COMMA . VARIABLE V2
    (28) VARIABLE -> . NAME E2

    NAME            shift and go to state 24

    VARIABLE                       shift and go to state 51

state 29

    (6) V2 -> SEMICOLON .

    INT             reduce using rule 6 (V2 -> SEMICOLON .)
    FLOAT           reduce using rule 6 (V2 -> SEMICOLON .)
    CHAR            reduce using rule 6 (V2 -> SEMICOLON .)
    NAME            reduce using rule 6 (V2 -> SEMICOLON .)
    FUNC            reduce using rule 6 (V2 -> SEMICOLON .)
    MAIN            reduce using rule 6 (V2 -> SEMICOLON .)
    LBRACKET        reduce using rule 6 (V2 -> SEMICOLON .)
    RPAREN          reduce using rule 6 (V2 -> SEMICOLON .)


state 30

    (28) VARIABLE -> NAME . E2
    (43) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (29) E2 -> . LSBRACKET EXP RSBRACKET
    (30) E2 -> . empty
    (49) E2 -> . S_EXP
    (50) E2 -> . S_EXP COMMA E2
    (86) empty -> .
    (70) S_EXP -> . C_STRING
    (71) S_EXP -> . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 52
    LSBRACKET       shift and go to state 32
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    C_STRING        shift and go to state 36
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    E2                             shift and go to state 31
    EXP                            shift and go to state 33
    empty                          shift and go to state 34
    S_EXP                          shift and go to state 35
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 31

    (28) VARIABLE -> NAME E2 .

    COMMA           reduce using rule 28 (VARIABLE -> NAME E2 .)
    SEMICOLON       reduce using rule 28 (VARIABLE -> NAME E2 .)
    DIVIDE          reduce using rule 28 (VARIABLE -> NAME E2 .)
    MULTIPLY        reduce using rule 28 (VARIABLE -> NAME E2 .)
    PLUS            reduce using rule 28 (VARIABLE -> NAME E2 .)
    MINUS           reduce using rule 28 (VARIABLE -> NAME E2 .)
    LPAREN          reduce using rule 28 (VARIABLE -> NAME E2 .)
    C_INT           reduce using rule 28 (VARIABLE -> NAME E2 .)
    C_FLOAT         reduce using rule 28 (VARIABLE -> NAME E2 .)
    C_CHAR          reduce using rule 28 (VARIABLE -> NAME E2 .)
    NAME            reduce using rule 28 (VARIABLE -> NAME E2 .)
    FUNC            reduce using rule 28 (VARIABLE -> NAME E2 .)
    MAIN            reduce using rule 28 (VARIABLE -> NAME E2 .)
    LBRACKET        reduce using rule 28 (VARIABLE -> NAME E2 .)
    RPAREN          reduce using rule 28 (VARIABLE -> NAME E2 .)
    RSBRACKET       reduce using rule 28 (VARIABLE -> NAME E2 .)
    GREATER_OR_EQUAL reduce using rule 28 (VARIABLE -> NAME E2 .)
    LESS_OR_EQUAL   reduce using rule 28 (VARIABLE -> NAME E2 .)
    GREATER_THAN    reduce using rule 28 (VARIABLE -> NAME E2 .)
    LESS_THAN       reduce using rule 28 (VARIABLE -> NAME E2 .)
    IS_EQUAL        reduce using rule 28 (VARIABLE -> NAME E2 .)
    NOT_EQUAL       reduce using rule 28 (VARIABLE -> NAME E2 .)
    AND             reduce using rule 28 (VARIABLE -> NAME E2 .)
    OR              reduce using rule 28 (VARIABLE -> NAME E2 .)
    EQUALS          reduce using rule 28 (VARIABLE -> NAME E2 .)
    RBRACKET        reduce using rule 28 (VARIABLE -> NAME E2 .)


state 32

    (29) E2 -> LSBRACKET . EXP RSBRACKET
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 53
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 33

    (71) S_EXP -> EXP .

    COMMA           reduce using rule 71 (S_EXP -> EXP .)
    SEMICOLON       reduce using rule 71 (S_EXP -> EXP .)
    DIVIDE          reduce using rule 71 (S_EXP -> EXP .)
    MULTIPLY        reduce using rule 71 (S_EXP -> EXP .)
    PLUS            reduce using rule 71 (S_EXP -> EXP .)
    MINUS           reduce using rule 71 (S_EXP -> EXP .)
    LPAREN          reduce using rule 71 (S_EXP -> EXP .)
    C_INT           reduce using rule 71 (S_EXP -> EXP .)
    C_FLOAT         reduce using rule 71 (S_EXP -> EXP .)
    C_CHAR          reduce using rule 71 (S_EXP -> EXP .)
    NAME            reduce using rule 71 (S_EXP -> EXP .)
    FUNC            reduce using rule 71 (S_EXP -> EXP .)
    MAIN            reduce using rule 71 (S_EXP -> EXP .)
    LBRACKET        reduce using rule 71 (S_EXP -> EXP .)
    RPAREN          reduce using rule 71 (S_EXP -> EXP .)
    RSBRACKET       reduce using rule 71 (S_EXP -> EXP .)
    GREATER_OR_EQUAL reduce using rule 71 (S_EXP -> EXP .)
    LESS_OR_EQUAL   reduce using rule 71 (S_EXP -> EXP .)
    GREATER_THAN    reduce using rule 71 (S_EXP -> EXP .)
    LESS_THAN       reduce using rule 71 (S_EXP -> EXP .)
    IS_EQUAL        reduce using rule 71 (S_EXP -> EXP .)
    NOT_EQUAL       reduce using rule 71 (S_EXP -> EXP .)
    AND             reduce using rule 71 (S_EXP -> EXP .)
    OR              reduce using rule 71 (S_EXP -> EXP .)
    EQUALS          reduce using rule 71 (S_EXP -> EXP .)
    RBRACKET        reduce using rule 71 (S_EXP -> EXP .)


state 34

    (30) E2 -> empty .

    COMMA           reduce using rule 30 (E2 -> empty .)
    SEMICOLON       reduce using rule 30 (E2 -> empty .)
    DIVIDE          reduce using rule 30 (E2 -> empty .)
    MULTIPLY        reduce using rule 30 (E2 -> empty .)
    PLUS            reduce using rule 30 (E2 -> empty .)
    MINUS           reduce using rule 30 (E2 -> empty .)
    LPAREN          reduce using rule 30 (E2 -> empty .)
    C_INT           reduce using rule 30 (E2 -> empty .)
    C_FLOAT         reduce using rule 30 (E2 -> empty .)
    C_CHAR          reduce using rule 30 (E2 -> empty .)
    NAME            reduce using rule 30 (E2 -> empty .)
    FUNC            reduce using rule 30 (E2 -> empty .)
    MAIN            reduce using rule 30 (E2 -> empty .)
    LBRACKET        reduce using rule 30 (E2 -> empty .)
    RPAREN          reduce using rule 30 (E2 -> empty .)
    RSBRACKET       reduce using rule 30 (E2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 30 (E2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 30 (E2 -> empty .)
    GREATER_THAN    reduce using rule 30 (E2 -> empty .)
    LESS_THAN       reduce using rule 30 (E2 -> empty .)
    IS_EQUAL        reduce using rule 30 (E2 -> empty .)
    NOT_EQUAL       reduce using rule 30 (E2 -> empty .)
    AND             reduce using rule 30 (E2 -> empty .)
    OR              reduce using rule 30 (E2 -> empty .)
    EQUALS          reduce using rule 30 (E2 -> empty .)
    RBRACKET        reduce using rule 30 (E2 -> empty .)


state 35

    (49) E2 -> S_EXP .
    (50) E2 -> S_EXP . COMMA E2

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 49 (E2 -> S_EXP .)
    DIVIDE          reduce using rule 49 (E2 -> S_EXP .)
    MULTIPLY        reduce using rule 49 (E2 -> S_EXP .)
    PLUS            reduce using rule 49 (E2 -> S_EXP .)
    MINUS           reduce using rule 49 (E2 -> S_EXP .)
    LPAREN          reduce using rule 49 (E2 -> S_EXP .)
    C_INT           reduce using rule 49 (E2 -> S_EXP .)
    C_FLOAT         reduce using rule 49 (E2 -> S_EXP .)
    C_CHAR          reduce using rule 49 (E2 -> S_EXP .)
    NAME            reduce using rule 49 (E2 -> S_EXP .)
    FUNC            reduce using rule 49 (E2 -> S_EXP .)
    MAIN            reduce using rule 49 (E2 -> S_EXP .)
    LBRACKET        reduce using rule 49 (E2 -> S_EXP .)
    RPAREN          reduce using rule 49 (E2 -> S_EXP .)
    RSBRACKET       reduce using rule 49 (E2 -> S_EXP .)
    GREATER_OR_EQUAL reduce using rule 49 (E2 -> S_EXP .)
    LESS_OR_EQUAL   reduce using rule 49 (E2 -> S_EXP .)
    GREATER_THAN    reduce using rule 49 (E2 -> S_EXP .)
    LESS_THAN       reduce using rule 49 (E2 -> S_EXP .)
    IS_EQUAL        reduce using rule 49 (E2 -> S_EXP .)
    NOT_EQUAL       reduce using rule 49 (E2 -> S_EXP .)
    AND             reduce using rule 49 (E2 -> S_EXP .)
    OR              reduce using rule 49 (E2 -> S_EXP .)
    EQUALS          reduce using rule 49 (E2 -> S_EXP .)
    RBRACKET        reduce using rule 49 (E2 -> S_EXP .)
    COMMA           shift and go to state 54

  ! COMMA           [ reduce using rule 49 (E2 -> S_EXP .) ]


state 36

    (70) S_EXP -> C_STRING .

    COMMA           reduce using rule 70 (S_EXP -> C_STRING .)
    SEMICOLON       reduce using rule 70 (S_EXP -> C_STRING .)
    DIVIDE          reduce using rule 70 (S_EXP -> C_STRING .)
    MULTIPLY        reduce using rule 70 (S_EXP -> C_STRING .)
    PLUS            reduce using rule 70 (S_EXP -> C_STRING .)
    MINUS           reduce using rule 70 (S_EXP -> C_STRING .)
    LPAREN          reduce using rule 70 (S_EXP -> C_STRING .)
    C_INT           reduce using rule 70 (S_EXP -> C_STRING .)
    C_FLOAT         reduce using rule 70 (S_EXP -> C_STRING .)
    C_CHAR          reduce using rule 70 (S_EXP -> C_STRING .)
    NAME            reduce using rule 70 (S_EXP -> C_STRING .)
    FUNC            reduce using rule 70 (S_EXP -> C_STRING .)
    MAIN            reduce using rule 70 (S_EXP -> C_STRING .)
    LBRACKET        reduce using rule 70 (S_EXP -> C_STRING .)
    RPAREN          reduce using rule 70 (S_EXP -> C_STRING .)
    RSBRACKET       reduce using rule 70 (S_EXP -> C_STRING .)
    GREATER_OR_EQUAL reduce using rule 70 (S_EXP -> C_STRING .)
    LESS_OR_EQUAL   reduce using rule 70 (S_EXP -> C_STRING .)
    GREATER_THAN    reduce using rule 70 (S_EXP -> C_STRING .)
    LESS_THAN       reduce using rule 70 (S_EXP -> C_STRING .)
    IS_EQUAL        reduce using rule 70 (S_EXP -> C_STRING .)
    NOT_EQUAL       reduce using rule 70 (S_EXP -> C_STRING .)
    AND             reduce using rule 70 (S_EXP -> C_STRING .)
    OR              reduce using rule 70 (S_EXP -> C_STRING .)
    EQUALS          reduce using rule 70 (S_EXP -> C_STRING .)
    RBRACKET        reduce using rule 70 (S_EXP -> C_STRING .)


state 37

    (72) EXP -> TERMINO . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! PLUS            [ reduce using rule 86 (empty -> .) ]
  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    TERMINO                        shift and go to state 37
    T                              shift and go to state 55
    T_EXP                          shift and go to state 56
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 38

    (76) TERMINO -> FACTOR . F2
    (77) F2 -> . DIVIDE FACTOR F2
    (78) F2 -> . MULTIPLY FACTOR F2
    (79) F2 -> . empty
    (86) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 64
    MULTIPLY        shift and go to state 65
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    C_INT           reduce using rule 86 (empty -> .)
    C_FLOAT         reduce using rule 86 (empty -> .)
    C_CHAR          reduce using rule 86 (empty -> .)
    NAME            reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

  ! DIVIDE          [ reduce using rule 86 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 86 (empty -> .) ]

    F2                             shift and go to state 63
    empty                          shift and go to state 66

state 39

    (80) FACTOR -> LPAREN . H_EXP RPAREN
    (56) H_EXP -> . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    RPAREN          reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    H_EXP                          shift and go to state 67
    T                              shift and go to state 68
    T_EXP                          shift and go to state 56
    TERMINO                        shift and go to state 37
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 40

    (81) FACTOR -> C_INT .

    COMMA           reduce using rule 81 (FACTOR -> C_INT .)
    SEMICOLON       reduce using rule 81 (FACTOR -> C_INT .)
    DIVIDE          reduce using rule 81 (FACTOR -> C_INT .)
    MULTIPLY        reduce using rule 81 (FACTOR -> C_INT .)
    PLUS            reduce using rule 81 (FACTOR -> C_INT .)
    MINUS           reduce using rule 81 (FACTOR -> C_INT .)
    LPAREN          reduce using rule 81 (FACTOR -> C_INT .)
    C_INT           reduce using rule 81 (FACTOR -> C_INT .)
    C_FLOAT         reduce using rule 81 (FACTOR -> C_INT .)
    C_CHAR          reduce using rule 81 (FACTOR -> C_INT .)
    NAME            reduce using rule 81 (FACTOR -> C_INT .)
    FUNC            reduce using rule 81 (FACTOR -> C_INT .)
    MAIN            reduce using rule 81 (FACTOR -> C_INT .)
    LBRACKET        reduce using rule 81 (FACTOR -> C_INT .)
    RPAREN          reduce using rule 81 (FACTOR -> C_INT .)
    RSBRACKET       reduce using rule 81 (FACTOR -> C_INT .)
    GREATER_OR_EQUAL reduce using rule 81 (FACTOR -> C_INT .)
    LESS_OR_EQUAL   reduce using rule 81 (FACTOR -> C_INT .)
    GREATER_THAN    reduce using rule 81 (FACTOR -> C_INT .)
    LESS_THAN       reduce using rule 81 (FACTOR -> C_INT .)
    IS_EQUAL        reduce using rule 81 (FACTOR -> C_INT .)
    NOT_EQUAL       reduce using rule 81 (FACTOR -> C_INT .)
    AND             reduce using rule 81 (FACTOR -> C_INT .)
    OR              reduce using rule 81 (FACTOR -> C_INT .)
    EQUALS          reduce using rule 81 (FACTOR -> C_INT .)
    RBRACKET        reduce using rule 81 (FACTOR -> C_INT .)


state 41

    (82) FACTOR -> C_FLOAT .

    COMMA           reduce using rule 82 (FACTOR -> C_FLOAT .)
    SEMICOLON       reduce using rule 82 (FACTOR -> C_FLOAT .)
    DIVIDE          reduce using rule 82 (FACTOR -> C_FLOAT .)
    MULTIPLY        reduce using rule 82 (FACTOR -> C_FLOAT .)
    PLUS            reduce using rule 82 (FACTOR -> C_FLOAT .)
    MINUS           reduce using rule 82 (FACTOR -> C_FLOAT .)
    LPAREN          reduce using rule 82 (FACTOR -> C_FLOAT .)
    C_INT           reduce using rule 82 (FACTOR -> C_FLOAT .)
    C_FLOAT         reduce using rule 82 (FACTOR -> C_FLOAT .)
    C_CHAR          reduce using rule 82 (FACTOR -> C_FLOAT .)
    NAME            reduce using rule 82 (FACTOR -> C_FLOAT .)
    FUNC            reduce using rule 82 (FACTOR -> C_FLOAT .)
    MAIN            reduce using rule 82 (FACTOR -> C_FLOAT .)
    LBRACKET        reduce using rule 82 (FACTOR -> C_FLOAT .)
    RPAREN          reduce using rule 82 (FACTOR -> C_FLOAT .)
    RSBRACKET       reduce using rule 82 (FACTOR -> C_FLOAT .)
    GREATER_OR_EQUAL reduce using rule 82 (FACTOR -> C_FLOAT .)
    LESS_OR_EQUAL   reduce using rule 82 (FACTOR -> C_FLOAT .)
    GREATER_THAN    reduce using rule 82 (FACTOR -> C_FLOAT .)
    LESS_THAN       reduce using rule 82 (FACTOR -> C_FLOAT .)
    IS_EQUAL        reduce using rule 82 (FACTOR -> C_FLOAT .)
    NOT_EQUAL       reduce using rule 82 (FACTOR -> C_FLOAT .)
    AND             reduce using rule 82 (FACTOR -> C_FLOAT .)
    OR              reduce using rule 82 (FACTOR -> C_FLOAT .)
    EQUALS          reduce using rule 82 (FACTOR -> C_FLOAT .)
    RBRACKET        reduce using rule 82 (FACTOR -> C_FLOAT .)


state 42

    (83) FACTOR -> C_CHAR .

    COMMA           reduce using rule 83 (FACTOR -> C_CHAR .)
    SEMICOLON       reduce using rule 83 (FACTOR -> C_CHAR .)
    DIVIDE          reduce using rule 83 (FACTOR -> C_CHAR .)
    MULTIPLY        reduce using rule 83 (FACTOR -> C_CHAR .)
    PLUS            reduce using rule 83 (FACTOR -> C_CHAR .)
    MINUS           reduce using rule 83 (FACTOR -> C_CHAR .)
    LPAREN          reduce using rule 83 (FACTOR -> C_CHAR .)
    C_INT           reduce using rule 83 (FACTOR -> C_CHAR .)
    C_FLOAT         reduce using rule 83 (FACTOR -> C_CHAR .)
    C_CHAR          reduce using rule 83 (FACTOR -> C_CHAR .)
    NAME            reduce using rule 83 (FACTOR -> C_CHAR .)
    FUNC            reduce using rule 83 (FACTOR -> C_CHAR .)
    MAIN            reduce using rule 83 (FACTOR -> C_CHAR .)
    LBRACKET        reduce using rule 83 (FACTOR -> C_CHAR .)
    RPAREN          reduce using rule 83 (FACTOR -> C_CHAR .)
    RSBRACKET       reduce using rule 83 (FACTOR -> C_CHAR .)
    GREATER_OR_EQUAL reduce using rule 83 (FACTOR -> C_CHAR .)
    LESS_OR_EQUAL   reduce using rule 83 (FACTOR -> C_CHAR .)
    GREATER_THAN    reduce using rule 83 (FACTOR -> C_CHAR .)
    LESS_THAN       reduce using rule 83 (FACTOR -> C_CHAR .)
    IS_EQUAL        reduce using rule 83 (FACTOR -> C_CHAR .)
    NOT_EQUAL       reduce using rule 83 (FACTOR -> C_CHAR .)
    AND             reduce using rule 83 (FACTOR -> C_CHAR .)
    OR              reduce using rule 83 (FACTOR -> C_CHAR .)
    EQUALS          reduce using rule 83 (FACTOR -> C_CHAR .)
    RBRACKET        reduce using rule 83 (FACTOR -> C_CHAR .)


state 43

    (84) FACTOR -> VARIABLE .

    COMMA           reduce using rule 84 (FACTOR -> VARIABLE .)
    SEMICOLON       reduce using rule 84 (FACTOR -> VARIABLE .)
    DIVIDE          reduce using rule 84 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 84 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 84 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 84 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 84 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 84 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 84 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 84 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 84 (FACTOR -> VARIABLE .)
    FUNC            reduce using rule 84 (FACTOR -> VARIABLE .)
    MAIN            reduce using rule 84 (FACTOR -> VARIABLE .)
    LBRACKET        reduce using rule 84 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 84 (FACTOR -> VARIABLE .)
    RSBRACKET       reduce using rule 84 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 84 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> VARIABLE .)
    AND             reduce using rule 84 (FACTOR -> VARIABLE .)
    OR              reduce using rule 84 (FACTOR -> VARIABLE .)
    EQUALS          reduce using rule 84 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 84 (FACTOR -> VARIABLE .)


state 44

    (85) FACTOR -> LLAMADAF .

    COMMA           reduce using rule 85 (FACTOR -> LLAMADAF .)
    SEMICOLON       reduce using rule 85 (FACTOR -> LLAMADAF .)
    DIVIDE          reduce using rule 85 (FACTOR -> LLAMADAF .)
    MULTIPLY        reduce using rule 85 (FACTOR -> LLAMADAF .)
    PLUS            reduce using rule 85 (FACTOR -> LLAMADAF .)
    MINUS           reduce using rule 85 (FACTOR -> LLAMADAF .)
    LPAREN          reduce using rule 85 (FACTOR -> LLAMADAF .)
    C_INT           reduce using rule 85 (FACTOR -> LLAMADAF .)
    C_FLOAT         reduce using rule 85 (FACTOR -> LLAMADAF .)
    C_CHAR          reduce using rule 85 (FACTOR -> LLAMADAF .)
    NAME            reduce using rule 85 (FACTOR -> LLAMADAF .)
    FUNC            reduce using rule 85 (FACTOR -> LLAMADAF .)
    MAIN            reduce using rule 85 (FACTOR -> LLAMADAF .)
    LBRACKET        reduce using rule 85 (FACTOR -> LLAMADAF .)
    RPAREN          reduce using rule 85 (FACTOR -> LLAMADAF .)
    RSBRACKET       reduce using rule 85 (FACTOR -> LLAMADAF .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> LLAMADAF .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> LLAMADAF .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> LLAMADAF .)
    LESS_THAN       reduce using rule 85 (FACTOR -> LLAMADAF .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> LLAMADAF .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> LLAMADAF .)
    AND             reduce using rule 85 (FACTOR -> LLAMADAF .)
    OR              reduce using rule 85 (FACTOR -> LLAMADAF .)
    EQUALS          reduce using rule 85 (FACTOR -> LLAMADAF .)
    RBRACKET        reduce using rule 85 (FACTOR -> LLAMADAF .)


state 45

    (27) PRINCIPAL -> MAIN LPAREN RPAREN . CUERPO
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 69

state 46

    (9) FUNCION -> FUNC TIPO_FUNCION NAME LPAREN . PARAMS RPAREN V4 CUERPO
    (12) PARAMS -> . TIPO NAME P1
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    PARAMS                         shift and go to state 71
    TIPO                           shift and go to state 72

state 47

    (7) V3 -> TIPO . VARIABLE V2 V3
    (28) VARIABLE -> . NAME E2

    NAME            shift and go to state 24

    VARIABLE                       shift and go to state 73

state 48

    (46) V3 -> VARIABLE . COMMA V3
    (47) V3 -> VARIABLE .

    COMMA           shift and go to state 74
    FUNC            reduce using rule 47 (V3 -> VARIABLE .)
    MAIN            reduce using rule 47 (V3 -> VARIABLE .)
    LBRACKET        reduce using rule 47 (V3 -> VARIABLE .)
    RPAREN          reduce using rule 47 (V3 -> VARIABLE .)


state 49

    (4) VARS -> VAR TIPO VARIABLE V2 V3 .

    FUNC            reduce using rule 4 (VARS -> VAR TIPO VARIABLE V2 V3 .)
    MAIN            reduce using rule 4 (VARS -> VAR TIPO VARIABLE V2 V3 .)
    LBRACKET        reduce using rule 4 (VARS -> VAR TIPO VARIABLE V2 V3 .)


state 50

    (8) V3 -> empty .

    FUNC            reduce using rule 8 (V3 -> empty .)
    MAIN            reduce using rule 8 (V3 -> empty .)
    LBRACKET        reduce using rule 8 (V3 -> empty .)
    RPAREN          reduce using rule 8 (V3 -> empty .)


state 51

    (5) V2 -> COMMA VARIABLE . V2
    (5) V2 -> . COMMA VARIABLE V2
    (6) V2 -> . SEMICOLON

    COMMA           shift and go to state 28
    SEMICOLON       shift and go to state 29

    V2                             shift and go to state 75

state 52

    (43) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (80) FACTOR -> LPAREN . H_EXP RPAREN
    (18) E1 -> . ESTATUTO
    (19) E1 -> . ESTATUTO E1
    (41) E1 -> . EXP
    (42) E1 -> . EXP COMMA E1
    (56) H_EXP -> . T
    (31) ESTATUTO -> . ASIGNACION
    (32) ESTATUTO -> . LLAMADA
    (33) ESTATUTO -> . RETORNO
    (34) ESTATUTO -> . LECTURA
    (35) ESTATUTO -> . ESCRITURA
    (36) ESTATUTO -> . CONDICION
    (37) ESTATUTO -> . CICLO_W
    (38) ESTATUTO -> . CICLO_F
    (72) EXP -> . TERMINO T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (39) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (40) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (44) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (45) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (48) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (51) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (54) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (55) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (76) TERMINO -> . FACTOR F2
    (59) T_EXP -> . G
    (86) empty -> .
    (28) VARIABLE -> . NAME E2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (62) G_EXP -> . EXP B

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    RPAREN          reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42

    E1                             shift and go to state 77
    H_EXP                          shift and go to state 67
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 79
    T                              shift and go to state 68
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 37
    T_EXP                          shift and go to state 56
    empty                          shift and go to state 59
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 38
    G                              shift and go to state 60
    LLAMADAF                       shift and go to state 44
    G_EXP                          shift and go to state 61

state 53

    (29) E2 -> LSBRACKET EXP . RSBRACKET

    RSBRACKET       shift and go to state 95


state 54

    (50) E2 -> S_EXP COMMA . E2
    (29) E2 -> . LSBRACKET EXP RSBRACKET
    (30) E2 -> . empty
    (49) E2 -> . S_EXP
    (50) E2 -> . S_EXP COMMA E2
    (86) empty -> .
    (70) S_EXP -> . C_STRING
    (71) S_EXP -> . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 32
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    C_STRING        shift and go to state 36
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    S_EXP                          shift and go to state 35
    E2                             shift and go to state 96
    EXP                            shift and go to state 33
    empty                          shift and go to state 34
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 55

    (72) EXP -> TERMINO T .

    COMMA           reduce using rule 72 (EXP -> TERMINO T .)
    SEMICOLON       reduce using rule 72 (EXP -> TERMINO T .)
    DIVIDE          reduce using rule 72 (EXP -> TERMINO T .)
    MULTIPLY        reduce using rule 72 (EXP -> TERMINO T .)
    PLUS            reduce using rule 72 (EXP -> TERMINO T .)
    MINUS           reduce using rule 72 (EXP -> TERMINO T .)
    LPAREN          reduce using rule 72 (EXP -> TERMINO T .)
    C_INT           reduce using rule 72 (EXP -> TERMINO T .)
    C_FLOAT         reduce using rule 72 (EXP -> TERMINO T .)
    C_CHAR          reduce using rule 72 (EXP -> TERMINO T .)
    NAME            reduce using rule 72 (EXP -> TERMINO T .)
    FUNC            reduce using rule 72 (EXP -> TERMINO T .)
    MAIN            reduce using rule 72 (EXP -> TERMINO T .)
    LBRACKET        reduce using rule 72 (EXP -> TERMINO T .)
    RPAREN          reduce using rule 72 (EXP -> TERMINO T .)
    RSBRACKET       reduce using rule 72 (EXP -> TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 72 (EXP -> TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 72 (EXP -> TERMINO T .)
    GREATER_THAN    reduce using rule 72 (EXP -> TERMINO T .)
    LESS_THAN       reduce using rule 72 (EXP -> TERMINO T .)
    IS_EQUAL        reduce using rule 72 (EXP -> TERMINO T .)
    NOT_EQUAL       reduce using rule 72 (EXP -> TERMINO T .)
    AND             reduce using rule 72 (EXP -> TERMINO T .)
    OR              reduce using rule 72 (EXP -> TERMINO T .)
    EQUALS          reduce using rule 72 (EXP -> TERMINO T .)
    RBRACKET        reduce using rule 72 (EXP -> TERMINO T .)


state 56

    (57) T -> T_EXP .
    (58) T -> T_EXP . OR T

  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 57 (T -> T_EXP .)
    SEMICOLON       reduce using rule 57 (T -> T_EXP .)
    DIVIDE          reduce using rule 57 (T -> T_EXP .)
    MULTIPLY        reduce using rule 57 (T -> T_EXP .)
    PLUS            reduce using rule 57 (T -> T_EXP .)
    MINUS           reduce using rule 57 (T -> T_EXP .)
    LPAREN          reduce using rule 57 (T -> T_EXP .)
    C_INT           reduce using rule 57 (T -> T_EXP .)
    C_FLOAT         reduce using rule 57 (T -> T_EXP .)
    C_CHAR          reduce using rule 57 (T -> T_EXP .)
    NAME            reduce using rule 57 (T -> T_EXP .)
    FUNC            reduce using rule 57 (T -> T_EXP .)
    MAIN            reduce using rule 57 (T -> T_EXP .)
    LBRACKET        reduce using rule 57 (T -> T_EXP .)
    RPAREN          reduce using rule 57 (T -> T_EXP .)
    RSBRACKET       reduce using rule 57 (T -> T_EXP .)
    GREATER_OR_EQUAL reduce using rule 57 (T -> T_EXP .)
    LESS_OR_EQUAL   reduce using rule 57 (T -> T_EXP .)
    GREATER_THAN    reduce using rule 57 (T -> T_EXP .)
    LESS_THAN       reduce using rule 57 (T -> T_EXP .)
    IS_EQUAL        reduce using rule 57 (T -> T_EXP .)
    NOT_EQUAL       reduce using rule 57 (T -> T_EXP .)
    AND             reduce using rule 57 (T -> T_EXP .)
    EQUALS          reduce using rule 57 (T -> T_EXP .)
    RBRACKET        reduce using rule 57 (T -> T_EXP .)
    OR              shift and go to state 97

  ! OR              [ reduce using rule 57 (T -> T_EXP .) ]


state 57

    (73) T -> PLUS . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    TERMINO                        shift and go to state 98
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 58

    (74) T -> MINUS . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    TERMINO                        shift and go to state 99
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 59

    (75) T -> empty .

    COMMA           reduce using rule 75 (T -> empty .)
    SEMICOLON       reduce using rule 75 (T -> empty .)
    DIVIDE          reduce using rule 75 (T -> empty .)
    MULTIPLY        reduce using rule 75 (T -> empty .)
    PLUS            reduce using rule 75 (T -> empty .)
    MINUS           reduce using rule 75 (T -> empty .)
    LPAREN          reduce using rule 75 (T -> empty .)
    C_INT           reduce using rule 75 (T -> empty .)
    C_FLOAT         reduce using rule 75 (T -> empty .)
    C_CHAR          reduce using rule 75 (T -> empty .)
    NAME            reduce using rule 75 (T -> empty .)
    FUNC            reduce using rule 75 (T -> empty .)
    MAIN            reduce using rule 75 (T -> empty .)
    LBRACKET        reduce using rule 75 (T -> empty .)
    RPAREN          reduce using rule 75 (T -> empty .)
    RSBRACKET       reduce using rule 75 (T -> empty .)
    GREATER_OR_EQUAL reduce using rule 75 (T -> empty .)
    LESS_OR_EQUAL   reduce using rule 75 (T -> empty .)
    GREATER_THAN    reduce using rule 75 (T -> empty .)
    LESS_THAN       reduce using rule 75 (T -> empty .)
    IS_EQUAL        reduce using rule 75 (T -> empty .)
    NOT_EQUAL       reduce using rule 75 (T -> empty .)
    AND             reduce using rule 75 (T -> empty .)
    OR              reduce using rule 75 (T -> empty .)
    EQUALS          reduce using rule 75 (T -> empty .)
    RBRACKET        reduce using rule 75 (T -> empty .)


state 60

    (59) T_EXP -> G .

    COMMA           reduce using rule 59 (T_EXP -> G .)
    SEMICOLON       reduce using rule 59 (T_EXP -> G .)
    DIVIDE          reduce using rule 59 (T_EXP -> G .)
    MULTIPLY        reduce using rule 59 (T_EXP -> G .)
    PLUS            reduce using rule 59 (T_EXP -> G .)
    MINUS           reduce using rule 59 (T_EXP -> G .)
    LPAREN          reduce using rule 59 (T_EXP -> G .)
    C_INT           reduce using rule 59 (T_EXP -> G .)
    C_FLOAT         reduce using rule 59 (T_EXP -> G .)
    C_CHAR          reduce using rule 59 (T_EXP -> G .)
    NAME            reduce using rule 59 (T_EXP -> G .)
    FUNC            reduce using rule 59 (T_EXP -> G .)
    MAIN            reduce using rule 59 (T_EXP -> G .)
    LBRACKET        reduce using rule 59 (T_EXP -> G .)
    RPAREN          reduce using rule 59 (T_EXP -> G .)
    RSBRACKET       reduce using rule 59 (T_EXP -> G .)
    GREATER_OR_EQUAL reduce using rule 59 (T_EXP -> G .)
    LESS_OR_EQUAL   reduce using rule 59 (T_EXP -> G .)
    GREATER_THAN    reduce using rule 59 (T_EXP -> G .)
    LESS_THAN       reduce using rule 59 (T_EXP -> G .)
    IS_EQUAL        reduce using rule 59 (T_EXP -> G .)
    NOT_EQUAL       reduce using rule 59 (T_EXP -> G .)
    AND             reduce using rule 59 (T_EXP -> G .)
    OR              reduce using rule 59 (T_EXP -> G .)
    EQUALS          reduce using rule 59 (T_EXP -> G .)
    RBRACKET        reduce using rule 59 (T_EXP -> G .)


state 61

    (60) G -> G_EXP .
    (61) G -> G_EXP . AND G

  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 60 (G -> G_EXP .)
    SEMICOLON       reduce using rule 60 (G -> G_EXP .)
    DIVIDE          reduce using rule 60 (G -> G_EXP .)
    MULTIPLY        reduce using rule 60 (G -> G_EXP .)
    PLUS            reduce using rule 60 (G -> G_EXP .)
    MINUS           reduce using rule 60 (G -> G_EXP .)
    LPAREN          reduce using rule 60 (G -> G_EXP .)
    C_INT           reduce using rule 60 (G -> G_EXP .)
    C_FLOAT         reduce using rule 60 (G -> G_EXP .)
    C_CHAR          reduce using rule 60 (G -> G_EXP .)
    NAME            reduce using rule 60 (G -> G_EXP .)
    FUNC            reduce using rule 60 (G -> G_EXP .)
    MAIN            reduce using rule 60 (G -> G_EXP .)
    LBRACKET        reduce using rule 60 (G -> G_EXP .)
    RPAREN          reduce using rule 60 (G -> G_EXP .)
    RSBRACKET       reduce using rule 60 (G -> G_EXP .)
    GREATER_OR_EQUAL reduce using rule 60 (G -> G_EXP .)
    LESS_OR_EQUAL   reduce using rule 60 (G -> G_EXP .)
    GREATER_THAN    reduce using rule 60 (G -> G_EXP .)
    LESS_THAN       reduce using rule 60 (G -> G_EXP .)
    IS_EQUAL        reduce using rule 60 (G -> G_EXP .)
    NOT_EQUAL       reduce using rule 60 (G -> G_EXP .)
    OR              reduce using rule 60 (G -> G_EXP .)
    EQUALS          reduce using rule 60 (G -> G_EXP .)
    RBRACKET        reduce using rule 60 (G -> G_EXP .)
    AND             shift and go to state 100

  ! AND             [ reduce using rule 60 (G -> G_EXP .) ]


state 62

    (62) G_EXP -> EXP . B
    (63) B -> . GREATER_OR_EQUAL EXP
    (64) B -> . LESS_OR_EQUAL EXP
    (65) B -> . GREATER_THAN EXP
    (66) B -> . LESS_THAN EXP
    (67) B -> . IS_EQUAL EXP
    (68) B -> . NOT_EQUAL EXP
    (69) B -> . empty
    (86) empty -> .

  ! shift/reduce conflict for GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    GREATER_OR_EQUAL shift and go to state 102
    LESS_OR_EQUAL   shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    IS_EQUAL        shift and go to state 106
    NOT_EQUAL       shift and go to state 107
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    C_INT           reduce using rule 86 (empty -> .)
    C_FLOAT         reduce using rule 86 (empty -> .)
    C_CHAR          reduce using rule 86 (empty -> .)
    NAME            reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

  ! GREATER_OR_EQUAL [ reduce using rule 86 (empty -> .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 86 (empty -> .) ]
  ! GREATER_THAN    [ reduce using rule 86 (empty -> .) ]
  ! LESS_THAN       [ reduce using rule 86 (empty -> .) ]
  ! IS_EQUAL        [ reduce using rule 86 (empty -> .) ]
  ! NOT_EQUAL       [ reduce using rule 86 (empty -> .) ]

    B                              shift and go to state 101
    empty                          shift and go to state 108

state 63

    (76) TERMINO -> FACTOR F2 .

    COMMA           reduce using rule 76 (TERMINO -> FACTOR F2 .)
    SEMICOLON       reduce using rule 76 (TERMINO -> FACTOR F2 .)
    DIVIDE          reduce using rule 76 (TERMINO -> FACTOR F2 .)
    MULTIPLY        reduce using rule 76 (TERMINO -> FACTOR F2 .)
    PLUS            reduce using rule 76 (TERMINO -> FACTOR F2 .)
    MINUS           reduce using rule 76 (TERMINO -> FACTOR F2 .)
    LPAREN          reduce using rule 76 (TERMINO -> FACTOR F2 .)
    C_INT           reduce using rule 76 (TERMINO -> FACTOR F2 .)
    C_FLOAT         reduce using rule 76 (TERMINO -> FACTOR F2 .)
    C_CHAR          reduce using rule 76 (TERMINO -> FACTOR F2 .)
    NAME            reduce using rule 76 (TERMINO -> FACTOR F2 .)
    FUNC            reduce using rule 76 (TERMINO -> FACTOR F2 .)
    MAIN            reduce using rule 76 (TERMINO -> FACTOR F2 .)
    LBRACKET        reduce using rule 76 (TERMINO -> FACTOR F2 .)
    RPAREN          reduce using rule 76 (TERMINO -> FACTOR F2 .)
    RSBRACKET       reduce using rule 76 (TERMINO -> FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 76 (TERMINO -> FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 76 (TERMINO -> FACTOR F2 .)
    GREATER_THAN    reduce using rule 76 (TERMINO -> FACTOR F2 .)
    LESS_THAN       reduce using rule 76 (TERMINO -> FACTOR F2 .)
    IS_EQUAL        reduce using rule 76 (TERMINO -> FACTOR F2 .)
    NOT_EQUAL       reduce using rule 76 (TERMINO -> FACTOR F2 .)
    AND             reduce using rule 76 (TERMINO -> FACTOR F2 .)
    OR              reduce using rule 76 (TERMINO -> FACTOR F2 .)
    EQUALS          reduce using rule 76 (TERMINO -> FACTOR F2 .)
    RBRACKET        reduce using rule 76 (TERMINO -> FACTOR F2 .)


state 64

    (77) F2 -> DIVIDE . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    FACTOR                         shift and go to state 109
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 65

    (78) F2 -> MULTIPLY . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    FACTOR                         shift and go to state 110
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 66

    (79) F2 -> empty .

    COMMA           reduce using rule 79 (F2 -> empty .)
    SEMICOLON       reduce using rule 79 (F2 -> empty .)
    DIVIDE          reduce using rule 79 (F2 -> empty .)
    MULTIPLY        reduce using rule 79 (F2 -> empty .)
    PLUS            reduce using rule 79 (F2 -> empty .)
    MINUS           reduce using rule 79 (F2 -> empty .)
    LPAREN          reduce using rule 79 (F2 -> empty .)
    C_INT           reduce using rule 79 (F2 -> empty .)
    C_FLOAT         reduce using rule 79 (F2 -> empty .)
    C_CHAR          reduce using rule 79 (F2 -> empty .)
    NAME            reduce using rule 79 (F2 -> empty .)
    FUNC            reduce using rule 79 (F2 -> empty .)
    MAIN            reduce using rule 79 (F2 -> empty .)
    LBRACKET        reduce using rule 79 (F2 -> empty .)
    RPAREN          reduce using rule 79 (F2 -> empty .)
    RSBRACKET       reduce using rule 79 (F2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 79 (F2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 79 (F2 -> empty .)
    GREATER_THAN    reduce using rule 79 (F2 -> empty .)
    LESS_THAN       reduce using rule 79 (F2 -> empty .)
    IS_EQUAL        reduce using rule 79 (F2 -> empty .)
    NOT_EQUAL       reduce using rule 79 (F2 -> empty .)
    AND             reduce using rule 79 (F2 -> empty .)
    OR              reduce using rule 79 (F2 -> empty .)
    EQUALS          reduce using rule 79 (F2 -> empty .)
    RBRACKET        reduce using rule 79 (F2 -> empty .)


state 67

    (80) FACTOR -> LPAREN H_EXP . RPAREN

    RPAREN          shift and go to state 111


state 68

    (56) H_EXP -> T .

    RPAREN          reduce using rule 56 (H_EXP -> T .)


state 69

    (27) PRINCIPAL -> MAIN LPAREN RPAREN CUERPO .

    $end            reduce using rule 27 (PRINCIPAL -> MAIN LPAREN RPAREN CUERPO .)


state 70

    (15) CUERPO -> LBRACKET . E RBRACKET
    (16) E -> . E1
    (17) E -> . empty
    (18) E1 -> . ESTATUTO
    (19) E1 -> . ESTATUTO E1
    (41) E1 -> . EXP
    (42) E1 -> . EXP COMMA E1
    (86) empty -> .
    (31) ESTATUTO -> . ASIGNACION
    (32) ESTATUTO -> . LLAMADA
    (33) ESTATUTO -> . RETORNO
    (34) ESTATUTO -> . LECTURA
    (35) ESTATUTO -> . ESCRITURA
    (36) ESTATUTO -> . CONDICION
    (37) ESTATUTO -> . CICLO_W
    (38) ESTATUTO -> . CICLO_F
    (72) EXP -> . TERMINO T
    (39) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (40) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (44) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (45) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (48) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (51) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (54) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (55) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (76) TERMINO -> . FACTOR F2
    (28) VARIABLE -> . NAME E2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RBRACKET        reduce using rule 86 (empty -> .)
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42

    E                              shift and go to state 112
    E1                             shift and go to state 113
    empty                          shift and go to state 114
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 115
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 37
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 38
    LLAMADAF                       shift and go to state 44

state 71

    (9) FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS . RPAREN V4 CUERPO

    RPAREN          shift and go to state 116


state 72

    (12) PARAMS -> TIPO . NAME P1

    NAME            shift and go to state 117


state 73

    (7) V3 -> TIPO VARIABLE . V2 V3
    (5) V2 -> . COMMA VARIABLE V2
    (6) V2 -> . SEMICOLON

    COMMA           shift and go to state 28
    SEMICOLON       shift and go to state 29

    V2                             shift and go to state 118

state 74

    (46) V3 -> VARIABLE COMMA . V3
    (7) V3 -> . TIPO VARIABLE V2 V3
    (8) V3 -> . empty
    (46) V3 -> . VARIABLE COMMA V3
    (47) V3 -> . VARIABLE
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR
    (86) empty -> .
    (28) VARIABLE -> . NAME E2

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    NAME            shift and go to state 24

    VARIABLE                       shift and go to state 48
    V3                             shift and go to state 119
    TIPO                           shift and go to state 47
    empty                          shift and go to state 50

state 75

    (5) V2 -> COMMA VARIABLE V2 .

    INT             reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    FLOAT           reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    CHAR            reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    NAME            reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    FUNC            reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    MAIN            reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    LBRACKET        reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)
    RPAREN          reduce using rule 5 (V2 -> COMMA VARIABLE V2 .)


state 76

    (40) LLAMADA -> NAME . LPAREN E1 RPAREN SEMICOLON
    (28) VARIABLE -> NAME . E2
    (43) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (29) E2 -> . LSBRACKET EXP RSBRACKET
    (30) E2 -> . empty
    (49) E2 -> . S_EXP
    (50) E2 -> . S_EXP COMMA E2
    (86) empty -> .
    (70) S_EXP -> . C_STRING
    (71) S_EXP -> . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 120
    LSBRACKET       shift and go to state 32
    EQUALS          reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    C_STRING        shift and go to state 36
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    E2                             shift and go to state 31
    EXP                            shift and go to state 33
    empty                          shift and go to state 34
    S_EXP                          shift and go to state 35
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 77

    (43) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 121


state 78

    (18) E1 -> ESTATUTO .
    (19) E1 -> ESTATUTO . E1
    (18) E1 -> . ESTATUTO
    (19) E1 -> . ESTATUTO E1
    (41) E1 -> . EXP
    (42) E1 -> . EXP COMMA E1
    (31) ESTATUTO -> . ASIGNACION
    (32) ESTATUTO -> . LLAMADA
    (33) ESTATUTO -> . RETORNO
    (34) ESTATUTO -> . LECTURA
    (35) ESTATUTO -> . ESCRITURA
    (36) ESTATUTO -> . CONDICION
    (37) ESTATUTO -> . CICLO_W
    (38) ESTATUTO -> . CICLO_F
    (72) EXP -> . TERMINO T
    (39) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (40) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (44) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (45) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (48) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (51) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (54) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (55) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (76) TERMINO -> . FACTOR F2
    (28) VARIABLE -> . NAME E2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RPAREN          reduce using rule 18 (E1 -> ESTATUTO .)
    RBRACKET        reduce using rule 18 (E1 -> ESTATUTO .)
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42

    ESTATUTO                       shift and go to state 78
    E1                             shift and go to state 122
    EXP                            shift and go to state 115
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 37
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 38
    LLAMADAF                       shift and go to state 44

state 79

    (41) E1 -> EXP .
    (42) E1 -> EXP . COMMA E1
    (62) G_EXP -> EXP . B
    (63) B -> . GREATER_OR_EQUAL EXP
    (64) B -> . LESS_OR_EQUAL EXP
    (65) B -> . GREATER_THAN EXP
    (66) B -> . LESS_THAN EXP
    (67) B -> . IS_EQUAL EXP
    (68) B -> . NOT_EQUAL EXP
    (69) B -> . empty
    (86) empty -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 41 (E1 -> EXP .)
    RPAREN          reduce using rule 41 (E1 -> EXP .)
    COMMA           shift and go to state 123
    GREATER_OR_EQUAL shift and go to state 102
    LESS_OR_EQUAL   shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    IS_EQUAL        shift and go to state 106
    NOT_EQUAL       shift and go to state 107
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)

  ! RPAREN          [ reduce using rule 86 (empty -> .) ]

    B                              shift and go to state 101
    empty                          shift and go to state 108

state 80

    (31) ESTATUTO -> ASIGNACION .

    NAME            reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    FROM            reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    LPAREN          reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    C_INT           reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    C_FLOAT         reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    C_CHAR          reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    RPAREN          reduce using rule 31 (ESTATUTO -> ASIGNACION .)
    RBRACKET        reduce using rule 31 (ESTATUTO -> ASIGNACION .)


state 81

    (32) ESTATUTO -> LLAMADA .

    NAME            reduce using rule 32 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 32 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 32 (ESTATUTO -> LLAMADA .)
    PRINT           reduce using rule 32 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 32 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 32 (ESTATUTO -> LLAMADA .)
    FROM            reduce using rule 32 (ESTATUTO -> LLAMADA .)
    LPAREN          reduce using rule 32 (ESTATUTO -> LLAMADA .)
    C_INT           reduce using rule 32 (ESTATUTO -> LLAMADA .)
    C_FLOAT         reduce using rule 32 (ESTATUTO -> LLAMADA .)
    C_CHAR          reduce using rule 32 (ESTATUTO -> LLAMADA .)
    RPAREN          reduce using rule 32 (ESTATUTO -> LLAMADA .)
    RBRACKET        reduce using rule 32 (ESTATUTO -> LLAMADA .)


state 82

    (33) ESTATUTO -> RETORNO .

    NAME            reduce using rule 33 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 33 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 33 (ESTATUTO -> RETORNO .)
    PRINT           reduce using rule 33 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 33 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 33 (ESTATUTO -> RETORNO .)
    FROM            reduce using rule 33 (ESTATUTO -> RETORNO .)
    LPAREN          reduce using rule 33 (ESTATUTO -> RETORNO .)
    C_INT           reduce using rule 33 (ESTATUTO -> RETORNO .)
    C_FLOAT         reduce using rule 33 (ESTATUTO -> RETORNO .)
    C_CHAR          reduce using rule 33 (ESTATUTO -> RETORNO .)
    RPAREN          reduce using rule 33 (ESTATUTO -> RETORNO .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> RETORNO .)


state 83

    (34) ESTATUTO -> LECTURA .

    NAME            reduce using rule 34 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 34 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 34 (ESTATUTO -> LECTURA .)
    PRINT           reduce using rule 34 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 34 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 34 (ESTATUTO -> LECTURA .)
    FROM            reduce using rule 34 (ESTATUTO -> LECTURA .)
    LPAREN          reduce using rule 34 (ESTATUTO -> LECTURA .)
    C_INT           reduce using rule 34 (ESTATUTO -> LECTURA .)
    C_FLOAT         reduce using rule 34 (ESTATUTO -> LECTURA .)
    C_CHAR          reduce using rule 34 (ESTATUTO -> LECTURA .)
    RPAREN          reduce using rule 34 (ESTATUTO -> LECTURA .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> LECTURA .)


state 84

    (35) ESTATUTO -> ESCRITURA .

    NAME            reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    FROM            reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    LPAREN          reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    C_INT           reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    C_FLOAT         reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    C_CHAR          reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    RPAREN          reduce using rule 35 (ESTATUTO -> ESCRITURA .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> ESCRITURA .)


state 85

    (36) ESTATUTO -> CONDICION .

    NAME            reduce using rule 36 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 36 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 36 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 36 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 36 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 36 (ESTATUTO -> CONDICION .)
    FROM            reduce using rule 36 (ESTATUTO -> CONDICION .)
    LPAREN          reduce using rule 36 (ESTATUTO -> CONDICION .)
    C_INT           reduce using rule 36 (ESTATUTO -> CONDICION .)
    C_FLOAT         reduce using rule 36 (ESTATUTO -> CONDICION .)
    C_CHAR          reduce using rule 36 (ESTATUTO -> CONDICION .)
    RPAREN          reduce using rule 36 (ESTATUTO -> CONDICION .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> CONDICION .)


state 86

    (37) ESTATUTO -> CICLO_W .

    NAME            reduce using rule 37 (ESTATUTO -> CICLO_W .)
    RETURN          reduce using rule 37 (ESTATUTO -> CICLO_W .)
    READ            reduce using rule 37 (ESTATUTO -> CICLO_W .)
    PRINT           reduce using rule 37 (ESTATUTO -> CICLO_W .)
    IF              reduce using rule 37 (ESTATUTO -> CICLO_W .)
    WHILE           reduce using rule 37 (ESTATUTO -> CICLO_W .)
    FROM            reduce using rule 37 (ESTATUTO -> CICLO_W .)
    LPAREN          reduce using rule 37 (ESTATUTO -> CICLO_W .)
    C_INT           reduce using rule 37 (ESTATUTO -> CICLO_W .)
    C_FLOAT         reduce using rule 37 (ESTATUTO -> CICLO_W .)
    C_CHAR          reduce using rule 37 (ESTATUTO -> CICLO_W .)
    RPAREN          reduce using rule 37 (ESTATUTO -> CICLO_W .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> CICLO_W .)


state 87

    (38) ESTATUTO -> CICLO_F .

    NAME            reduce using rule 38 (ESTATUTO -> CICLO_F .)
    RETURN          reduce using rule 38 (ESTATUTO -> CICLO_F .)
    READ            reduce using rule 38 (ESTATUTO -> CICLO_F .)
    PRINT           reduce using rule 38 (ESTATUTO -> CICLO_F .)
    IF              reduce using rule 38 (ESTATUTO -> CICLO_F .)
    WHILE           reduce using rule 38 (ESTATUTO -> CICLO_F .)
    FROM            reduce using rule 38 (ESTATUTO -> CICLO_F .)
    LPAREN          reduce using rule 38 (ESTATUTO -> CICLO_F .)
    C_INT           reduce using rule 38 (ESTATUTO -> CICLO_F .)
    C_FLOAT         reduce using rule 38 (ESTATUTO -> CICLO_F .)
    C_CHAR          reduce using rule 38 (ESTATUTO -> CICLO_F .)
    RPAREN          reduce using rule 38 (ESTATUTO -> CICLO_F .)
    RBRACKET        reduce using rule 38 (ESTATUTO -> CICLO_F .)


state 88

    (39) ASIGNACION -> VARIABLE . EQUALS EXP SEMICOLON
    (84) FACTOR -> VARIABLE .

    EQUALS          shift and go to state 124
    DIVIDE          reduce using rule 84 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 84 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 84 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 84 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 84 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 84 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 84 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 84 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 84 (FACTOR -> VARIABLE .)
    COMMA           reduce using rule 84 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 84 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 84 (FACTOR -> VARIABLE .)
    AND             reduce using rule 84 (FACTOR -> VARIABLE .)
    OR              reduce using rule 84 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 84 (FACTOR -> VARIABLE .)


state 89

    (44) RETORNO -> RETURN . LPAREN EXP RPAREN SEMICOLON

    LPAREN          shift and go to state 125


state 90

    (45) LECTURA -> READ . LPAREN V3 RPAREN SEMICOLON

    LPAREN          shift and go to state 126


state 91

    (48) ESCRITURA -> PRINT . LPAREN E2 RPAREN SEMICOLON

    LPAREN          shift and go to state 127


state 92

    (51) CONDICION -> IF . LPAREN H_EXP RPAREN THEN CUERPO ELSE1

    LPAREN          shift and go to state 128


state 93

    (54) CICLO_W -> WHILE . LPAREN H_EXP RPAREN DO CUERPO

    LPAREN          shift and go to state 129


state 94

    (55) CICLO_F -> FROM . NAME EQUALS C_INT TO C_INT DO CUERPO

    NAME            shift and go to state 130


state 95

    (29) E2 -> LSBRACKET EXP RSBRACKET .

    COMMA           reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    SEMICOLON       reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    DIVIDE          reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    MULTIPLY        reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    PLUS            reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    MINUS           reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    LPAREN          reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_INT           reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_FLOAT         reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_CHAR          reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    NAME            reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    FUNC            reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    MAIN            reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    LBRACKET        reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    RPAREN          reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    RSBRACKET       reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_OR_EQUAL reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_OR_EQUAL   reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_THAN    reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_THAN       reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    IS_EQUAL        reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    NOT_EQUAL       reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    AND             reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    OR              reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    EQUALS          reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)
    RBRACKET        reduce using rule 29 (E2 -> LSBRACKET EXP RSBRACKET .)


state 96

    (50) E2 -> S_EXP COMMA E2 .

    COMMA           reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    SEMICOLON       reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    DIVIDE          reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    MULTIPLY        reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    PLUS            reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    MINUS           reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    LPAREN          reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    C_INT           reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    C_FLOAT         reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    C_CHAR          reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    NAME            reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    FUNC            reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    MAIN            reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    LBRACKET        reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    RPAREN          reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    RSBRACKET       reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    GREATER_OR_EQUAL reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    LESS_OR_EQUAL   reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    GREATER_THAN    reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    LESS_THAN       reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    IS_EQUAL        reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    NOT_EQUAL       reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    AND             reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    OR              reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    EQUALS          reduce using rule 50 (E2 -> S_EXP COMMA E2 .)
    RBRACKET        reduce using rule 50 (E2 -> S_EXP COMMA E2 .)


state 97

    (58) T -> T_EXP OR . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! PLUS            [ reduce using rule 86 (empty -> .) ]
  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    T_EXP                          shift and go to state 56
    T                              shift and go to state 131
    TERMINO                        shift and go to state 37
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 98

    (73) T -> PLUS TERMINO . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! PLUS            [ reduce using rule 86 (empty -> .) ]
  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    TERMINO                        shift and go to state 37
    T                              shift and go to state 132
    T_EXP                          shift and go to state 56
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 99

    (74) T -> MINUS TERMINO . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    MULTIPLY        reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

  ! PLUS            [ reduce using rule 86 (empty -> .) ]
  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! C_INT           [ reduce using rule 86 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 86 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 86 (empty -> .) ]
  ! NAME            [ reduce using rule 86 (empty -> .) ]

    TERMINO                        shift and go to state 37
    T                              shift and go to state 133
    T_EXP                          shift and go to state 56
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 100

    (61) G -> G_EXP AND . G
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    G_EXP                          shift and go to state 61
    G                              shift and go to state 134
    EXP                            shift and go to state 62
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 101

    (62) G_EXP -> EXP B .

    COMMA           reduce using rule 62 (G_EXP -> EXP B .)
    SEMICOLON       reduce using rule 62 (G_EXP -> EXP B .)
    DIVIDE          reduce using rule 62 (G_EXP -> EXP B .)
    MULTIPLY        reduce using rule 62 (G_EXP -> EXP B .)
    PLUS            reduce using rule 62 (G_EXP -> EXP B .)
    MINUS           reduce using rule 62 (G_EXP -> EXP B .)
    LPAREN          reduce using rule 62 (G_EXP -> EXP B .)
    C_INT           reduce using rule 62 (G_EXP -> EXP B .)
    C_FLOAT         reduce using rule 62 (G_EXP -> EXP B .)
    C_CHAR          reduce using rule 62 (G_EXP -> EXP B .)
    NAME            reduce using rule 62 (G_EXP -> EXP B .)
    FUNC            reduce using rule 62 (G_EXP -> EXP B .)
    MAIN            reduce using rule 62 (G_EXP -> EXP B .)
    LBRACKET        reduce using rule 62 (G_EXP -> EXP B .)
    RPAREN          reduce using rule 62 (G_EXP -> EXP B .)
    RSBRACKET       reduce using rule 62 (G_EXP -> EXP B .)
    GREATER_OR_EQUAL reduce using rule 62 (G_EXP -> EXP B .)
    LESS_OR_EQUAL   reduce using rule 62 (G_EXP -> EXP B .)
    GREATER_THAN    reduce using rule 62 (G_EXP -> EXP B .)
    LESS_THAN       reduce using rule 62 (G_EXP -> EXP B .)
    IS_EQUAL        reduce using rule 62 (G_EXP -> EXP B .)
    NOT_EQUAL       reduce using rule 62 (G_EXP -> EXP B .)
    AND             reduce using rule 62 (G_EXP -> EXP B .)
    OR              reduce using rule 62 (G_EXP -> EXP B .)
    EQUALS          reduce using rule 62 (G_EXP -> EXP B .)
    RBRACKET        reduce using rule 62 (G_EXP -> EXP B .)


state 102

    (63) B -> GREATER_OR_EQUAL . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 135
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 103

    (64) B -> LESS_OR_EQUAL . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 136
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 104

    (65) B -> GREATER_THAN . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 137
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 105

    (66) B -> LESS_THAN . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 138
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 106

    (67) B -> IS_EQUAL . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 107

    (68) B -> NOT_EQUAL . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 140
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 108

    (69) B -> empty .

    COMMA           reduce using rule 69 (B -> empty .)
    SEMICOLON       reduce using rule 69 (B -> empty .)
    DIVIDE          reduce using rule 69 (B -> empty .)
    MULTIPLY        reduce using rule 69 (B -> empty .)
    PLUS            reduce using rule 69 (B -> empty .)
    MINUS           reduce using rule 69 (B -> empty .)
    LPAREN          reduce using rule 69 (B -> empty .)
    C_INT           reduce using rule 69 (B -> empty .)
    C_FLOAT         reduce using rule 69 (B -> empty .)
    C_CHAR          reduce using rule 69 (B -> empty .)
    NAME            reduce using rule 69 (B -> empty .)
    FUNC            reduce using rule 69 (B -> empty .)
    MAIN            reduce using rule 69 (B -> empty .)
    LBRACKET        reduce using rule 69 (B -> empty .)
    RPAREN          reduce using rule 69 (B -> empty .)
    RSBRACKET       reduce using rule 69 (B -> empty .)
    GREATER_OR_EQUAL reduce using rule 69 (B -> empty .)
    LESS_OR_EQUAL   reduce using rule 69 (B -> empty .)
    GREATER_THAN    reduce using rule 69 (B -> empty .)
    LESS_THAN       reduce using rule 69 (B -> empty .)
    IS_EQUAL        reduce using rule 69 (B -> empty .)
    NOT_EQUAL       reduce using rule 69 (B -> empty .)
    AND             reduce using rule 69 (B -> empty .)
    OR              reduce using rule 69 (B -> empty .)
    EQUALS          reduce using rule 69 (B -> empty .)
    RBRACKET        reduce using rule 69 (B -> empty .)


state 109

    (77) F2 -> DIVIDE FACTOR . F2
    (77) F2 -> . DIVIDE FACTOR F2
    (78) F2 -> . MULTIPLY FACTOR F2
    (79) F2 -> . empty
    (86) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 64
    MULTIPLY        shift and go to state 65
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    C_INT           reduce using rule 86 (empty -> .)
    C_FLOAT         reduce using rule 86 (empty -> .)
    C_CHAR          reduce using rule 86 (empty -> .)
    NAME            reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

  ! DIVIDE          [ reduce using rule 86 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 86 (empty -> .) ]

    F2                             shift and go to state 141
    empty                          shift and go to state 66

state 110

    (78) F2 -> MULTIPLY FACTOR . F2
    (77) F2 -> . DIVIDE FACTOR F2
    (78) F2 -> . MULTIPLY FACTOR F2
    (79) F2 -> . empty
    (86) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 64
    MULTIPLY        shift and go to state 65
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    C_INT           reduce using rule 86 (empty -> .)
    C_FLOAT         reduce using rule 86 (empty -> .)
    C_CHAR          reduce using rule 86 (empty -> .)
    NAME            reduce using rule 86 (empty -> .)
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RSBRACKET       reduce using rule 86 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 86 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 86 (empty -> .)
    GREATER_THAN    reduce using rule 86 (empty -> .)
    LESS_THAN       reduce using rule 86 (empty -> .)
    IS_EQUAL        reduce using rule 86 (empty -> .)
    NOT_EQUAL       reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

  ! DIVIDE          [ reduce using rule 86 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 86 (empty -> .) ]

    F2                             shift and go to state 142
    empty                          shift and go to state 66

state 111

    (80) FACTOR -> LPAREN H_EXP RPAREN .

    COMMA           reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    SEMICOLON       reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    DIVIDE          reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    MULTIPLY        reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    PLUS            reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    MINUS           reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    LPAREN          reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_INT           reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_FLOAT         reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_CHAR          reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    NAME            reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    FUNC            reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    MAIN            reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    LBRACKET        reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    RPAREN          reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    RSBRACKET       reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_OR_EQUAL reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_OR_EQUAL   reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_THAN    reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_THAN       reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    IS_EQUAL        reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    NOT_EQUAL       reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    AND             reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    OR              reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    EQUALS          reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)
    RBRACKET        reduce using rule 80 (FACTOR -> LPAREN H_EXP RPAREN .)


state 112

    (15) CUERPO -> LBRACKET E . RBRACKET

    RBRACKET        shift and go to state 143


state 113

    (16) E -> E1 .

    RBRACKET        reduce using rule 16 (E -> E1 .)


state 114

    (17) E -> empty .

    RBRACKET        reduce using rule 17 (E -> empty .)


state 115

    (41) E1 -> EXP .
    (42) E1 -> EXP . COMMA E1

    RBRACKET        reduce using rule 41 (E1 -> EXP .)
    RPAREN          reduce using rule 41 (E1 -> EXP .)
    COMMA           shift and go to state 123


state 116

    (9) FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN . V4 CUERPO
    (10) V4 -> . VARS
    (11) V4 -> . empty
    (4) VARS -> . VAR TIPO VARIABLE V2 V3
    (86) empty -> .

    VAR             shift and go to state 6
    LBRACKET        reduce using rule 86 (empty -> .)

    V4                             shift and go to state 144
    VARS                           shift and go to state 145
    empty                          shift and go to state 146

state 117

    (12) PARAMS -> TIPO NAME . P1
    (13) P1 -> . COMMA PARAMS P1
    (14) P1 -> . empty
    (86) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 148
    RPAREN          reduce using rule 86 (empty -> .)

  ! COMMA           [ reduce using rule 86 (empty -> .) ]

    P1                             shift and go to state 147
    empty                          shift and go to state 149

state 118

    (7) V3 -> TIPO VARIABLE V2 . V3
    (7) V3 -> . TIPO VARIABLE V2 V3
    (8) V3 -> . empty
    (46) V3 -> . VARIABLE COMMA V3
    (47) V3 -> . VARIABLE
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR
    (86) empty -> .
    (28) VARIABLE -> . NAME E2

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14
    FUNC            reduce using rule 86 (empty -> .)
    MAIN            reduce using rule 86 (empty -> .)
    LBRACKET        reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    NAME            shift and go to state 24

    TIPO                           shift and go to state 47
    VARIABLE                       shift and go to state 48
    V3                             shift and go to state 150
    empty                          shift and go to state 50

state 119

    (46) V3 -> VARIABLE COMMA V3 .

    FUNC            reduce using rule 46 (V3 -> VARIABLE COMMA V3 .)
    MAIN            reduce using rule 46 (V3 -> VARIABLE COMMA V3 .)
    LBRACKET        reduce using rule 46 (V3 -> VARIABLE COMMA V3 .)
    RPAREN          reduce using rule 46 (V3 -> VARIABLE COMMA V3 .)


state 120

    (40) LLAMADA -> NAME LPAREN . E1 RPAREN SEMICOLON
    (43) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (80) FACTOR -> LPAREN . H_EXP RPAREN
    (18) E1 -> . ESTATUTO
    (19) E1 -> . ESTATUTO E1
    (41) E1 -> . EXP
    (42) E1 -> . EXP COMMA E1
    (56) H_EXP -> . T
    (31) ESTATUTO -> . ASIGNACION
    (32) ESTATUTO -> . LLAMADA
    (33) ESTATUTO -> . RETORNO
    (34) ESTATUTO -> . LECTURA
    (35) ESTATUTO -> . ESCRITURA
    (36) ESTATUTO -> . CONDICION
    (37) ESTATUTO -> . CICLO_W
    (38) ESTATUTO -> . CICLO_F
    (72) EXP -> . TERMINO T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (39) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (40) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (44) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (45) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (48) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (51) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (54) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (55) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (76) TERMINO -> . FACTOR F2
    (59) T_EXP -> . G
    (86) empty -> .
    (28) VARIABLE -> . NAME E2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (62) G_EXP -> . EXP B

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    RPAREN          reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42

    E1                             shift and go to state 151
    H_EXP                          shift and go to state 67
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 79
    T                              shift and go to state 68
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 37
    T_EXP                          shift and go to state 56
    empty                          shift and go to state 59
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 38
    G                              shift and go to state 60
    LLAMADAF                       shift and go to state 44
    G_EXP                          shift and go to state 61

state 121

    (43) LLAMADAF -> NAME LPAREN E1 RPAREN .

    COMMA           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    SEMICOLON       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    DIVIDE          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    FUNC            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MAIN            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LBRACKET        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RSBRACKET       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    EQUALS          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 122

    (19) E1 -> ESTATUTO E1 .

    RPAREN          reduce using rule 19 (E1 -> ESTATUTO E1 .)
    RBRACKET        reduce using rule 19 (E1 -> ESTATUTO E1 .)


state 123

    (42) E1 -> EXP COMMA . E1
    (18) E1 -> . ESTATUTO
    (19) E1 -> . ESTATUTO E1
    (41) E1 -> . EXP
    (42) E1 -> . EXP COMMA E1
    (31) ESTATUTO -> . ASIGNACION
    (32) ESTATUTO -> . LLAMADA
    (33) ESTATUTO -> . RETORNO
    (34) ESTATUTO -> . LECTURA
    (35) ESTATUTO -> . ESCRITURA
    (36) ESTATUTO -> . CONDICION
    (37) ESTATUTO -> . CICLO_W
    (38) ESTATUTO -> . CICLO_F
    (72) EXP -> . TERMINO T
    (39) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (40) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (44) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (45) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (48) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (51) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (54) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (55) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (76) TERMINO -> . FACTOR F2
    (28) VARIABLE -> . NAME E2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42

    EXP                            shift and go to state 115
    E1                             shift and go to state 152
    ESTATUTO                       shift and go to state 78
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 37
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 38
    LLAMADAF                       shift and go to state 44

state 124

    (39) ASIGNACION -> VARIABLE EQUALS . EXP SEMICOLON
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 43
    EXP                            shift and go to state 153
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    LLAMADAF                       shift and go to state 44

state 125

    (44) RETORNO -> RETURN LPAREN . EXP RPAREN SEMICOLON
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    EXP                            shift and go to state 154
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 126

    (45) LECTURA -> READ LPAREN . V3 RPAREN SEMICOLON
    (7) V3 -> . TIPO VARIABLE V2 V3
    (8) V3 -> . empty
    (46) V3 -> . VARIABLE COMMA V3
    (47) V3 -> . VARIABLE
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR
    (86) empty -> .
    (28) VARIABLE -> . NAME E2

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14
    RPAREN          reduce using rule 86 (empty -> .)
    NAME            shift and go to state 24

    V3                             shift and go to state 155
    TIPO                           shift and go to state 47
    VARIABLE                       shift and go to state 48
    empty                          shift and go to state 50

state 127

    (48) ESCRITURA -> PRINT LPAREN . E2 RPAREN SEMICOLON
    (29) E2 -> . LSBRACKET EXP RSBRACKET
    (30) E2 -> . empty
    (49) E2 -> . S_EXP
    (50) E2 -> . S_EXP COMMA E2
    (86) empty -> .
    (70) S_EXP -> . C_STRING
    (71) S_EXP -> . EXP
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LSBRACKET       shift and go to state 32
    RPAREN          reduce using rule 86 (empty -> .)
    C_STRING        shift and go to state 36
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    E2                             shift and go to state 156
    EXP                            shift and go to state 33
    empty                          shift and go to state 34
    S_EXP                          shift and go to state 35
    TERMINO                        shift and go to state 37
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 128

    (51) CONDICION -> IF LPAREN . H_EXP RPAREN THEN CUERPO ELSE1
    (56) H_EXP -> . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    RPAREN          reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    H_EXP                          shift and go to state 157
    T                              shift and go to state 68
    T_EXP                          shift and go to state 56
    TERMINO                        shift and go to state 37
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 129

    (54) CICLO_W -> WHILE LPAREN . H_EXP RPAREN DO CUERPO
    (56) H_EXP -> . T
    (57) T -> . T_EXP
    (58) T -> . T_EXP OR T
    (73) T -> . PLUS TERMINO T
    (74) T -> . MINUS TERMINO T
    (75) T -> . empty
    (59) T_EXP -> . G
    (86) empty -> .
    (60) G -> . G_EXP
    (61) G -> . G_EXP AND G
    (62) G_EXP -> . EXP B
    (72) EXP -> . TERMINO T
    (76) TERMINO -> . FACTOR F2
    (80) FACTOR -> . LPAREN H_EXP RPAREN
    (81) FACTOR -> . C_INT
    (82) FACTOR -> . C_FLOAT
    (83) FACTOR -> . C_CHAR
    (84) FACTOR -> . VARIABLE
    (85) FACTOR -> . LLAMADAF
    (28) VARIABLE -> . NAME E2
    (43) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    RPAREN          reduce using rule 86 (empty -> .)
    LPAREN          shift and go to state 39
    C_INT           shift and go to state 40
    C_FLOAT         shift and go to state 41
    C_CHAR          shift and go to state 42
    NAME            shift and go to state 30

    H_EXP                          shift and go to state 158
    T                              shift and go to state 68
    T_EXP                          shift and go to state 56
    TERMINO                        shift and go to state 37
    empty                          shift and go to state 59
    G                              shift and go to state 60
    G_EXP                          shift and go to state 61
    EXP                            shift and go to state 62
    FACTOR                         shift and go to state 38
    VARIABLE                       shift and go to state 43
    LLAMADAF                       shift and go to state 44

state 130

    (55) CICLO_F -> FROM NAME . EQUALS C_INT TO C_INT DO CUERPO

    EQUALS          shift and go to state 159


state 131

    (58) T -> T_EXP OR T .

    COMMA           reduce using rule 58 (T -> T_EXP OR T .)
    SEMICOLON       reduce using rule 58 (T -> T_EXP OR T .)
    DIVIDE          reduce using rule 58 (T -> T_EXP OR T .)
    MULTIPLY        reduce using rule 58 (T -> T_EXP OR T .)
    PLUS            reduce using rule 58 (T -> T_EXP OR T .)
    MINUS           reduce using rule 58 (T -> T_EXP OR T .)
    LPAREN          reduce using rule 58 (T -> T_EXP OR T .)
    C_INT           reduce using rule 58 (T -> T_EXP OR T .)
    C_FLOAT         reduce using rule 58 (T -> T_EXP OR T .)
    C_CHAR          reduce using rule 58 (T -> T_EXP OR T .)
    NAME            reduce using rule 58 (T -> T_EXP OR T .)
    FUNC            reduce using rule 58 (T -> T_EXP OR T .)
    MAIN            reduce using rule 58 (T -> T_EXP OR T .)
    LBRACKET        reduce using rule 58 (T -> T_EXP OR T .)
    RPAREN          reduce using rule 58 (T -> T_EXP OR T .)
    RSBRACKET       reduce using rule 58 (T -> T_EXP OR T .)
    GREATER_OR_EQUAL reduce using rule 58 (T -> T_EXP OR T .)
    LESS_OR_EQUAL   reduce using rule 58 (T -> T_EXP OR T .)
    GREATER_THAN    reduce using rule 58 (T -> T_EXP OR T .)
    LESS_THAN       reduce using rule 58 (T -> T_EXP OR T .)
    IS_EQUAL        reduce using rule 58 (T -> T_EXP OR T .)
    NOT_EQUAL       reduce using rule 58 (T -> T_EXP OR T .)
    AND             reduce using rule 58 (T -> T_EXP OR T .)
    OR              reduce using rule 58 (T -> T_EXP OR T .)
    EQUALS          reduce using rule 58 (T -> T_EXP OR T .)
    RBRACKET        reduce using rule 58 (T -> T_EXP OR T .)


state 132

    (73) T -> PLUS TERMINO T .

    COMMA           reduce using rule 73 (T -> PLUS TERMINO T .)
    SEMICOLON       reduce using rule 73 (T -> PLUS TERMINO T .)
    DIVIDE          reduce using rule 73 (T -> PLUS TERMINO T .)
    MULTIPLY        reduce using rule 73 (T -> PLUS TERMINO T .)
    PLUS            reduce using rule 73 (T -> PLUS TERMINO T .)
    MINUS           reduce using rule 73 (T -> PLUS TERMINO T .)
    LPAREN          reduce using rule 73 (T -> PLUS TERMINO T .)
    C_INT           reduce using rule 73 (T -> PLUS TERMINO T .)
    C_FLOAT         reduce using rule 73 (T -> PLUS TERMINO T .)
    C_CHAR          reduce using rule 73 (T -> PLUS TERMINO T .)
    NAME            reduce using rule 73 (T -> PLUS TERMINO T .)
    FUNC            reduce using rule 73 (T -> PLUS TERMINO T .)
    MAIN            reduce using rule 73 (T -> PLUS TERMINO T .)
    LBRACKET        reduce using rule 73 (T -> PLUS TERMINO T .)
    RPAREN          reduce using rule 73 (T -> PLUS TERMINO T .)
    RSBRACKET       reduce using rule 73 (T -> PLUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 73 (T -> PLUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 73 (T -> PLUS TERMINO T .)
    GREATER_THAN    reduce using rule 73 (T -> PLUS TERMINO T .)
    LESS_THAN       reduce using rule 73 (T -> PLUS TERMINO T .)
    IS_EQUAL        reduce using rule 73 (T -> PLUS TERMINO T .)
    NOT_EQUAL       reduce using rule 73 (T -> PLUS TERMINO T .)
    AND             reduce using rule 73 (T -> PLUS TERMINO T .)
    OR              reduce using rule 73 (T -> PLUS TERMINO T .)
    EQUALS          reduce using rule 73 (T -> PLUS TERMINO T .)
    RBRACKET        reduce using rule 73 (T -> PLUS TERMINO T .)


state 133

    (74) T -> MINUS TERMINO T .

    COMMA           reduce using rule 74 (T -> MINUS TERMINO T .)
    SEMICOLON       reduce using rule 74 (T -> MINUS TERMINO T .)
    DIVIDE          reduce using rule 74 (T -> MINUS TERMINO T .)
    MULTIPLY        reduce using rule 74 (T -> MINUS TERMINO T .)
    PLUS            reduce using rule 74 (T -> MINUS TERMINO T .)
    MINUS           reduce using rule 74 (T -> MINUS TERMINO T .)
    LPAREN          reduce using rule 74 (T -> MINUS TERMINO T .)
    C_INT           reduce using rule 74 (T -> MINUS TERMINO T .)
    C_FLOAT         reduce using rule 74 (T -> MINUS TERMINO T .)
    C_CHAR          reduce using rule 74 (T -> MINUS TERMINO T .)
    NAME            reduce using rule 74 (T -> MINUS TERMINO T .)
    FUNC            reduce using rule 74 (T -> MINUS TERMINO T .)
    MAIN            reduce using rule 74 (T -> MINUS TERMINO T .)
    LBRACKET        reduce using rule 74 (T -> MINUS TERMINO T .)
    RPAREN          reduce using rule 74 (T -> MINUS TERMINO T .)
    RSBRACKET       reduce using rule 74 (T -> MINUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 74 (T -> MINUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 74 (T -> MINUS TERMINO T .)
    GREATER_THAN    reduce using rule 74 (T -> MINUS TERMINO T .)
    LESS_THAN       reduce using rule 74 (T -> MINUS TERMINO T .)
    IS_EQUAL        reduce using rule 74 (T -> MINUS TERMINO T .)
    NOT_EQUAL       reduce using rule 74 (T -> MINUS TERMINO T .)
    AND             reduce using rule 74 (T -> MINUS TERMINO T .)
    OR              reduce using rule 74 (T -> MINUS TERMINO T .)
    EQUALS          reduce using rule 74 (T -> MINUS TERMINO T .)
    RBRACKET        reduce using rule 74 (T -> MINUS TERMINO T .)


state 134

    (61) G -> G_EXP AND G .

    COMMA           reduce using rule 61 (G -> G_EXP AND G .)
    SEMICOLON       reduce using rule 61 (G -> G_EXP AND G .)
    DIVIDE          reduce using rule 61 (G -> G_EXP AND G .)
    MULTIPLY        reduce using rule 61 (G -> G_EXP AND G .)
    PLUS            reduce using rule 61 (G -> G_EXP AND G .)
    MINUS           reduce using rule 61 (G -> G_EXP AND G .)
    LPAREN          reduce using rule 61 (G -> G_EXP AND G .)
    C_INT           reduce using rule 61 (G -> G_EXP AND G .)
    C_FLOAT         reduce using rule 61 (G -> G_EXP AND G .)
    C_CHAR          reduce using rule 61 (G -> G_EXP AND G .)
    NAME            reduce using rule 61 (G -> G_EXP AND G .)
    FUNC            reduce using rule 61 (G -> G_EXP AND G .)
    MAIN            reduce using rule 61 (G -> G_EXP AND G .)
    LBRACKET        reduce using rule 61 (G -> G_EXP AND G .)
    RPAREN          reduce using rule 61 (G -> G_EXP AND G .)
    RSBRACKET       reduce using rule 61 (G -> G_EXP AND G .)
    GREATER_OR_EQUAL reduce using rule 61 (G -> G_EXP AND G .)
    LESS_OR_EQUAL   reduce using rule 61 (G -> G_EXP AND G .)
    GREATER_THAN    reduce using rule 61 (G -> G_EXP AND G .)
    LESS_THAN       reduce using rule 61 (G -> G_EXP AND G .)
    IS_EQUAL        reduce using rule 61 (G -> G_EXP AND G .)
    NOT_EQUAL       reduce using rule 61 (G -> G_EXP AND G .)
    AND             reduce using rule 61 (G -> G_EXP AND G .)
    OR              reduce using rule 61 (G -> G_EXP AND G .)
    EQUALS          reduce using rule 61 (G -> G_EXP AND G .)
    RBRACKET        reduce using rule 61 (G -> G_EXP AND G .)


state 135

    (63) B -> GREATER_OR_EQUAL EXP .

    COMMA           reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    PLUS            reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    MINUS           reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    LPAREN          reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    C_INT           reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    NAME            reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    FUNC            reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    MAIN            reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    RPAREN          reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    AND             reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    OR              reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    EQUALS          reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 63 (B -> GREATER_OR_EQUAL EXP .)


state 136

    (64) B -> LESS_OR_EQUAL EXP .

    COMMA           reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    PLUS            reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    MINUS           reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    LPAREN          reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    C_INT           reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    NAME            reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    FUNC            reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    MAIN            reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    RPAREN          reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    AND             reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    OR              reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    EQUALS          reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 64 (B -> LESS_OR_EQUAL EXP .)


state 137

    (65) B -> GREATER_THAN EXP .

    COMMA           reduce using rule 65 (B -> GREATER_THAN EXP .)
    SEMICOLON       reduce using rule 65 (B -> GREATER_THAN EXP .)
    DIVIDE          reduce using rule 65 (B -> GREATER_THAN EXP .)
    MULTIPLY        reduce using rule 65 (B -> GREATER_THAN EXP .)
    PLUS            reduce using rule 65 (B -> GREATER_THAN EXP .)
    MINUS           reduce using rule 65 (B -> GREATER_THAN EXP .)
    LPAREN          reduce using rule 65 (B -> GREATER_THAN EXP .)
    C_INT           reduce using rule 65 (B -> GREATER_THAN EXP .)
    C_FLOAT         reduce using rule 65 (B -> GREATER_THAN EXP .)
    C_CHAR          reduce using rule 65 (B -> GREATER_THAN EXP .)
    NAME            reduce using rule 65 (B -> GREATER_THAN EXP .)
    FUNC            reduce using rule 65 (B -> GREATER_THAN EXP .)
    MAIN            reduce using rule 65 (B -> GREATER_THAN EXP .)
    LBRACKET        reduce using rule 65 (B -> GREATER_THAN EXP .)
    RPAREN          reduce using rule 65 (B -> GREATER_THAN EXP .)
    RSBRACKET       reduce using rule 65 (B -> GREATER_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 65 (B -> GREATER_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 65 (B -> GREATER_THAN EXP .)
    GREATER_THAN    reduce using rule 65 (B -> GREATER_THAN EXP .)
    LESS_THAN       reduce using rule 65 (B -> GREATER_THAN EXP .)
    IS_EQUAL        reduce using rule 65 (B -> GREATER_THAN EXP .)
    NOT_EQUAL       reduce using rule 65 (B -> GREATER_THAN EXP .)
    AND             reduce using rule 65 (B -> GREATER_THAN EXP .)
    OR              reduce using rule 65 (B -> GREATER_THAN EXP .)
    EQUALS          reduce using rule 65 (B -> GREATER_THAN EXP .)
    RBRACKET        reduce using rule 65 (B -> GREATER_THAN EXP .)


state 138

    (66) B -> LESS_THAN EXP .

    COMMA           reduce using rule 66 (B -> LESS_THAN EXP .)
    SEMICOLON       reduce using rule 66 (B -> LESS_THAN EXP .)
    DIVIDE          reduce using rule 66 (B -> LESS_THAN EXP .)
    MULTIPLY        reduce using rule 66 (B -> LESS_THAN EXP .)
    PLUS            reduce using rule 66 (B -> LESS_THAN EXP .)
    MINUS           reduce using rule 66 (B -> LESS_THAN EXP .)
    LPAREN          reduce using rule 66 (B -> LESS_THAN EXP .)
    C_INT           reduce using rule 66 (B -> LESS_THAN EXP .)
    C_FLOAT         reduce using rule 66 (B -> LESS_THAN EXP .)
    C_CHAR          reduce using rule 66 (B -> LESS_THAN EXP .)
    NAME            reduce using rule 66 (B -> LESS_THAN EXP .)
    FUNC            reduce using rule 66 (B -> LESS_THAN EXP .)
    MAIN            reduce using rule 66 (B -> LESS_THAN EXP .)
    LBRACKET        reduce using rule 66 (B -> LESS_THAN EXP .)
    RPAREN          reduce using rule 66 (B -> LESS_THAN EXP .)
    RSBRACKET       reduce using rule 66 (B -> LESS_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 66 (B -> LESS_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 66 (B -> LESS_THAN EXP .)
    GREATER_THAN    reduce using rule 66 (B -> LESS_THAN EXP .)
    LESS_THAN       reduce using rule 66 (B -> LESS_THAN EXP .)
    IS_EQUAL        reduce using rule 66 (B -> LESS_THAN EXP .)
    NOT_EQUAL       reduce using rule 66 (B -> LESS_THAN EXP .)
    AND             reduce using rule 66 (B -> LESS_THAN EXP .)
    OR              reduce using rule 66 (B -> LESS_THAN EXP .)
    EQUALS          reduce using rule 66 (B -> LESS_THAN EXP .)
    RBRACKET        reduce using rule 66 (B -> LESS_THAN EXP .)


state 139

    (67) B -> IS_EQUAL EXP .

    COMMA           reduce using rule 67 (B -> IS_EQUAL EXP .)
    SEMICOLON       reduce using rule 67 (B -> IS_EQUAL EXP .)
    DIVIDE          reduce using rule 67 (B -> IS_EQUAL EXP .)
    MULTIPLY        reduce using rule 67 (B -> IS_EQUAL EXP .)
    PLUS            reduce using rule 67 (B -> IS_EQUAL EXP .)
    MINUS           reduce using rule 67 (B -> IS_EQUAL EXP .)
    LPAREN          reduce using rule 67 (B -> IS_EQUAL EXP .)
    C_INT           reduce using rule 67 (B -> IS_EQUAL EXP .)
    C_FLOAT         reduce using rule 67 (B -> IS_EQUAL EXP .)
    C_CHAR          reduce using rule 67 (B -> IS_EQUAL EXP .)
    NAME            reduce using rule 67 (B -> IS_EQUAL EXP .)
    FUNC            reduce using rule 67 (B -> IS_EQUAL EXP .)
    MAIN            reduce using rule 67 (B -> IS_EQUAL EXP .)
    LBRACKET        reduce using rule 67 (B -> IS_EQUAL EXP .)
    RPAREN          reduce using rule 67 (B -> IS_EQUAL EXP .)
    RSBRACKET       reduce using rule 67 (B -> IS_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 67 (B -> IS_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 67 (B -> IS_EQUAL EXP .)
    GREATER_THAN    reduce using rule 67 (B -> IS_EQUAL EXP .)
    LESS_THAN       reduce using rule 67 (B -> IS_EQUAL EXP .)
    IS_EQUAL        reduce using rule 67 (B -> IS_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 67 (B -> IS_EQUAL EXP .)
    AND             reduce using rule 67 (B -> IS_EQUAL EXP .)
    OR              reduce using rule 67 (B -> IS_EQUAL EXP .)
    EQUALS          reduce using rule 67 (B -> IS_EQUAL EXP .)
    RBRACKET        reduce using rule 67 (B -> IS_EQUAL EXP .)


state 140

    (68) B -> NOT_EQUAL EXP .

    COMMA           reduce using rule 68 (B -> NOT_EQUAL EXP .)
    SEMICOLON       reduce using rule 68 (B -> NOT_EQUAL EXP .)
    DIVIDE          reduce using rule 68 (B -> NOT_EQUAL EXP .)
    MULTIPLY        reduce using rule 68 (B -> NOT_EQUAL EXP .)
    PLUS            reduce using rule 68 (B -> NOT_EQUAL EXP .)
    MINUS           reduce using rule 68 (B -> NOT_EQUAL EXP .)
    LPAREN          reduce using rule 68 (B -> NOT_EQUAL EXP .)
    C_INT           reduce using rule 68 (B -> NOT_EQUAL EXP .)
    C_FLOAT         reduce using rule 68 (B -> NOT_EQUAL EXP .)
    C_CHAR          reduce using rule 68 (B -> NOT_EQUAL EXP .)
    NAME            reduce using rule 68 (B -> NOT_EQUAL EXP .)
    FUNC            reduce using rule 68 (B -> NOT_EQUAL EXP .)
    MAIN            reduce using rule 68 (B -> NOT_EQUAL EXP .)
    LBRACKET        reduce using rule 68 (B -> NOT_EQUAL EXP .)
    RPAREN          reduce using rule 68 (B -> NOT_EQUAL EXP .)
    RSBRACKET       reduce using rule 68 (B -> NOT_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 68 (B -> NOT_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 68 (B -> NOT_EQUAL EXP .)
    GREATER_THAN    reduce using rule 68 (B -> NOT_EQUAL EXP .)
    LESS_THAN       reduce using rule 68 (B -> NOT_EQUAL EXP .)
    IS_EQUAL        reduce using rule 68 (B -> NOT_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 68 (B -> NOT_EQUAL EXP .)
    AND             reduce using rule 68 (B -> NOT_EQUAL EXP .)
    OR              reduce using rule 68 (B -> NOT_EQUAL EXP .)
    EQUALS          reduce using rule 68 (B -> NOT_EQUAL EXP .)
    RBRACKET        reduce using rule 68 (B -> NOT_EQUAL EXP .)


state 141

    (77) F2 -> DIVIDE FACTOR F2 .

    COMMA           reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    SEMICOLON       reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    DIVIDE          reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    MULTIPLY        reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    PLUS            reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    MINUS           reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    LPAREN          reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    C_INT           reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    C_FLOAT         reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    C_CHAR          reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    NAME            reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    FUNC            reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    MAIN            reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    LBRACKET        reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    RPAREN          reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    RSBRACKET       reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_THAN    reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    LESS_THAN       reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    IS_EQUAL        reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    NOT_EQUAL       reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    AND             reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    OR              reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    EQUALS          reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)
    RBRACKET        reduce using rule 77 (F2 -> DIVIDE FACTOR F2 .)


state 142

    (78) F2 -> MULTIPLY FACTOR F2 .

    COMMA           reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    SEMICOLON       reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    DIVIDE          reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    MULTIPLY        reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    PLUS            reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    MINUS           reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    LPAREN          reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    C_INT           reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    C_FLOAT         reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    C_CHAR          reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    NAME            reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    FUNC            reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    MAIN            reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    LBRACKET        reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    RPAREN          reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    RSBRACKET       reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_THAN    reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_THAN       reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    IS_EQUAL        reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    NOT_EQUAL       reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    AND             reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    OR              reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    EQUALS          reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)
    RBRACKET        reduce using rule 78 (F2 -> MULTIPLY FACTOR F2 .)


state 143

    (15) CUERPO -> LBRACKET E RBRACKET .

    $end            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    FUNC            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    MAIN            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    ELSE            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    NAME            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    RETURN          reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    READ            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    PRINT           reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    IF              reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    WHILE           reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    FROM            reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    LPAREN          reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    C_INT           reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    C_FLOAT         reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    C_CHAR          reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    RPAREN          reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 15 (CUERPO -> LBRACKET E RBRACKET .)


state 144

    (9) FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 . CUERPO
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 160

state 145

    (10) V4 -> VARS .

    LBRACKET        reduce using rule 10 (V4 -> VARS .)


state 146

    (11) V4 -> empty .

    LBRACKET        reduce using rule 11 (V4 -> empty .)


state 147

    (12) PARAMS -> TIPO NAME P1 .

    RPAREN          reduce using rule 12 (PARAMS -> TIPO NAME P1 .)
    COMMA           reduce using rule 12 (PARAMS -> TIPO NAME P1 .)


state 148

    (13) P1 -> COMMA . PARAMS P1
    (12) PARAMS -> . TIPO NAME P1
    (20) TIPO -> . INT
    (21) TIPO -> . FLOAT
    (22) TIPO -> . CHAR

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    PARAMS                         shift and go to state 161
    TIPO                           shift and go to state 72

state 149

    (14) P1 -> empty .

    RPAREN          reduce using rule 14 (P1 -> empty .)
    COMMA           reduce using rule 14 (P1 -> empty .)


state 150

    (7) V3 -> TIPO VARIABLE V2 V3 .

    FUNC            reduce using rule 7 (V3 -> TIPO VARIABLE V2 V3 .)
    MAIN            reduce using rule 7 (V3 -> TIPO VARIABLE V2 V3 .)
    LBRACKET        reduce using rule 7 (V3 -> TIPO VARIABLE V2 V3 .)
    RPAREN          reduce using rule 7 (V3 -> TIPO VARIABLE V2 V3 .)


state 151

    (40) LLAMADA -> NAME LPAREN E1 . RPAREN SEMICOLON
    (43) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 162


state 152

    (42) E1 -> EXP COMMA E1 .

    RPAREN          reduce using rule 42 (E1 -> EXP COMMA E1 .)
    RBRACKET        reduce using rule 42 (E1 -> EXP COMMA E1 .)


state 153

    (39) ASIGNACION -> VARIABLE EQUALS EXP . SEMICOLON

    SEMICOLON       shift and go to state 163


state 154

    (44) RETORNO -> RETURN LPAREN EXP . RPAREN SEMICOLON

    RPAREN          shift and go to state 164


state 155

    (45) LECTURA -> READ LPAREN V3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 165


state 156

    (48) ESCRITURA -> PRINT LPAREN E2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 157

    (51) CONDICION -> IF LPAREN H_EXP . RPAREN THEN CUERPO ELSE1

    RPAREN          shift and go to state 167


state 158

    (54) CICLO_W -> WHILE LPAREN H_EXP . RPAREN DO CUERPO

    RPAREN          shift and go to state 168


state 159

    (55) CICLO_F -> FROM NAME EQUALS . C_INT TO C_INT DO CUERPO

    C_INT           shift and go to state 169


state 160

    (9) FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO .

    FUNC            reduce using rule 9 (FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO .)
    MAIN            reduce using rule 9 (FUNCION -> FUNC TIPO_FUNCION NAME LPAREN PARAMS RPAREN V4 CUERPO .)


state 161

    (13) P1 -> COMMA PARAMS . P1
    (13) P1 -> . COMMA PARAMS P1
    (14) P1 -> . empty
    (86) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 148
    RPAREN          reduce using rule 86 (empty -> .)

  ! COMMA           [ reduce using rule 86 (empty -> .) ]

    P1                             shift and go to state 170
    empty                          shift and go to state 149

state 162

    (40) LLAMADA -> NAME LPAREN E1 RPAREN . SEMICOLON
    (43) LLAMADAF -> NAME LPAREN E1 RPAREN .

    SEMICOLON       shift and go to state 171
    DIVIDE          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    COMMA           reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 43 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 163

    (39) ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .

    NAME            reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RETURN          reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    READ            reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    PRINT           reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    IF              reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    WHILE           reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    FROM            reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    LPAREN          reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_INT           reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_FLOAT         reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_CHAR          reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RPAREN          reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RBRACKET        reduce using rule 39 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)


state 164

    (44) RETORNO -> RETURN LPAREN EXP RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 165

    (45) LECTURA -> READ LPAREN V3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 166

    (48) ESCRITURA -> PRINT LPAREN E2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 167

    (51) CONDICION -> IF LPAREN H_EXP RPAREN . THEN CUERPO ELSE1

    THEN            shift and go to state 175


state 168

    (54) CICLO_W -> WHILE LPAREN H_EXP RPAREN . DO CUERPO

    DO              shift and go to state 176


state 169

    (55) CICLO_F -> FROM NAME EQUALS C_INT . TO C_INT DO CUERPO

    TO              shift and go to state 177


state 170

    (13) P1 -> COMMA PARAMS P1 .

    RPAREN          reduce using rule 13 (P1 -> COMMA PARAMS P1 .)
    COMMA           reduce using rule 13 (P1 -> COMMA PARAMS P1 .)


state 171

    (40) LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .

    NAME            reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    READ            reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    PRINT           reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    IF              reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    FROM            reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_INT           reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 40 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)


state 172

    (44) RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .

    NAME            reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RETURN          reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    READ            reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    PRINT           reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    IF              reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    WHILE           reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    FROM            reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    LPAREN          reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_INT           reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RPAREN          reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 44 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)


state 173

    (45) LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .

    NAME            reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    READ            reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    IF              reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    FROM            reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_INT           reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 45 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)


state 174

    (48) ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .

    NAME            reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RETURN          reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    READ            reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    PRINT           reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    IF              reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    FROM            reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_INT           reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 48 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)


state 175

    (51) CONDICION -> IF LPAREN H_EXP RPAREN THEN . CUERPO ELSE1
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 178

state 176

    (54) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO . CUERPO
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 179

state 177

    (55) CICLO_F -> FROM NAME EQUALS C_INT TO . C_INT DO CUERPO

    C_INT           shift and go to state 180


state 178

    (51) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO . ELSE1
    (52) ELSE1 -> . ELSE CUERPO
    (53) ELSE1 -> . empty
    (86) empty -> .

    ELSE            shift and go to state 182
    NAME            reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    PRINT           reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    FROM            reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    C_INT           reduce using rule 86 (empty -> .)
    C_FLOAT         reduce using rule 86 (empty -> .)
    C_CHAR          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)

    ELSE1                          shift and go to state 181
    empty                          shift and go to state 183

state 179

    (54) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .

    NAME            reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RETURN          reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    READ            reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    PRINT           reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    IF              reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    WHILE           reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    FROM            reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    LPAREN          reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_INT           reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_FLOAT         reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_CHAR          reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RPAREN          reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RBRACKET        reduce using rule 54 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)


state 180

    (55) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT . DO CUERPO

    DO              shift and go to state 184


state 181

    (51) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .

    NAME            reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RETURN          reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    READ            reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    PRINT           reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    IF              reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    WHILE           reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    FROM            reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    LPAREN          reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_INT           reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_FLOAT         reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_CHAR          reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RPAREN          reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RBRACKET        reduce using rule 51 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)


state 182

    (52) ELSE1 -> ELSE . CUERPO
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 185

state 183

    (53) ELSE1 -> empty .

    NAME            reduce using rule 53 (ELSE1 -> empty .)
    RETURN          reduce using rule 53 (ELSE1 -> empty .)
    READ            reduce using rule 53 (ELSE1 -> empty .)
    PRINT           reduce using rule 53 (ELSE1 -> empty .)
    IF              reduce using rule 53 (ELSE1 -> empty .)
    WHILE           reduce using rule 53 (ELSE1 -> empty .)
    FROM            reduce using rule 53 (ELSE1 -> empty .)
    LPAREN          reduce using rule 53 (ELSE1 -> empty .)
    C_INT           reduce using rule 53 (ELSE1 -> empty .)
    C_FLOAT         reduce using rule 53 (ELSE1 -> empty .)
    C_CHAR          reduce using rule 53 (ELSE1 -> empty .)
    RPAREN          reduce using rule 53 (ELSE1 -> empty .)
    RBRACKET        reduce using rule 53 (ELSE1 -> empty .)


state 184

    (55) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO . CUERPO
    (15) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 70

    CUERPO                         shift and go to state 186

state 185

    (52) ELSE1 -> ELSE CUERPO .

    NAME            reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    RETURN          reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    READ            reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    PRINT           reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    IF              reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    WHILE           reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    FROM            reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    LPAREN          reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    C_INT           reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    C_FLOAT         reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    C_CHAR          reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    RPAREN          reduce using rule 52 (ELSE1 -> ELSE CUERPO .)
    RBRACKET        reduce using rule 52 (ELSE1 -> ELSE CUERPO .)


state 186

    (55) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .

    NAME            reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RETURN          reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    READ            reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    PRINT           reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    IF              reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    WHILE           reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    FROM            reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    LPAREN          reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_INT           reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_FLOAT         reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_CHAR          reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RPAREN          reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RBRACKET        reduce using rule 55 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 24 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 24 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 24 resolved as shift
WARNING: shift/reduce conflict for NAME in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 30 resolved as shift
WARNING: shift/reduce conflict for NAME in state 30 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 37 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 37 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 37 resolved as shift
WARNING: shift/reduce conflict for NAME in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 38 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 54 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 54 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 54 resolved as shift
WARNING: shift/reduce conflict for NAME in state 54 resolved as shift
WARNING: shift/reduce conflict for OR in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_OR_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 76 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 76 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 76 resolved as shift
WARNING: shift/reduce conflict for NAME in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 97 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 97 resolved as shift
WARNING: shift/reduce conflict for NAME in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 98 resolved as shift
WARNING: shift/reduce conflict for NAME in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 99 resolved as shift
WARNING: shift/reduce conflict for NAME in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (E1 -> EXP)
WARNING: rejected rule (empty -> <empty>) in state 79
