Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo
Rule 2     F -> FUNCION F
Rule 3     F -> empty
Rule 4     VARS -> borrarListaVar VAR V1
Rule 5     V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
Rule 6     V2 -> COMMA VARIABLE agregarVarLista V2
Rule 7     V2 -> empty
Rule 8     V3 -> borrarListaVar V1
Rule 9     V3 -> empty
Rule 10    FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
Rule 11    V4 -> VARS
Rule 12    V4 -> empty
Rule 13    PARAMS -> TIPO NAME agregarVarLista P1
Rule 14    P1 -> P2
Rule 15    P1 -> empty
Rule 16    P2 -> COMMA PARAMS P1
Rule 17    CUERPO -> LBRACKET E RBRACKET
Rule 18    E -> E1
Rule 19    E -> empty
Rule 20    E1 -> ESTATUTO
Rule 21    E1 -> ESTATUTO E1
Rule 22    TIPO -> INT
Rule 23    TIPO -> FLOAT
Rule 24    TIPO -> CHAR
Rule 25    TIPO_FUNCION -> INT
Rule 26    TIPO_FUNCION -> FLOAT
Rule 27    TIPO_FUNCION -> CHAR
Rule 28    TIPO_FUNCION -> VOID
Rule 29    PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO
Rule 30    VARIABLE -> NAME E2
Rule 31    E2 -> LSBRACKET EXP RSBRACKET
Rule 32    E2 -> empty
Rule 33    ESTATUTO -> ASIGNACION
Rule 34    ESTATUTO -> LLAMADA
Rule 35    ESTATUTO -> RETORNO
Rule 36    ESTATUTO -> LECTURA
Rule 37    ESTATUTO -> ESCRITURA
Rule 38    ESTATUTO -> CONDICION
Rule 39    ESTATUTO -> CICLO_W
Rule 40    ESTATUTO -> CICLO_F
Rule 41    ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON
Rule 42    LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON
Rule 43    E1 -> EXP
Rule 44    E1 -> EXP COMMA E1
Rule 45    LLAMADAF -> NAME LPAREN E1 RPAREN
Rule 46    RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON
Rule 47    LECTURA -> READ LPAREN V3 RPAREN SEMICOLON
Rule 48    V3 -> VARIABLE COMMA V3
Rule 49    V3 -> VARIABLE
Rule 50    ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON
Rule 51    E2 -> S_EXP
Rule 52    E2 -> S_EXP COMMA E2
Rule 53    CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
Rule 54    ELSE1 -> ELSE CUERPO
Rule 55    ELSE1 -> empty
Rule 56    CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO
Rule 57    CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO
Rule 58    H_EXP -> T
Rule 59    T -> T_EXP
Rule 60    T -> T_EXP OR T
Rule 61    T_EXP -> G
Rule 62    G -> G_EXP
Rule 63    G -> G_EXP AND G
Rule 64    G_EXP -> EXP B
Rule 65    B -> GREATER_OR_EQUAL EXP
Rule 66    B -> LESS_OR_EQUAL EXP
Rule 67    B -> GREATER_THAN EXP
Rule 68    B -> LESS_THAN EXP
Rule 69    B -> IS_EQUAL EXP
Rule 70    B -> NOT_EQUAL EXP
Rule 71    B -> empty
Rule 72    S_EXP -> C_STRING
Rule 73    S_EXP -> EXP
Rule 74    EXP -> TERMINO T
Rule 75    T -> PLUS TERMINO T
Rule 76    T -> MINUS TERMINO T
Rule 77    T -> empty
Rule 78    TERMINO -> FACTOR F2
Rule 79    F2 -> DIVIDE FACTOR F2
Rule 80    F2 -> MULTIPLY FACTOR F2
Rule 81    F2 -> empty
Rule 82    FACTOR -> LPAREN H_EXP RPAREN
Rule 83    FACTOR -> C_INT
Rule 84    FACTOR -> C_FLOAT
Rule 85    FACTOR -> C_CHAR
Rule 86    FACTOR -> VARIABLE
Rule 87    FACTOR -> LLAMADAF
Rule 88    empty -> <empty>
Rule 89    crearFuncGlobal -> <empty>
Rule 90    crearFuncMain -> <empty>
Rule 91    agregarFunc -> <empty>
Rule 92    agregarVariables -> <empty>
Rule 93    printFunciones -> <empty>
Rule 94    printTodo -> <empty>
Rule 95    agregarVarLista -> <empty>
Rule 96    borrarListaVar -> <empty>

Terminals, with rules where they appear

AND                  : 63
CHAR                 : 24 27
COMMA                : 6 16 44 48 52
C_CHAR               : 85
C_FLOAT              : 84
C_INT                : 57 57 83
C_STRING             : 72
DIVIDE               : 79
DO                   : 56 57
ELSE                 : 54
EQUALS               : 41 57
FLOAT                : 23 26
FROM                 : 57
FUNC                 : 10
GREATER_OR_EQUAL     : 65
GREATER_THAN         : 67
IF                   : 53
INT                  : 22 25
IS_EQUAL             : 69
LBRACKET             : 17
LESS_OR_EQUAL        : 66
LESS_THAN            : 68
LPAREN               : 10 29 42 45 46 47 50 53 56 82
LSBRACKET            : 31
MAIN                 : 29
MINUS                : 76
MULTIPLY             : 80
NAME                 : 1 10 13 30 42 45 57
NOT_EQUAL            : 70
OR                   : 60
PLUS                 : 75
PRINT                : 50
PROGRAM              : 1
RBRACKET             : 17
READ                 : 47
RETURN               : 46
RPAREN               : 10 29 42 45 46 47 50 53 56 82
RSBRACKET            : 31
SEMICOLON            : 1 5 41 42 46 47 50
THEN                 : 53
TO                   : 57
VAR                  : 4
VOID                 : 28
WHILE                : 56
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 33
B                    : 64
CICLO_F              : 40
CICLO_W              : 39
CONDICION            : 38
CUERPO               : 10 29 53 54 56 57
E                    : 17
E1                   : 18 21 42 44 45
E2                   : 30 50 52
ELSE1                : 53
ESCRITURA            : 37
ESTATUTO             : 20 21
EXP                  : 31 41 43 44 46 64 65 66 67 68 69 70 73
F                    : 1 2
F2                   : 78 79 80
FACTOR               : 78 79 80
FUNCION              : 2
G                    : 61 63
G_EXP                : 62 63
H_EXP                : 53 56 82
LECTURA              : 36
LLAMADA              : 34
LLAMADAF             : 87
P1                   : 13 16
P2                   : 14
PARAMS               : 10 16
PRINCIPAL            : 1
PROGRAMA             : 0
RETORNO              : 35
S_EXP                : 51 52
T                    : 58 60 74 75 76
TERMINO              : 74 75 76
TIPO                 : 5 13
TIPO_FUNCION         : 10
T_EXP                : 59 60
V1                   : 4 8
V2                   : 5 6
V3                   : 5 47 48
V4                   : 10
VARIABLE             : 5 6 41 48 49 86
VARS                 : 1 11
agregarFunc          : 10
agregarVarLista      : 5 6 13
agregarVariables     : 5 10
borrarListaVar       : 4 8 10
crearFuncGlobal      : 1
crearFuncMain        : 29
empty                : 3 7 9 12 15 19 32 55 71 77 81
printFunciones       : 
printTodo            : 1

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo
    (89) crearFuncGlobal -> .

    PROGRAM         reduce using rule 89 (crearFuncGlobal -> .)

    PROGRAMA                       shift and go to state 1
    crearFuncGlobal                shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> crearFuncGlobal . PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo

    PROGRAM         shift and go to state 3


state 3

    (1) PROGRAMA -> crearFuncGlobal PROGRAM . NAME SEMICOLON VARS F PRINCIPAL printTodo

    NAME            shift and go to state 4


state 4

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME . SEMICOLON VARS F PRINCIPAL printTodo

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON . VARS F PRINCIPAL printTodo
    (4) VARS -> . borrarListaVar VAR V1
    (96) borrarListaVar -> .

    VAR             reduce using rule 96 (borrarListaVar -> .)

    VARS                           shift and go to state 6
    borrarListaVar                 shift and go to state 7

state 6

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS . F PRINCIPAL printTodo
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
    (88) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 88 (empty -> .)

    F                              shift and go to state 8
    FUNCION                        shift and go to state 9
    empty                          shift and go to state 10

state 7

    (4) VARS -> borrarListaVar . VAR V1

    VAR             shift and go to state 12


state 8

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F . PRINCIPAL printTodo
    (29) PRINCIPAL -> . MAIN LPAREN crearFuncMain RPAREN CUERPO

    MAIN            shift and go to state 14

    PRINCIPAL                      shift and go to state 13

state 9

    (2) F -> FUNCION . F
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
    (88) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 88 (empty -> .)

    FUNCION                        shift and go to state 9
    F                              shift and go to state 15
    empty                          shift and go to state 10

state 10

    (3) F -> empty .

    MAIN            reduce using rule 3 (F -> empty .)


state 11

    (10) FUNCION -> FUNC . TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
    (25) TIPO_FUNCION -> . INT
    (26) TIPO_FUNCION -> . FLOAT
    (27) TIPO_FUNCION -> . CHAR
    (28) TIPO_FUNCION -> . VOID

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    VOID            shift and go to state 20

    TIPO_FUNCION                   shift and go to state 16

state 12

    (4) VARS -> borrarListaVar VAR . V1
    (5) V1 -> . TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V1                             shift and go to state 21
    TIPO                           shift and go to state 22

state 13

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL . printTodo
    (94) printTodo -> .

    $end            reduce using rule 94 (printTodo -> .)

    printTodo                      shift and go to state 26

state 14

    (29) PRINCIPAL -> MAIN . LPAREN crearFuncMain RPAREN CUERPO

    LPAREN          shift and go to state 27


state 15

    (2) F -> FUNCION F .

    MAIN            reduce using rule 2 (F -> FUNCION F .)


state 16

    (10) FUNCION -> FUNC TIPO_FUNCION . NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO

    NAME            shift and go to state 28


state 17

    (25) TIPO_FUNCION -> INT .

    NAME            reduce using rule 25 (TIPO_FUNCION -> INT .)


state 18

    (26) TIPO_FUNCION -> FLOAT .

    NAME            reduce using rule 26 (TIPO_FUNCION -> FLOAT .)


state 19

    (27) TIPO_FUNCION -> CHAR .

    NAME            reduce using rule 27 (TIPO_FUNCION -> CHAR .)


state 20

    (28) TIPO_FUNCION -> VOID .

    NAME            reduce using rule 28 (TIPO_FUNCION -> VOID .)


state 21

    (4) VARS -> borrarListaVar VAR V1 .

    FUNC            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    MAIN            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    LBRACKET        reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)


state 22

    (5) V1 -> TIPO . VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (30) VARIABLE -> . NAME E2

    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 29

state 23

    (22) TIPO -> INT .

    NAME            reduce using rule 22 (TIPO -> INT .)


state 24

    (23) TIPO -> FLOAT .

    NAME            reduce using rule 23 (TIPO -> FLOAT .)


state 25

    (24) TIPO -> CHAR .

    NAME            reduce using rule 24 (TIPO -> CHAR .)


state 26

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo .

    $end            reduce using rule 1 (PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo .)


state 27

    (29) PRINCIPAL -> MAIN LPAREN . crearFuncMain RPAREN CUERPO
    (90) crearFuncMain -> .

    RPAREN          reduce using rule 90 (crearFuncMain -> .)

    crearFuncMain                  shift and go to state 31

state 28

    (10) FUNCION -> FUNC TIPO_FUNCION NAME . agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
    (91) agregarFunc -> .

    LPAREN          reduce using rule 91 (agregarFunc -> .)

    agregarFunc                    shift and go to state 32

state 29

    (5) V1 -> TIPO VARIABLE . agregarVarLista V2 SEMICOLON agregarVariables V3
    (95) agregarVarLista -> .

    COMMA           reduce using rule 95 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 95 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 33

state 30

    (30) VARIABLE -> NAME . E2
    (31) E2 -> . LSBRACKET EXP RSBRACKET
    (32) E2 -> . empty
    (51) E2 -> . S_EXP
    (52) E2 -> . S_EXP COMMA E2
    (88) empty -> .
    (72) S_EXP -> . C_STRING
    (73) S_EXP -> . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 31

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain . RPAREN CUERPO

    RPAREN          shift and go to state 49


state 32

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc . LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO

    LPAREN          shift and go to state 50


state 33

    (5) V1 -> TIPO VARIABLE agregarVarLista . V2 SEMICOLON agregarVariables V3
    (6) V2 -> . COMMA VARIABLE agregarVarLista V2
    (7) V2 -> . empty
    (88) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 88 (empty -> .)

    V2                             shift and go to state 51
    empty                          shift and go to state 53

state 34

    (30) VARIABLE -> NAME . E2
    (45) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (31) E2 -> . LSBRACKET EXP RSBRACKET
    (32) E2 -> . empty
    (51) E2 -> . S_EXP
    (52) E2 -> . S_EXP COMMA E2
    (88) empty -> .
    (72) S_EXP -> . C_STRING
    (73) S_EXP -> . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 54
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    C_STRING        shift and go to state 40
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 35

    (30) VARIABLE -> NAME E2 .

    COMMA           reduce using rule 30 (VARIABLE -> NAME E2 .)
    SEMICOLON       reduce using rule 30 (VARIABLE -> NAME E2 .)
    DIVIDE          reduce using rule 30 (VARIABLE -> NAME E2 .)
    MULTIPLY        reduce using rule 30 (VARIABLE -> NAME E2 .)
    PLUS            reduce using rule 30 (VARIABLE -> NAME E2 .)
    MINUS           reduce using rule 30 (VARIABLE -> NAME E2 .)
    LPAREN          reduce using rule 30 (VARIABLE -> NAME E2 .)
    C_INT           reduce using rule 30 (VARIABLE -> NAME E2 .)
    C_FLOAT         reduce using rule 30 (VARIABLE -> NAME E2 .)
    C_CHAR          reduce using rule 30 (VARIABLE -> NAME E2 .)
    NAME            reduce using rule 30 (VARIABLE -> NAME E2 .)
    FUNC            reduce using rule 30 (VARIABLE -> NAME E2 .)
    MAIN            reduce using rule 30 (VARIABLE -> NAME E2 .)
    LBRACKET        reduce using rule 30 (VARIABLE -> NAME E2 .)
    RPAREN          reduce using rule 30 (VARIABLE -> NAME E2 .)
    RSBRACKET       reduce using rule 30 (VARIABLE -> NAME E2 .)
    GREATER_OR_EQUAL reduce using rule 30 (VARIABLE -> NAME E2 .)
    LESS_OR_EQUAL   reduce using rule 30 (VARIABLE -> NAME E2 .)
    GREATER_THAN    reduce using rule 30 (VARIABLE -> NAME E2 .)
    LESS_THAN       reduce using rule 30 (VARIABLE -> NAME E2 .)
    IS_EQUAL        reduce using rule 30 (VARIABLE -> NAME E2 .)
    NOT_EQUAL       reduce using rule 30 (VARIABLE -> NAME E2 .)
    AND             reduce using rule 30 (VARIABLE -> NAME E2 .)
    OR              reduce using rule 30 (VARIABLE -> NAME E2 .)
    EQUALS          reduce using rule 30 (VARIABLE -> NAME E2 .)
    RBRACKET        reduce using rule 30 (VARIABLE -> NAME E2 .)


state 36

    (31) E2 -> LSBRACKET . EXP RSBRACKET
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 55
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 37

    (73) S_EXP -> EXP .

    COMMA           reduce using rule 73 (S_EXP -> EXP .)
    SEMICOLON       reduce using rule 73 (S_EXP -> EXP .)
    DIVIDE          reduce using rule 73 (S_EXP -> EXP .)
    MULTIPLY        reduce using rule 73 (S_EXP -> EXP .)
    PLUS            reduce using rule 73 (S_EXP -> EXP .)
    MINUS           reduce using rule 73 (S_EXP -> EXP .)
    LPAREN          reduce using rule 73 (S_EXP -> EXP .)
    C_INT           reduce using rule 73 (S_EXP -> EXP .)
    C_FLOAT         reduce using rule 73 (S_EXP -> EXP .)
    C_CHAR          reduce using rule 73 (S_EXP -> EXP .)
    NAME            reduce using rule 73 (S_EXP -> EXP .)
    FUNC            reduce using rule 73 (S_EXP -> EXP .)
    MAIN            reduce using rule 73 (S_EXP -> EXP .)
    LBRACKET        reduce using rule 73 (S_EXP -> EXP .)
    RPAREN          reduce using rule 73 (S_EXP -> EXP .)
    RSBRACKET       reduce using rule 73 (S_EXP -> EXP .)
    GREATER_OR_EQUAL reduce using rule 73 (S_EXP -> EXP .)
    LESS_OR_EQUAL   reduce using rule 73 (S_EXP -> EXP .)
    GREATER_THAN    reduce using rule 73 (S_EXP -> EXP .)
    LESS_THAN       reduce using rule 73 (S_EXP -> EXP .)
    IS_EQUAL        reduce using rule 73 (S_EXP -> EXP .)
    NOT_EQUAL       reduce using rule 73 (S_EXP -> EXP .)
    AND             reduce using rule 73 (S_EXP -> EXP .)
    OR              reduce using rule 73 (S_EXP -> EXP .)
    EQUALS          reduce using rule 73 (S_EXP -> EXP .)
    RBRACKET        reduce using rule 73 (S_EXP -> EXP .)


state 38

    (32) E2 -> empty .

    COMMA           reduce using rule 32 (E2 -> empty .)
    SEMICOLON       reduce using rule 32 (E2 -> empty .)
    DIVIDE          reduce using rule 32 (E2 -> empty .)
    MULTIPLY        reduce using rule 32 (E2 -> empty .)
    PLUS            reduce using rule 32 (E2 -> empty .)
    MINUS           reduce using rule 32 (E2 -> empty .)
    LPAREN          reduce using rule 32 (E2 -> empty .)
    C_INT           reduce using rule 32 (E2 -> empty .)
    C_FLOAT         reduce using rule 32 (E2 -> empty .)
    C_CHAR          reduce using rule 32 (E2 -> empty .)
    NAME            reduce using rule 32 (E2 -> empty .)
    FUNC            reduce using rule 32 (E2 -> empty .)
    MAIN            reduce using rule 32 (E2 -> empty .)
    LBRACKET        reduce using rule 32 (E2 -> empty .)
    RPAREN          reduce using rule 32 (E2 -> empty .)
    RSBRACKET       reduce using rule 32 (E2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 32 (E2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 32 (E2 -> empty .)
    GREATER_THAN    reduce using rule 32 (E2 -> empty .)
    LESS_THAN       reduce using rule 32 (E2 -> empty .)
    IS_EQUAL        reduce using rule 32 (E2 -> empty .)
    NOT_EQUAL       reduce using rule 32 (E2 -> empty .)
    AND             reduce using rule 32 (E2 -> empty .)
    OR              reduce using rule 32 (E2 -> empty .)
    EQUALS          reduce using rule 32 (E2 -> empty .)
    RBRACKET        reduce using rule 32 (E2 -> empty .)


state 39

    (51) E2 -> S_EXP .
    (52) E2 -> S_EXP . COMMA E2

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 51 (E2 -> S_EXP .)
    DIVIDE          reduce using rule 51 (E2 -> S_EXP .)
    MULTIPLY        reduce using rule 51 (E2 -> S_EXP .)
    PLUS            reduce using rule 51 (E2 -> S_EXP .)
    MINUS           reduce using rule 51 (E2 -> S_EXP .)
    LPAREN          reduce using rule 51 (E2 -> S_EXP .)
    C_INT           reduce using rule 51 (E2 -> S_EXP .)
    C_FLOAT         reduce using rule 51 (E2 -> S_EXP .)
    C_CHAR          reduce using rule 51 (E2 -> S_EXP .)
    NAME            reduce using rule 51 (E2 -> S_EXP .)
    FUNC            reduce using rule 51 (E2 -> S_EXP .)
    MAIN            reduce using rule 51 (E2 -> S_EXP .)
    LBRACKET        reduce using rule 51 (E2 -> S_EXP .)
    RPAREN          reduce using rule 51 (E2 -> S_EXP .)
    RSBRACKET       reduce using rule 51 (E2 -> S_EXP .)
    GREATER_OR_EQUAL reduce using rule 51 (E2 -> S_EXP .)
    LESS_OR_EQUAL   reduce using rule 51 (E2 -> S_EXP .)
    GREATER_THAN    reduce using rule 51 (E2 -> S_EXP .)
    LESS_THAN       reduce using rule 51 (E2 -> S_EXP .)
    IS_EQUAL        reduce using rule 51 (E2 -> S_EXP .)
    NOT_EQUAL       reduce using rule 51 (E2 -> S_EXP .)
    AND             reduce using rule 51 (E2 -> S_EXP .)
    OR              reduce using rule 51 (E2 -> S_EXP .)
    EQUALS          reduce using rule 51 (E2 -> S_EXP .)
    RBRACKET        reduce using rule 51 (E2 -> S_EXP .)
    COMMA           shift and go to state 56

  ! COMMA           [ reduce using rule 51 (E2 -> S_EXP .) ]


state 40

    (72) S_EXP -> C_STRING .

    COMMA           reduce using rule 72 (S_EXP -> C_STRING .)
    SEMICOLON       reduce using rule 72 (S_EXP -> C_STRING .)
    DIVIDE          reduce using rule 72 (S_EXP -> C_STRING .)
    MULTIPLY        reduce using rule 72 (S_EXP -> C_STRING .)
    PLUS            reduce using rule 72 (S_EXP -> C_STRING .)
    MINUS           reduce using rule 72 (S_EXP -> C_STRING .)
    LPAREN          reduce using rule 72 (S_EXP -> C_STRING .)
    C_INT           reduce using rule 72 (S_EXP -> C_STRING .)
    C_FLOAT         reduce using rule 72 (S_EXP -> C_STRING .)
    C_CHAR          reduce using rule 72 (S_EXP -> C_STRING .)
    NAME            reduce using rule 72 (S_EXP -> C_STRING .)
    FUNC            reduce using rule 72 (S_EXP -> C_STRING .)
    MAIN            reduce using rule 72 (S_EXP -> C_STRING .)
    LBRACKET        reduce using rule 72 (S_EXP -> C_STRING .)
    RPAREN          reduce using rule 72 (S_EXP -> C_STRING .)
    RSBRACKET       reduce using rule 72 (S_EXP -> C_STRING .)
    GREATER_OR_EQUAL reduce using rule 72 (S_EXP -> C_STRING .)
    LESS_OR_EQUAL   reduce using rule 72 (S_EXP -> C_STRING .)
    GREATER_THAN    reduce using rule 72 (S_EXP -> C_STRING .)
    LESS_THAN       reduce using rule 72 (S_EXP -> C_STRING .)
    IS_EQUAL        reduce using rule 72 (S_EXP -> C_STRING .)
    NOT_EQUAL       reduce using rule 72 (S_EXP -> C_STRING .)
    AND             reduce using rule 72 (S_EXP -> C_STRING .)
    OR              reduce using rule 72 (S_EXP -> C_STRING .)
    EQUALS          reduce using rule 72 (S_EXP -> C_STRING .)
    RBRACKET        reduce using rule 72 (S_EXP -> C_STRING .)


state 41

    (74) EXP -> TERMINO . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 88 (empty -> .) ]
  ! MINUS           [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 57
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 42

    (78) TERMINO -> FACTOR . F2
    (79) F2 -> . DIVIDE FACTOR F2
    (80) F2 -> . MULTIPLY FACTOR F2
    (81) F2 -> . empty
    (88) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LPAREN          reduce using rule 88 (empty -> .)
    C_INT           reduce using rule 88 (empty -> .)
    C_FLOAT         reduce using rule 88 (empty -> .)
    C_CHAR          reduce using rule 88 (empty -> .)
    NAME            reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)

  ! DIVIDE          [ reduce using rule 88 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 88 (empty -> .) ]

    F2                             shift and go to state 65
    empty                          shift and go to state 68

state 43

    (82) FACTOR -> LPAREN . H_EXP RPAREN
    (58) H_EXP -> . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 69
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 44

    (83) FACTOR -> C_INT .

    COMMA           reduce using rule 83 (FACTOR -> C_INT .)
    SEMICOLON       reduce using rule 83 (FACTOR -> C_INT .)
    DIVIDE          reduce using rule 83 (FACTOR -> C_INT .)
    MULTIPLY        reduce using rule 83 (FACTOR -> C_INT .)
    PLUS            reduce using rule 83 (FACTOR -> C_INT .)
    MINUS           reduce using rule 83 (FACTOR -> C_INT .)
    LPAREN          reduce using rule 83 (FACTOR -> C_INT .)
    C_INT           reduce using rule 83 (FACTOR -> C_INT .)
    C_FLOAT         reduce using rule 83 (FACTOR -> C_INT .)
    C_CHAR          reduce using rule 83 (FACTOR -> C_INT .)
    NAME            reduce using rule 83 (FACTOR -> C_INT .)
    FUNC            reduce using rule 83 (FACTOR -> C_INT .)
    MAIN            reduce using rule 83 (FACTOR -> C_INT .)
    LBRACKET        reduce using rule 83 (FACTOR -> C_INT .)
    RPAREN          reduce using rule 83 (FACTOR -> C_INT .)
    RSBRACKET       reduce using rule 83 (FACTOR -> C_INT .)
    GREATER_OR_EQUAL reduce using rule 83 (FACTOR -> C_INT .)
    LESS_OR_EQUAL   reduce using rule 83 (FACTOR -> C_INT .)
    GREATER_THAN    reduce using rule 83 (FACTOR -> C_INT .)
    LESS_THAN       reduce using rule 83 (FACTOR -> C_INT .)
    IS_EQUAL        reduce using rule 83 (FACTOR -> C_INT .)
    NOT_EQUAL       reduce using rule 83 (FACTOR -> C_INT .)
    AND             reduce using rule 83 (FACTOR -> C_INT .)
    OR              reduce using rule 83 (FACTOR -> C_INT .)
    EQUALS          reduce using rule 83 (FACTOR -> C_INT .)
    RBRACKET        reduce using rule 83 (FACTOR -> C_INT .)


state 45

    (84) FACTOR -> C_FLOAT .

    COMMA           reduce using rule 84 (FACTOR -> C_FLOAT .)
    SEMICOLON       reduce using rule 84 (FACTOR -> C_FLOAT .)
    DIVIDE          reduce using rule 84 (FACTOR -> C_FLOAT .)
    MULTIPLY        reduce using rule 84 (FACTOR -> C_FLOAT .)
    PLUS            reduce using rule 84 (FACTOR -> C_FLOAT .)
    MINUS           reduce using rule 84 (FACTOR -> C_FLOAT .)
    LPAREN          reduce using rule 84 (FACTOR -> C_FLOAT .)
    C_INT           reduce using rule 84 (FACTOR -> C_FLOAT .)
    C_FLOAT         reduce using rule 84 (FACTOR -> C_FLOAT .)
    C_CHAR          reduce using rule 84 (FACTOR -> C_FLOAT .)
    NAME            reduce using rule 84 (FACTOR -> C_FLOAT .)
    FUNC            reduce using rule 84 (FACTOR -> C_FLOAT .)
    MAIN            reduce using rule 84 (FACTOR -> C_FLOAT .)
    LBRACKET        reduce using rule 84 (FACTOR -> C_FLOAT .)
    RPAREN          reduce using rule 84 (FACTOR -> C_FLOAT .)
    RSBRACKET       reduce using rule 84 (FACTOR -> C_FLOAT .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> C_FLOAT .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> C_FLOAT .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> C_FLOAT .)
    LESS_THAN       reduce using rule 84 (FACTOR -> C_FLOAT .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> C_FLOAT .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> C_FLOAT .)
    AND             reduce using rule 84 (FACTOR -> C_FLOAT .)
    OR              reduce using rule 84 (FACTOR -> C_FLOAT .)
    EQUALS          reduce using rule 84 (FACTOR -> C_FLOAT .)
    RBRACKET        reduce using rule 84 (FACTOR -> C_FLOAT .)


state 46

    (85) FACTOR -> C_CHAR .

    COMMA           reduce using rule 85 (FACTOR -> C_CHAR .)
    SEMICOLON       reduce using rule 85 (FACTOR -> C_CHAR .)
    DIVIDE          reduce using rule 85 (FACTOR -> C_CHAR .)
    MULTIPLY        reduce using rule 85 (FACTOR -> C_CHAR .)
    PLUS            reduce using rule 85 (FACTOR -> C_CHAR .)
    MINUS           reduce using rule 85 (FACTOR -> C_CHAR .)
    LPAREN          reduce using rule 85 (FACTOR -> C_CHAR .)
    C_INT           reduce using rule 85 (FACTOR -> C_CHAR .)
    C_FLOAT         reduce using rule 85 (FACTOR -> C_CHAR .)
    C_CHAR          reduce using rule 85 (FACTOR -> C_CHAR .)
    NAME            reduce using rule 85 (FACTOR -> C_CHAR .)
    FUNC            reduce using rule 85 (FACTOR -> C_CHAR .)
    MAIN            reduce using rule 85 (FACTOR -> C_CHAR .)
    LBRACKET        reduce using rule 85 (FACTOR -> C_CHAR .)
    RPAREN          reduce using rule 85 (FACTOR -> C_CHAR .)
    RSBRACKET       reduce using rule 85 (FACTOR -> C_CHAR .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> C_CHAR .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> C_CHAR .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> C_CHAR .)
    LESS_THAN       reduce using rule 85 (FACTOR -> C_CHAR .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> C_CHAR .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> C_CHAR .)
    AND             reduce using rule 85 (FACTOR -> C_CHAR .)
    OR              reduce using rule 85 (FACTOR -> C_CHAR .)
    EQUALS          reduce using rule 85 (FACTOR -> C_CHAR .)
    RBRACKET        reduce using rule 85 (FACTOR -> C_CHAR .)


state 47

    (86) FACTOR -> VARIABLE .

    COMMA           reduce using rule 86 (FACTOR -> VARIABLE .)
    SEMICOLON       reduce using rule 86 (FACTOR -> VARIABLE .)
    DIVIDE          reduce using rule 86 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 86 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 86 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 86 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 86 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 86 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 86 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 86 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 86 (FACTOR -> VARIABLE .)
    FUNC            reduce using rule 86 (FACTOR -> VARIABLE .)
    MAIN            reduce using rule 86 (FACTOR -> VARIABLE .)
    LBRACKET        reduce using rule 86 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 86 (FACTOR -> VARIABLE .)
    RSBRACKET       reduce using rule 86 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 86 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 86 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 86 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 86 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 86 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 86 (FACTOR -> VARIABLE .)
    AND             reduce using rule 86 (FACTOR -> VARIABLE .)
    OR              reduce using rule 86 (FACTOR -> VARIABLE .)
    EQUALS          reduce using rule 86 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 86 (FACTOR -> VARIABLE .)


state 48

    (87) FACTOR -> LLAMADAF .

    COMMA           reduce using rule 87 (FACTOR -> LLAMADAF .)
    SEMICOLON       reduce using rule 87 (FACTOR -> LLAMADAF .)
    DIVIDE          reduce using rule 87 (FACTOR -> LLAMADAF .)
    MULTIPLY        reduce using rule 87 (FACTOR -> LLAMADAF .)
    PLUS            reduce using rule 87 (FACTOR -> LLAMADAF .)
    MINUS           reduce using rule 87 (FACTOR -> LLAMADAF .)
    LPAREN          reduce using rule 87 (FACTOR -> LLAMADAF .)
    C_INT           reduce using rule 87 (FACTOR -> LLAMADAF .)
    C_FLOAT         reduce using rule 87 (FACTOR -> LLAMADAF .)
    C_CHAR          reduce using rule 87 (FACTOR -> LLAMADAF .)
    NAME            reduce using rule 87 (FACTOR -> LLAMADAF .)
    FUNC            reduce using rule 87 (FACTOR -> LLAMADAF .)
    MAIN            reduce using rule 87 (FACTOR -> LLAMADAF .)
    LBRACKET        reduce using rule 87 (FACTOR -> LLAMADAF .)
    RPAREN          reduce using rule 87 (FACTOR -> LLAMADAF .)
    RSBRACKET       reduce using rule 87 (FACTOR -> LLAMADAF .)
    GREATER_OR_EQUAL reduce using rule 87 (FACTOR -> LLAMADAF .)
    LESS_OR_EQUAL   reduce using rule 87 (FACTOR -> LLAMADAF .)
    GREATER_THAN    reduce using rule 87 (FACTOR -> LLAMADAF .)
    LESS_THAN       reduce using rule 87 (FACTOR -> LLAMADAF .)
    IS_EQUAL        reduce using rule 87 (FACTOR -> LLAMADAF .)
    NOT_EQUAL       reduce using rule 87 (FACTOR -> LLAMADAF .)
    AND             reduce using rule 87 (FACTOR -> LLAMADAF .)
    OR              reduce using rule 87 (FACTOR -> LLAMADAF .)
    EQUALS          reduce using rule 87 (FACTOR -> LLAMADAF .)
    RBRACKET        reduce using rule 87 (FACTOR -> LLAMADAF .)


state 49

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 71

state 50

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN . borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO
    (96) borrarListaVar -> .

    INT             reduce using rule 96 (borrarListaVar -> .)
    FLOAT           reduce using rule 96 (borrarListaVar -> .)
    CHAR            reduce using rule 96 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 73

state 51

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 . SEMICOLON agregarVariables V3

    SEMICOLON       shift and go to state 74


state 52

    (6) V2 -> COMMA . VARIABLE agregarVarLista V2
    (30) VARIABLE -> . NAME E2

    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 75

state 53

    (7) V2 -> empty .

    SEMICOLON       reduce using rule 7 (V2 -> empty .)


state 54

    (45) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (82) FACTOR -> LPAREN . H_EXP RPAREN
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (43) E1 -> . EXP
    (44) E1 -> . EXP COMMA E1
    (58) H_EXP -> . T
    (33) ESTATUTO -> . ASIGNACION
    (34) ESTATUTO -> . LLAMADA
    (35) ESTATUTO -> . RETORNO
    (36) ESTATUTO -> . LECTURA
    (37) ESTATUTO -> . ESCRITURA
    (38) ESTATUTO -> . CONDICION
    (39) ESTATUTO -> . CICLO_W
    (40) ESTATUTO -> . CICLO_F
    (74) EXP -> . TERMINO T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (41) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (42) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (46) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (47) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (50) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (53) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (56) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (57) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (78) TERMINO -> . FACTOR F2
    (61) T_EXP -> . G
    (88) empty -> .
    (30) VARIABLE -> . NAME E2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (64) G_EXP -> . EXP B

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    RPAREN          reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E1                             shift and go to state 77
    H_EXP                          shift and go to state 69
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 79
    T                              shift and go to state 70
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 41
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 42
    G                              shift and go to state 62
    LLAMADAF                       shift and go to state 48
    G_EXP                          shift and go to state 63

state 55

    (31) E2 -> LSBRACKET EXP . RSBRACKET

    RSBRACKET       shift and go to state 95


state 56

    (52) E2 -> S_EXP COMMA . E2
    (31) E2 -> . LSBRACKET EXP RSBRACKET
    (32) E2 -> . empty
    (51) E2 -> . S_EXP
    (52) E2 -> . S_EXP COMMA E2
    (88) empty -> .
    (72) S_EXP -> . C_STRING
    (73) S_EXP -> . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    S_EXP                          shift and go to state 39
    E2                             shift and go to state 96
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 57

    (74) EXP -> TERMINO T .

    COMMA           reduce using rule 74 (EXP -> TERMINO T .)
    SEMICOLON       reduce using rule 74 (EXP -> TERMINO T .)
    DIVIDE          reduce using rule 74 (EXP -> TERMINO T .)
    MULTIPLY        reduce using rule 74 (EXP -> TERMINO T .)
    PLUS            reduce using rule 74 (EXP -> TERMINO T .)
    MINUS           reduce using rule 74 (EXP -> TERMINO T .)
    LPAREN          reduce using rule 74 (EXP -> TERMINO T .)
    C_INT           reduce using rule 74 (EXP -> TERMINO T .)
    C_FLOAT         reduce using rule 74 (EXP -> TERMINO T .)
    C_CHAR          reduce using rule 74 (EXP -> TERMINO T .)
    NAME            reduce using rule 74 (EXP -> TERMINO T .)
    FUNC            reduce using rule 74 (EXP -> TERMINO T .)
    MAIN            reduce using rule 74 (EXP -> TERMINO T .)
    LBRACKET        reduce using rule 74 (EXP -> TERMINO T .)
    RPAREN          reduce using rule 74 (EXP -> TERMINO T .)
    RSBRACKET       reduce using rule 74 (EXP -> TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 74 (EXP -> TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 74 (EXP -> TERMINO T .)
    GREATER_THAN    reduce using rule 74 (EXP -> TERMINO T .)
    LESS_THAN       reduce using rule 74 (EXP -> TERMINO T .)
    IS_EQUAL        reduce using rule 74 (EXP -> TERMINO T .)
    NOT_EQUAL       reduce using rule 74 (EXP -> TERMINO T .)
    AND             reduce using rule 74 (EXP -> TERMINO T .)
    OR              reduce using rule 74 (EXP -> TERMINO T .)
    EQUALS          reduce using rule 74 (EXP -> TERMINO T .)
    RBRACKET        reduce using rule 74 (EXP -> TERMINO T .)


state 58

    (59) T -> T_EXP .
    (60) T -> T_EXP . OR T

  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 59 (T -> T_EXP .)
    SEMICOLON       reduce using rule 59 (T -> T_EXP .)
    DIVIDE          reduce using rule 59 (T -> T_EXP .)
    MULTIPLY        reduce using rule 59 (T -> T_EXP .)
    PLUS            reduce using rule 59 (T -> T_EXP .)
    MINUS           reduce using rule 59 (T -> T_EXP .)
    LPAREN          reduce using rule 59 (T -> T_EXP .)
    C_INT           reduce using rule 59 (T -> T_EXP .)
    C_FLOAT         reduce using rule 59 (T -> T_EXP .)
    C_CHAR          reduce using rule 59 (T -> T_EXP .)
    NAME            reduce using rule 59 (T -> T_EXP .)
    FUNC            reduce using rule 59 (T -> T_EXP .)
    MAIN            reduce using rule 59 (T -> T_EXP .)
    LBRACKET        reduce using rule 59 (T -> T_EXP .)
    RPAREN          reduce using rule 59 (T -> T_EXP .)
    RSBRACKET       reduce using rule 59 (T -> T_EXP .)
    GREATER_OR_EQUAL reduce using rule 59 (T -> T_EXP .)
    LESS_OR_EQUAL   reduce using rule 59 (T -> T_EXP .)
    GREATER_THAN    reduce using rule 59 (T -> T_EXP .)
    LESS_THAN       reduce using rule 59 (T -> T_EXP .)
    IS_EQUAL        reduce using rule 59 (T -> T_EXP .)
    NOT_EQUAL       reduce using rule 59 (T -> T_EXP .)
    AND             reduce using rule 59 (T -> T_EXP .)
    EQUALS          reduce using rule 59 (T -> T_EXP .)
    RBRACKET        reduce using rule 59 (T -> T_EXP .)
    OR              shift and go to state 97

  ! OR              [ reduce using rule 59 (T -> T_EXP .) ]


state 59

    (75) T -> PLUS . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    TERMINO                        shift and go to state 98
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 60

    (76) T -> MINUS . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    TERMINO                        shift and go to state 99
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 61

    (77) T -> empty .

    COMMA           reduce using rule 77 (T -> empty .)
    SEMICOLON       reduce using rule 77 (T -> empty .)
    DIVIDE          reduce using rule 77 (T -> empty .)
    MULTIPLY        reduce using rule 77 (T -> empty .)
    PLUS            reduce using rule 77 (T -> empty .)
    MINUS           reduce using rule 77 (T -> empty .)
    LPAREN          reduce using rule 77 (T -> empty .)
    C_INT           reduce using rule 77 (T -> empty .)
    C_FLOAT         reduce using rule 77 (T -> empty .)
    C_CHAR          reduce using rule 77 (T -> empty .)
    NAME            reduce using rule 77 (T -> empty .)
    FUNC            reduce using rule 77 (T -> empty .)
    MAIN            reduce using rule 77 (T -> empty .)
    LBRACKET        reduce using rule 77 (T -> empty .)
    RPAREN          reduce using rule 77 (T -> empty .)
    RSBRACKET       reduce using rule 77 (T -> empty .)
    GREATER_OR_EQUAL reduce using rule 77 (T -> empty .)
    LESS_OR_EQUAL   reduce using rule 77 (T -> empty .)
    GREATER_THAN    reduce using rule 77 (T -> empty .)
    LESS_THAN       reduce using rule 77 (T -> empty .)
    IS_EQUAL        reduce using rule 77 (T -> empty .)
    NOT_EQUAL       reduce using rule 77 (T -> empty .)
    AND             reduce using rule 77 (T -> empty .)
    OR              reduce using rule 77 (T -> empty .)
    EQUALS          reduce using rule 77 (T -> empty .)
    RBRACKET        reduce using rule 77 (T -> empty .)


state 62

    (61) T_EXP -> G .

    COMMA           reduce using rule 61 (T_EXP -> G .)
    SEMICOLON       reduce using rule 61 (T_EXP -> G .)
    DIVIDE          reduce using rule 61 (T_EXP -> G .)
    MULTIPLY        reduce using rule 61 (T_EXP -> G .)
    PLUS            reduce using rule 61 (T_EXP -> G .)
    MINUS           reduce using rule 61 (T_EXP -> G .)
    LPAREN          reduce using rule 61 (T_EXP -> G .)
    C_INT           reduce using rule 61 (T_EXP -> G .)
    C_FLOAT         reduce using rule 61 (T_EXP -> G .)
    C_CHAR          reduce using rule 61 (T_EXP -> G .)
    NAME            reduce using rule 61 (T_EXP -> G .)
    FUNC            reduce using rule 61 (T_EXP -> G .)
    MAIN            reduce using rule 61 (T_EXP -> G .)
    LBRACKET        reduce using rule 61 (T_EXP -> G .)
    RPAREN          reduce using rule 61 (T_EXP -> G .)
    RSBRACKET       reduce using rule 61 (T_EXP -> G .)
    GREATER_OR_EQUAL reduce using rule 61 (T_EXP -> G .)
    LESS_OR_EQUAL   reduce using rule 61 (T_EXP -> G .)
    GREATER_THAN    reduce using rule 61 (T_EXP -> G .)
    LESS_THAN       reduce using rule 61 (T_EXP -> G .)
    IS_EQUAL        reduce using rule 61 (T_EXP -> G .)
    NOT_EQUAL       reduce using rule 61 (T_EXP -> G .)
    AND             reduce using rule 61 (T_EXP -> G .)
    OR              reduce using rule 61 (T_EXP -> G .)
    EQUALS          reduce using rule 61 (T_EXP -> G .)
    RBRACKET        reduce using rule 61 (T_EXP -> G .)


state 63

    (62) G -> G_EXP .
    (63) G -> G_EXP . AND G

  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 62 (G -> G_EXP .)
    SEMICOLON       reduce using rule 62 (G -> G_EXP .)
    DIVIDE          reduce using rule 62 (G -> G_EXP .)
    MULTIPLY        reduce using rule 62 (G -> G_EXP .)
    PLUS            reduce using rule 62 (G -> G_EXP .)
    MINUS           reduce using rule 62 (G -> G_EXP .)
    LPAREN          reduce using rule 62 (G -> G_EXP .)
    C_INT           reduce using rule 62 (G -> G_EXP .)
    C_FLOAT         reduce using rule 62 (G -> G_EXP .)
    C_CHAR          reduce using rule 62 (G -> G_EXP .)
    NAME            reduce using rule 62 (G -> G_EXP .)
    FUNC            reduce using rule 62 (G -> G_EXP .)
    MAIN            reduce using rule 62 (G -> G_EXP .)
    LBRACKET        reduce using rule 62 (G -> G_EXP .)
    RPAREN          reduce using rule 62 (G -> G_EXP .)
    RSBRACKET       reduce using rule 62 (G -> G_EXP .)
    GREATER_OR_EQUAL reduce using rule 62 (G -> G_EXP .)
    LESS_OR_EQUAL   reduce using rule 62 (G -> G_EXP .)
    GREATER_THAN    reduce using rule 62 (G -> G_EXP .)
    LESS_THAN       reduce using rule 62 (G -> G_EXP .)
    IS_EQUAL        reduce using rule 62 (G -> G_EXP .)
    NOT_EQUAL       reduce using rule 62 (G -> G_EXP .)
    OR              reduce using rule 62 (G -> G_EXP .)
    EQUALS          reduce using rule 62 (G -> G_EXP .)
    RBRACKET        reduce using rule 62 (G -> G_EXP .)
    AND             shift and go to state 100

  ! AND             [ reduce using rule 62 (G -> G_EXP .) ]


state 64

    (64) G_EXP -> EXP . B
    (65) B -> . GREATER_OR_EQUAL EXP
    (66) B -> . LESS_OR_EQUAL EXP
    (67) B -> . GREATER_THAN EXP
    (68) B -> . LESS_THAN EXP
    (69) B -> . IS_EQUAL EXP
    (70) B -> . NOT_EQUAL EXP
    (71) B -> . empty
    (88) empty -> .

  ! shift/reduce conflict for GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    GREATER_OR_EQUAL shift and go to state 102
    LESS_OR_EQUAL   shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    IS_EQUAL        shift and go to state 106
    NOT_EQUAL       shift and go to state 107
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LPAREN          reduce using rule 88 (empty -> .)
    C_INT           reduce using rule 88 (empty -> .)
    C_FLOAT         reduce using rule 88 (empty -> .)
    C_CHAR          reduce using rule 88 (empty -> .)
    NAME            reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)

  ! GREATER_OR_EQUAL [ reduce using rule 88 (empty -> .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 88 (empty -> .) ]
  ! GREATER_THAN    [ reduce using rule 88 (empty -> .) ]
  ! LESS_THAN       [ reduce using rule 88 (empty -> .) ]
  ! IS_EQUAL        [ reduce using rule 88 (empty -> .) ]
  ! NOT_EQUAL       [ reduce using rule 88 (empty -> .) ]

    B                              shift and go to state 101
    empty                          shift and go to state 108

state 65

    (78) TERMINO -> FACTOR F2 .

    COMMA           reduce using rule 78 (TERMINO -> FACTOR F2 .)
    SEMICOLON       reduce using rule 78 (TERMINO -> FACTOR F2 .)
    DIVIDE          reduce using rule 78 (TERMINO -> FACTOR F2 .)
    MULTIPLY        reduce using rule 78 (TERMINO -> FACTOR F2 .)
    PLUS            reduce using rule 78 (TERMINO -> FACTOR F2 .)
    MINUS           reduce using rule 78 (TERMINO -> FACTOR F2 .)
    LPAREN          reduce using rule 78 (TERMINO -> FACTOR F2 .)
    C_INT           reduce using rule 78 (TERMINO -> FACTOR F2 .)
    C_FLOAT         reduce using rule 78 (TERMINO -> FACTOR F2 .)
    C_CHAR          reduce using rule 78 (TERMINO -> FACTOR F2 .)
    NAME            reduce using rule 78 (TERMINO -> FACTOR F2 .)
    FUNC            reduce using rule 78 (TERMINO -> FACTOR F2 .)
    MAIN            reduce using rule 78 (TERMINO -> FACTOR F2 .)
    LBRACKET        reduce using rule 78 (TERMINO -> FACTOR F2 .)
    RPAREN          reduce using rule 78 (TERMINO -> FACTOR F2 .)
    RSBRACKET       reduce using rule 78 (TERMINO -> FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 78 (TERMINO -> FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 78 (TERMINO -> FACTOR F2 .)
    GREATER_THAN    reduce using rule 78 (TERMINO -> FACTOR F2 .)
    LESS_THAN       reduce using rule 78 (TERMINO -> FACTOR F2 .)
    IS_EQUAL        reduce using rule 78 (TERMINO -> FACTOR F2 .)
    NOT_EQUAL       reduce using rule 78 (TERMINO -> FACTOR F2 .)
    AND             reduce using rule 78 (TERMINO -> FACTOR F2 .)
    OR              reduce using rule 78 (TERMINO -> FACTOR F2 .)
    EQUALS          reduce using rule 78 (TERMINO -> FACTOR F2 .)
    RBRACKET        reduce using rule 78 (TERMINO -> FACTOR F2 .)


state 66

    (79) F2 -> DIVIDE . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    FACTOR                         shift and go to state 109
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 67

    (80) F2 -> MULTIPLY . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    FACTOR                         shift and go to state 110
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 68

    (81) F2 -> empty .

    COMMA           reduce using rule 81 (F2 -> empty .)
    SEMICOLON       reduce using rule 81 (F2 -> empty .)
    DIVIDE          reduce using rule 81 (F2 -> empty .)
    MULTIPLY        reduce using rule 81 (F2 -> empty .)
    PLUS            reduce using rule 81 (F2 -> empty .)
    MINUS           reduce using rule 81 (F2 -> empty .)
    LPAREN          reduce using rule 81 (F2 -> empty .)
    C_INT           reduce using rule 81 (F2 -> empty .)
    C_FLOAT         reduce using rule 81 (F2 -> empty .)
    C_CHAR          reduce using rule 81 (F2 -> empty .)
    NAME            reduce using rule 81 (F2 -> empty .)
    FUNC            reduce using rule 81 (F2 -> empty .)
    MAIN            reduce using rule 81 (F2 -> empty .)
    LBRACKET        reduce using rule 81 (F2 -> empty .)
    RPAREN          reduce using rule 81 (F2 -> empty .)
    RSBRACKET       reduce using rule 81 (F2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 81 (F2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 81 (F2 -> empty .)
    GREATER_THAN    reduce using rule 81 (F2 -> empty .)
    LESS_THAN       reduce using rule 81 (F2 -> empty .)
    IS_EQUAL        reduce using rule 81 (F2 -> empty .)
    NOT_EQUAL       reduce using rule 81 (F2 -> empty .)
    AND             reduce using rule 81 (F2 -> empty .)
    OR              reduce using rule 81 (F2 -> empty .)
    EQUALS          reduce using rule 81 (F2 -> empty .)
    RBRACKET        reduce using rule 81 (F2 -> empty .)


state 69

    (82) FACTOR -> LPAREN H_EXP . RPAREN

    RPAREN          shift and go to state 111


state 70

    (58) H_EXP -> T .

    RPAREN          reduce using rule 58 (H_EXP -> T .)


state 71

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO .

    $end            reduce using rule 29 (PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO .)


state 72

    (17) CUERPO -> LBRACKET . E RBRACKET
    (18) E -> . E1
    (19) E -> . empty
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (43) E1 -> . EXP
    (44) E1 -> . EXP COMMA E1
    (88) empty -> .
    (33) ESTATUTO -> . ASIGNACION
    (34) ESTATUTO -> . LLAMADA
    (35) ESTATUTO -> . RETORNO
    (36) ESTATUTO -> . LECTURA
    (37) ESTATUTO -> . ESCRITURA
    (38) ESTATUTO -> . CONDICION
    (39) ESTATUTO -> . CICLO_W
    (40) ESTATUTO -> . CICLO_F
    (74) EXP -> . TERMINO T
    (41) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (42) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (46) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (47) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (50) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (53) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (56) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (57) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (78) TERMINO -> . FACTOR F2
    (30) VARIABLE -> . NAME E2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RBRACKET        reduce using rule 88 (empty -> .)
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E                              shift and go to state 112
    E1                             shift and go to state 113
    empty                          shift and go to state 114
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 115
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 73

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar . PARAMS agregarVariables RPAREN V4 CUERPO
    (13) PARAMS -> . TIPO NAME agregarVarLista P1
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 116
    TIPO                           shift and go to state 117

state 74

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON . agregarVariables V3
    (92) agregarVariables -> .

    NAME            reduce using rule 92 (agregarVariables -> .)
    INT             reduce using rule 92 (agregarVariables -> .)
    FLOAT           reduce using rule 92 (agregarVariables -> .)
    CHAR            reduce using rule 92 (agregarVariables -> .)
    FUNC            reduce using rule 92 (agregarVariables -> .)
    MAIN            reduce using rule 92 (agregarVariables -> .)
    LBRACKET        reduce using rule 92 (agregarVariables -> .)
    RPAREN          reduce using rule 92 (agregarVariables -> .)

    agregarVariables               shift and go to state 118

state 75

    (6) V2 -> COMMA VARIABLE . agregarVarLista V2
    (95) agregarVarLista -> .

    COMMA           reduce using rule 95 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 95 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 119

state 76

    (42) LLAMADA -> NAME . LPAREN E1 RPAREN SEMICOLON
    (30) VARIABLE -> NAME . E2
    (45) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (31) E2 -> . LSBRACKET EXP RSBRACKET
    (32) E2 -> . empty
    (51) E2 -> . S_EXP
    (52) E2 -> . S_EXP COMMA E2
    (88) empty -> .
    (72) S_EXP -> . C_STRING
    (73) S_EXP -> . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 120
    LSBRACKET       shift and go to state 36
    EQUALS          reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    C_STRING        shift and go to state 40
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 77

    (45) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 121


state 78

    (20) E1 -> ESTATUTO .
    (21) E1 -> ESTATUTO . E1
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (43) E1 -> . EXP
    (44) E1 -> . EXP COMMA E1
    (33) ESTATUTO -> . ASIGNACION
    (34) ESTATUTO -> . LLAMADA
    (35) ESTATUTO -> . RETORNO
    (36) ESTATUTO -> . LECTURA
    (37) ESTATUTO -> . ESCRITURA
    (38) ESTATUTO -> . CONDICION
    (39) ESTATUTO -> . CICLO_W
    (40) ESTATUTO -> . CICLO_F
    (74) EXP -> . TERMINO T
    (41) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (42) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (46) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (47) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (50) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (53) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (56) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (57) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (78) TERMINO -> . FACTOR F2
    (30) VARIABLE -> . NAME E2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RPAREN          reduce using rule 20 (E1 -> ESTATUTO .)
    RBRACKET        reduce using rule 20 (E1 -> ESTATUTO .)
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    ESTATUTO                       shift and go to state 78
    E1                             shift and go to state 122
    EXP                            shift and go to state 115
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 79

    (43) E1 -> EXP .
    (44) E1 -> EXP . COMMA E1
    (64) G_EXP -> EXP . B
    (65) B -> . GREATER_OR_EQUAL EXP
    (66) B -> . LESS_OR_EQUAL EXP
    (67) B -> . GREATER_THAN EXP
    (68) B -> . LESS_THAN EXP
    (69) B -> . IS_EQUAL EXP
    (70) B -> . NOT_EQUAL EXP
    (71) B -> . empty
    (88) empty -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 43 (E1 -> EXP .)
    RPAREN          reduce using rule 43 (E1 -> EXP .)
    COMMA           shift and go to state 123
    GREATER_OR_EQUAL shift and go to state 102
    LESS_OR_EQUAL   shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    IS_EQUAL        shift and go to state 106
    NOT_EQUAL       shift and go to state 107
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)

  ! RPAREN          [ reduce using rule 88 (empty -> .) ]

    B                              shift and go to state 101
    empty                          shift and go to state 108

state 80

    (33) ESTATUTO -> ASIGNACION .

    NAME            reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    FROM            reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    LPAREN          reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    C_INT           reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    C_FLOAT         reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    C_CHAR          reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    RPAREN          reduce using rule 33 (ESTATUTO -> ASIGNACION .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> ASIGNACION .)


state 81

    (34) ESTATUTO -> LLAMADA .

    NAME            reduce using rule 34 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 34 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 34 (ESTATUTO -> LLAMADA .)
    PRINT           reduce using rule 34 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 34 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 34 (ESTATUTO -> LLAMADA .)
    FROM            reduce using rule 34 (ESTATUTO -> LLAMADA .)
    LPAREN          reduce using rule 34 (ESTATUTO -> LLAMADA .)
    C_INT           reduce using rule 34 (ESTATUTO -> LLAMADA .)
    C_FLOAT         reduce using rule 34 (ESTATUTO -> LLAMADA .)
    C_CHAR          reduce using rule 34 (ESTATUTO -> LLAMADA .)
    RPAREN          reduce using rule 34 (ESTATUTO -> LLAMADA .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> LLAMADA .)


state 82

    (35) ESTATUTO -> RETORNO .

    NAME            reduce using rule 35 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 35 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 35 (ESTATUTO -> RETORNO .)
    PRINT           reduce using rule 35 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 35 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 35 (ESTATUTO -> RETORNO .)
    FROM            reduce using rule 35 (ESTATUTO -> RETORNO .)
    LPAREN          reduce using rule 35 (ESTATUTO -> RETORNO .)
    C_INT           reduce using rule 35 (ESTATUTO -> RETORNO .)
    C_FLOAT         reduce using rule 35 (ESTATUTO -> RETORNO .)
    C_CHAR          reduce using rule 35 (ESTATUTO -> RETORNO .)
    RPAREN          reduce using rule 35 (ESTATUTO -> RETORNO .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> RETORNO .)


state 83

    (36) ESTATUTO -> LECTURA .

    NAME            reduce using rule 36 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 36 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 36 (ESTATUTO -> LECTURA .)
    PRINT           reduce using rule 36 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 36 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 36 (ESTATUTO -> LECTURA .)
    FROM            reduce using rule 36 (ESTATUTO -> LECTURA .)
    LPAREN          reduce using rule 36 (ESTATUTO -> LECTURA .)
    C_INT           reduce using rule 36 (ESTATUTO -> LECTURA .)
    C_FLOAT         reduce using rule 36 (ESTATUTO -> LECTURA .)
    C_CHAR          reduce using rule 36 (ESTATUTO -> LECTURA .)
    RPAREN          reduce using rule 36 (ESTATUTO -> LECTURA .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> LECTURA .)


state 84

    (37) ESTATUTO -> ESCRITURA .

    NAME            reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    FROM            reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    LPAREN          reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    C_INT           reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    C_FLOAT         reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    C_CHAR          reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    RPAREN          reduce using rule 37 (ESTATUTO -> ESCRITURA .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> ESCRITURA .)


state 85

    (38) ESTATUTO -> CONDICION .

    NAME            reduce using rule 38 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 38 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 38 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 38 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 38 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 38 (ESTATUTO -> CONDICION .)
    FROM            reduce using rule 38 (ESTATUTO -> CONDICION .)
    LPAREN          reduce using rule 38 (ESTATUTO -> CONDICION .)
    C_INT           reduce using rule 38 (ESTATUTO -> CONDICION .)
    C_FLOAT         reduce using rule 38 (ESTATUTO -> CONDICION .)
    C_CHAR          reduce using rule 38 (ESTATUTO -> CONDICION .)
    RPAREN          reduce using rule 38 (ESTATUTO -> CONDICION .)
    RBRACKET        reduce using rule 38 (ESTATUTO -> CONDICION .)


state 86

    (39) ESTATUTO -> CICLO_W .

    NAME            reduce using rule 39 (ESTATUTO -> CICLO_W .)
    RETURN          reduce using rule 39 (ESTATUTO -> CICLO_W .)
    READ            reduce using rule 39 (ESTATUTO -> CICLO_W .)
    PRINT           reduce using rule 39 (ESTATUTO -> CICLO_W .)
    IF              reduce using rule 39 (ESTATUTO -> CICLO_W .)
    WHILE           reduce using rule 39 (ESTATUTO -> CICLO_W .)
    FROM            reduce using rule 39 (ESTATUTO -> CICLO_W .)
    LPAREN          reduce using rule 39 (ESTATUTO -> CICLO_W .)
    C_INT           reduce using rule 39 (ESTATUTO -> CICLO_W .)
    C_FLOAT         reduce using rule 39 (ESTATUTO -> CICLO_W .)
    C_CHAR          reduce using rule 39 (ESTATUTO -> CICLO_W .)
    RPAREN          reduce using rule 39 (ESTATUTO -> CICLO_W .)
    RBRACKET        reduce using rule 39 (ESTATUTO -> CICLO_W .)


state 87

    (40) ESTATUTO -> CICLO_F .

    NAME            reduce using rule 40 (ESTATUTO -> CICLO_F .)
    RETURN          reduce using rule 40 (ESTATUTO -> CICLO_F .)
    READ            reduce using rule 40 (ESTATUTO -> CICLO_F .)
    PRINT           reduce using rule 40 (ESTATUTO -> CICLO_F .)
    IF              reduce using rule 40 (ESTATUTO -> CICLO_F .)
    WHILE           reduce using rule 40 (ESTATUTO -> CICLO_F .)
    FROM            reduce using rule 40 (ESTATUTO -> CICLO_F .)
    LPAREN          reduce using rule 40 (ESTATUTO -> CICLO_F .)
    C_INT           reduce using rule 40 (ESTATUTO -> CICLO_F .)
    C_FLOAT         reduce using rule 40 (ESTATUTO -> CICLO_F .)
    C_CHAR          reduce using rule 40 (ESTATUTO -> CICLO_F .)
    RPAREN          reduce using rule 40 (ESTATUTO -> CICLO_F .)
    RBRACKET        reduce using rule 40 (ESTATUTO -> CICLO_F .)


state 88

    (41) ASIGNACION -> VARIABLE . EQUALS EXP SEMICOLON
    (86) FACTOR -> VARIABLE .

    EQUALS          shift and go to state 124
    DIVIDE          reduce using rule 86 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 86 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 86 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 86 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 86 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 86 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 86 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 86 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 86 (FACTOR -> VARIABLE .)
    COMMA           reduce using rule 86 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 86 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 86 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 86 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 86 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 86 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 86 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 86 (FACTOR -> VARIABLE .)
    AND             reduce using rule 86 (FACTOR -> VARIABLE .)
    OR              reduce using rule 86 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 86 (FACTOR -> VARIABLE .)


state 89

    (46) RETORNO -> RETURN . LPAREN EXP RPAREN SEMICOLON

    LPAREN          shift and go to state 125


state 90

    (47) LECTURA -> READ . LPAREN V3 RPAREN SEMICOLON

    LPAREN          shift and go to state 126


state 91

    (50) ESCRITURA -> PRINT . LPAREN E2 RPAREN SEMICOLON

    LPAREN          shift and go to state 127


state 92

    (53) CONDICION -> IF . LPAREN H_EXP RPAREN THEN CUERPO ELSE1

    LPAREN          shift and go to state 128


state 93

    (56) CICLO_W -> WHILE . LPAREN H_EXP RPAREN DO CUERPO

    LPAREN          shift and go to state 129


state 94

    (57) CICLO_F -> FROM . NAME EQUALS C_INT TO C_INT DO CUERPO

    NAME            shift and go to state 130


state 95

    (31) E2 -> LSBRACKET EXP RSBRACKET .

    COMMA           reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    SEMICOLON       reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    DIVIDE          reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    MULTIPLY        reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    PLUS            reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    MINUS           reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    LPAREN          reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_INT           reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_FLOAT         reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_CHAR          reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    NAME            reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    FUNC            reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    MAIN            reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    LBRACKET        reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    RPAREN          reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    RSBRACKET       reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_OR_EQUAL reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_OR_EQUAL   reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_THAN    reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_THAN       reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    IS_EQUAL        reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    NOT_EQUAL       reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    AND             reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    OR              reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    EQUALS          reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)
    RBRACKET        reduce using rule 31 (E2 -> LSBRACKET EXP RSBRACKET .)


state 96

    (52) E2 -> S_EXP COMMA E2 .

    COMMA           reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    SEMICOLON       reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    DIVIDE          reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    MULTIPLY        reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    PLUS            reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    MINUS           reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    LPAREN          reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    C_INT           reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    C_FLOAT         reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    C_CHAR          reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    NAME            reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    FUNC            reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    MAIN            reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    LBRACKET        reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    RPAREN          reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    RSBRACKET       reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    GREATER_OR_EQUAL reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    LESS_OR_EQUAL   reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    GREATER_THAN    reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    LESS_THAN       reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    IS_EQUAL        reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    NOT_EQUAL       reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    AND             reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    OR              reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    EQUALS          reduce using rule 52 (E2 -> S_EXP COMMA E2 .)
    RBRACKET        reduce using rule 52 (E2 -> S_EXP COMMA E2 .)


state 97

    (60) T -> T_EXP OR . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 88 (empty -> .) ]
  ! MINUS           [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    T_EXP                          shift and go to state 58
    T                              shift and go to state 131
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 98

    (75) T -> PLUS TERMINO . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 88 (empty -> .) ]
  ! MINUS           [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 132
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 99

    (76) T -> MINUS TERMINO . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MULTIPLY        reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 88 (empty -> .) ]
  ! MINUS           [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! C_INT           [ reduce using rule 88 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 88 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 88 (empty -> .) ]
  ! NAME            [ reduce using rule 88 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 133
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 100

    (63) G -> G_EXP AND . G
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    G_EXP                          shift and go to state 63
    G                              shift and go to state 134
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 101

    (64) G_EXP -> EXP B .

    COMMA           reduce using rule 64 (G_EXP -> EXP B .)
    SEMICOLON       reduce using rule 64 (G_EXP -> EXP B .)
    DIVIDE          reduce using rule 64 (G_EXP -> EXP B .)
    MULTIPLY        reduce using rule 64 (G_EXP -> EXP B .)
    PLUS            reduce using rule 64 (G_EXP -> EXP B .)
    MINUS           reduce using rule 64 (G_EXP -> EXP B .)
    LPAREN          reduce using rule 64 (G_EXP -> EXP B .)
    C_INT           reduce using rule 64 (G_EXP -> EXP B .)
    C_FLOAT         reduce using rule 64 (G_EXP -> EXP B .)
    C_CHAR          reduce using rule 64 (G_EXP -> EXP B .)
    NAME            reduce using rule 64 (G_EXP -> EXP B .)
    FUNC            reduce using rule 64 (G_EXP -> EXP B .)
    MAIN            reduce using rule 64 (G_EXP -> EXP B .)
    LBRACKET        reduce using rule 64 (G_EXP -> EXP B .)
    RPAREN          reduce using rule 64 (G_EXP -> EXP B .)
    RSBRACKET       reduce using rule 64 (G_EXP -> EXP B .)
    GREATER_OR_EQUAL reduce using rule 64 (G_EXP -> EXP B .)
    LESS_OR_EQUAL   reduce using rule 64 (G_EXP -> EXP B .)
    GREATER_THAN    reduce using rule 64 (G_EXP -> EXP B .)
    LESS_THAN       reduce using rule 64 (G_EXP -> EXP B .)
    IS_EQUAL        reduce using rule 64 (G_EXP -> EXP B .)
    NOT_EQUAL       reduce using rule 64 (G_EXP -> EXP B .)
    AND             reduce using rule 64 (G_EXP -> EXP B .)
    OR              reduce using rule 64 (G_EXP -> EXP B .)
    EQUALS          reduce using rule 64 (G_EXP -> EXP B .)
    RBRACKET        reduce using rule 64 (G_EXP -> EXP B .)


state 102

    (65) B -> GREATER_OR_EQUAL . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 135
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 103

    (66) B -> LESS_OR_EQUAL . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 136
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 104

    (67) B -> GREATER_THAN . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 137
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 105

    (68) B -> LESS_THAN . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 138
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 106

    (69) B -> IS_EQUAL . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 107

    (70) B -> NOT_EQUAL . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 140
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 108

    (71) B -> empty .

    COMMA           reduce using rule 71 (B -> empty .)
    SEMICOLON       reduce using rule 71 (B -> empty .)
    DIVIDE          reduce using rule 71 (B -> empty .)
    MULTIPLY        reduce using rule 71 (B -> empty .)
    PLUS            reduce using rule 71 (B -> empty .)
    MINUS           reduce using rule 71 (B -> empty .)
    LPAREN          reduce using rule 71 (B -> empty .)
    C_INT           reduce using rule 71 (B -> empty .)
    C_FLOAT         reduce using rule 71 (B -> empty .)
    C_CHAR          reduce using rule 71 (B -> empty .)
    NAME            reduce using rule 71 (B -> empty .)
    FUNC            reduce using rule 71 (B -> empty .)
    MAIN            reduce using rule 71 (B -> empty .)
    LBRACKET        reduce using rule 71 (B -> empty .)
    RPAREN          reduce using rule 71 (B -> empty .)
    RSBRACKET       reduce using rule 71 (B -> empty .)
    GREATER_OR_EQUAL reduce using rule 71 (B -> empty .)
    LESS_OR_EQUAL   reduce using rule 71 (B -> empty .)
    GREATER_THAN    reduce using rule 71 (B -> empty .)
    LESS_THAN       reduce using rule 71 (B -> empty .)
    IS_EQUAL        reduce using rule 71 (B -> empty .)
    NOT_EQUAL       reduce using rule 71 (B -> empty .)
    AND             reduce using rule 71 (B -> empty .)
    OR              reduce using rule 71 (B -> empty .)
    EQUALS          reduce using rule 71 (B -> empty .)
    RBRACKET        reduce using rule 71 (B -> empty .)


state 109

    (79) F2 -> DIVIDE FACTOR . F2
    (79) F2 -> . DIVIDE FACTOR F2
    (80) F2 -> . MULTIPLY FACTOR F2
    (81) F2 -> . empty
    (88) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LPAREN          reduce using rule 88 (empty -> .)
    C_INT           reduce using rule 88 (empty -> .)
    C_FLOAT         reduce using rule 88 (empty -> .)
    C_CHAR          reduce using rule 88 (empty -> .)
    NAME            reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)

  ! DIVIDE          [ reduce using rule 88 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 88 (empty -> .) ]

    F2                             shift and go to state 141
    empty                          shift and go to state 68

state 110

    (80) F2 -> MULTIPLY FACTOR . F2
    (79) F2 -> . DIVIDE FACTOR F2
    (80) F2 -> . MULTIPLY FACTOR F2
    (81) F2 -> . empty
    (88) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LPAREN          reduce using rule 88 (empty -> .)
    C_INT           reduce using rule 88 (empty -> .)
    C_FLOAT         reduce using rule 88 (empty -> .)
    C_CHAR          reduce using rule 88 (empty -> .)
    NAME            reduce using rule 88 (empty -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RSBRACKET       reduce using rule 88 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 88 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 88 (empty -> .)
    GREATER_THAN    reduce using rule 88 (empty -> .)
    LESS_THAN       reduce using rule 88 (empty -> .)
    IS_EQUAL        reduce using rule 88 (empty -> .)
    NOT_EQUAL       reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    EQUALS          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)

  ! DIVIDE          [ reduce using rule 88 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 88 (empty -> .) ]

    F2                             shift and go to state 142
    empty                          shift and go to state 68

state 111

    (82) FACTOR -> LPAREN H_EXP RPAREN .

    COMMA           reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    SEMICOLON       reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    DIVIDE          reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    MULTIPLY        reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    PLUS            reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    MINUS           reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    LPAREN          reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_INT           reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_FLOAT         reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_CHAR          reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    NAME            reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    FUNC            reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    MAIN            reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    LBRACKET        reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    RPAREN          reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    RSBRACKET       reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_OR_EQUAL reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_OR_EQUAL   reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_THAN    reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_THAN       reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    IS_EQUAL        reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    NOT_EQUAL       reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    AND             reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    OR              reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    EQUALS          reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)
    RBRACKET        reduce using rule 82 (FACTOR -> LPAREN H_EXP RPAREN .)


state 112

    (17) CUERPO -> LBRACKET E . RBRACKET

    RBRACKET        shift and go to state 143


state 113

    (18) E -> E1 .

    RBRACKET        reduce using rule 18 (E -> E1 .)


state 114

    (19) E -> empty .

    RBRACKET        reduce using rule 19 (E -> empty .)


state 115

    (43) E1 -> EXP .
    (44) E1 -> EXP . COMMA E1

    RBRACKET        reduce using rule 43 (E1 -> EXP .)
    RPAREN          reduce using rule 43 (E1 -> EXP .)
    COMMA           shift and go to state 123


state 116

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS . agregarVariables RPAREN V4 CUERPO
    (92) agregarVariables -> .

    RPAREN          reduce using rule 92 (agregarVariables -> .)

    agregarVariables               shift and go to state 144

state 117

    (13) PARAMS -> TIPO . NAME agregarVarLista P1

    NAME            shift and go to state 145


state 118

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables . V3
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (48) V3 -> . VARIABLE COMMA V3
    (49) V3 -> . VARIABLE
    (96) borrarListaVar -> .
    (88) empty -> .
    (30) VARIABLE -> . NAME E2

    INT             reduce using rule 96 (borrarListaVar -> .)
    FLOAT           reduce using rule 96 (borrarListaVar -> .)
    CHAR            reduce using rule 96 (borrarListaVar -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 146
    V3                             shift and go to state 147
    borrarListaVar                 shift and go to state 148
    empty                          shift and go to state 149

state 119

    (6) V2 -> COMMA VARIABLE agregarVarLista . V2
    (6) V2 -> . COMMA VARIABLE agregarVarLista V2
    (7) V2 -> . empty
    (88) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 88 (empty -> .)

    V2                             shift and go to state 150
    empty                          shift and go to state 53

state 120

    (42) LLAMADA -> NAME LPAREN . E1 RPAREN SEMICOLON
    (45) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (82) FACTOR -> LPAREN . H_EXP RPAREN
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (43) E1 -> . EXP
    (44) E1 -> . EXP COMMA E1
    (58) H_EXP -> . T
    (33) ESTATUTO -> . ASIGNACION
    (34) ESTATUTO -> . LLAMADA
    (35) ESTATUTO -> . RETORNO
    (36) ESTATUTO -> . LECTURA
    (37) ESTATUTO -> . ESCRITURA
    (38) ESTATUTO -> . CONDICION
    (39) ESTATUTO -> . CICLO_W
    (40) ESTATUTO -> . CICLO_F
    (74) EXP -> . TERMINO T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (41) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (42) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (46) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (47) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (50) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (53) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (56) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (57) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (78) TERMINO -> . FACTOR F2
    (61) T_EXP -> . G
    (88) empty -> .
    (30) VARIABLE -> . NAME E2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (64) G_EXP -> . EXP B

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    RPAREN          reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E1                             shift and go to state 151
    H_EXP                          shift and go to state 69
    ESTATUTO                       shift and go to state 78
    EXP                            shift and go to state 79
    T                              shift and go to state 70
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 41
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 42
    G                              shift and go to state 62
    LLAMADAF                       shift and go to state 48
    G_EXP                          shift and go to state 63

state 121

    (45) LLAMADAF -> NAME LPAREN E1 RPAREN .

    COMMA           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    SEMICOLON       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    DIVIDE          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    FUNC            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MAIN            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LBRACKET        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RSBRACKET       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    EQUALS          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 122

    (21) E1 -> ESTATUTO E1 .

    RPAREN          reduce using rule 21 (E1 -> ESTATUTO E1 .)
    RBRACKET        reduce using rule 21 (E1 -> ESTATUTO E1 .)


state 123

    (44) E1 -> EXP COMMA . E1
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (43) E1 -> . EXP
    (44) E1 -> . EXP COMMA E1
    (33) ESTATUTO -> . ASIGNACION
    (34) ESTATUTO -> . LLAMADA
    (35) ESTATUTO -> . RETORNO
    (36) ESTATUTO -> . LECTURA
    (37) ESTATUTO -> . ESCRITURA
    (38) ESTATUTO -> . CONDICION
    (39) ESTATUTO -> . CICLO_W
    (40) ESTATUTO -> . CICLO_F
    (74) EXP -> . TERMINO T
    (41) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (42) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (46) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (47) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (50) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (53) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (56) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (57) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (78) TERMINO -> . FACTOR F2
    (30) VARIABLE -> . NAME E2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    NAME            shift and go to state 76
    RETURN          shift and go to state 89
    READ            shift and go to state 90
    PRINT           shift and go to state 91
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    FROM            shift and go to state 94
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    EXP                            shift and go to state 115
    E1                             shift and go to state 152
    ESTATUTO                       shift and go to state 78
    ASIGNACION                     shift and go to state 80
    LLAMADA                        shift and go to state 81
    RETORNO                        shift and go to state 82
    LECTURA                        shift and go to state 83
    ESCRITURA                      shift and go to state 84
    CONDICION                      shift and go to state 85
    CICLO_W                        shift and go to state 86
    CICLO_F                        shift and go to state 87
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 88
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 124

    (41) ASIGNACION -> VARIABLE EQUALS . EXP SEMICOLON
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    VARIABLE                       shift and go to state 47
    EXP                            shift and go to state 153
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 125

    (46) RETORNO -> RETURN LPAREN . EXP RPAREN SEMICOLON
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 154
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 126

    (47) LECTURA -> READ LPAREN . V3 RPAREN SEMICOLON
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (48) V3 -> . VARIABLE COMMA V3
    (49) V3 -> . VARIABLE
    (96) borrarListaVar -> .
    (88) empty -> .
    (30) VARIABLE -> . NAME E2

    INT             reduce using rule 96 (borrarListaVar -> .)
    FLOAT           reduce using rule 96 (borrarListaVar -> .)
    CHAR            reduce using rule 96 (borrarListaVar -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    NAME            shift and go to state 30

    V3                             shift and go to state 155
    borrarListaVar                 shift and go to state 148
    empty                          shift and go to state 149
    VARIABLE                       shift and go to state 146

state 127

    (50) ESCRITURA -> PRINT LPAREN . E2 RPAREN SEMICOLON
    (31) E2 -> . LSBRACKET EXP RSBRACKET
    (32) E2 -> . empty
    (51) E2 -> . S_EXP
    (52) E2 -> . S_EXP COMMA E2
    (88) empty -> .
    (72) S_EXP -> . C_STRING
    (73) S_EXP -> . EXP
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LSBRACKET       shift and go to state 36
    RPAREN          reduce using rule 88 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    E2                             shift and go to state 156
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 128

    (53) CONDICION -> IF LPAREN . H_EXP RPAREN THEN CUERPO ELSE1
    (58) H_EXP -> . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 157
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 129

    (56) CICLO_W -> WHILE LPAREN . H_EXP RPAREN DO CUERPO
    (58) H_EXP -> . T
    (59) T -> . T_EXP
    (60) T -> . T_EXP OR T
    (75) T -> . PLUS TERMINO T
    (76) T -> . MINUS TERMINO T
    (77) T -> . empty
    (61) T_EXP -> . G
    (88) empty -> .
    (62) G -> . G_EXP
    (63) G -> . G_EXP AND G
    (64) G_EXP -> . EXP B
    (74) EXP -> . TERMINO T
    (78) TERMINO -> . FACTOR F2
    (82) FACTOR -> . LPAREN H_EXP RPAREN
    (83) FACTOR -> . C_INT
    (84) FACTOR -> . C_FLOAT
    (85) FACTOR -> . C_CHAR
    (86) FACTOR -> . VARIABLE
    (87) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME E2
    (45) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 88 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 158
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 130

    (57) CICLO_F -> FROM NAME . EQUALS C_INT TO C_INT DO CUERPO

    EQUALS          shift and go to state 159


state 131

    (60) T -> T_EXP OR T .

    COMMA           reduce using rule 60 (T -> T_EXP OR T .)
    SEMICOLON       reduce using rule 60 (T -> T_EXP OR T .)
    DIVIDE          reduce using rule 60 (T -> T_EXP OR T .)
    MULTIPLY        reduce using rule 60 (T -> T_EXP OR T .)
    PLUS            reduce using rule 60 (T -> T_EXP OR T .)
    MINUS           reduce using rule 60 (T -> T_EXP OR T .)
    LPAREN          reduce using rule 60 (T -> T_EXP OR T .)
    C_INT           reduce using rule 60 (T -> T_EXP OR T .)
    C_FLOAT         reduce using rule 60 (T -> T_EXP OR T .)
    C_CHAR          reduce using rule 60 (T -> T_EXP OR T .)
    NAME            reduce using rule 60 (T -> T_EXP OR T .)
    FUNC            reduce using rule 60 (T -> T_EXP OR T .)
    MAIN            reduce using rule 60 (T -> T_EXP OR T .)
    LBRACKET        reduce using rule 60 (T -> T_EXP OR T .)
    RPAREN          reduce using rule 60 (T -> T_EXP OR T .)
    RSBRACKET       reduce using rule 60 (T -> T_EXP OR T .)
    GREATER_OR_EQUAL reduce using rule 60 (T -> T_EXP OR T .)
    LESS_OR_EQUAL   reduce using rule 60 (T -> T_EXP OR T .)
    GREATER_THAN    reduce using rule 60 (T -> T_EXP OR T .)
    LESS_THAN       reduce using rule 60 (T -> T_EXP OR T .)
    IS_EQUAL        reduce using rule 60 (T -> T_EXP OR T .)
    NOT_EQUAL       reduce using rule 60 (T -> T_EXP OR T .)
    AND             reduce using rule 60 (T -> T_EXP OR T .)
    OR              reduce using rule 60 (T -> T_EXP OR T .)
    EQUALS          reduce using rule 60 (T -> T_EXP OR T .)
    RBRACKET        reduce using rule 60 (T -> T_EXP OR T .)


state 132

    (75) T -> PLUS TERMINO T .

    COMMA           reduce using rule 75 (T -> PLUS TERMINO T .)
    SEMICOLON       reduce using rule 75 (T -> PLUS TERMINO T .)
    DIVIDE          reduce using rule 75 (T -> PLUS TERMINO T .)
    MULTIPLY        reduce using rule 75 (T -> PLUS TERMINO T .)
    PLUS            reduce using rule 75 (T -> PLUS TERMINO T .)
    MINUS           reduce using rule 75 (T -> PLUS TERMINO T .)
    LPAREN          reduce using rule 75 (T -> PLUS TERMINO T .)
    C_INT           reduce using rule 75 (T -> PLUS TERMINO T .)
    C_FLOAT         reduce using rule 75 (T -> PLUS TERMINO T .)
    C_CHAR          reduce using rule 75 (T -> PLUS TERMINO T .)
    NAME            reduce using rule 75 (T -> PLUS TERMINO T .)
    FUNC            reduce using rule 75 (T -> PLUS TERMINO T .)
    MAIN            reduce using rule 75 (T -> PLUS TERMINO T .)
    LBRACKET        reduce using rule 75 (T -> PLUS TERMINO T .)
    RPAREN          reduce using rule 75 (T -> PLUS TERMINO T .)
    RSBRACKET       reduce using rule 75 (T -> PLUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 75 (T -> PLUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 75 (T -> PLUS TERMINO T .)
    GREATER_THAN    reduce using rule 75 (T -> PLUS TERMINO T .)
    LESS_THAN       reduce using rule 75 (T -> PLUS TERMINO T .)
    IS_EQUAL        reduce using rule 75 (T -> PLUS TERMINO T .)
    NOT_EQUAL       reduce using rule 75 (T -> PLUS TERMINO T .)
    AND             reduce using rule 75 (T -> PLUS TERMINO T .)
    OR              reduce using rule 75 (T -> PLUS TERMINO T .)
    EQUALS          reduce using rule 75 (T -> PLUS TERMINO T .)
    RBRACKET        reduce using rule 75 (T -> PLUS TERMINO T .)


state 133

    (76) T -> MINUS TERMINO T .

    COMMA           reduce using rule 76 (T -> MINUS TERMINO T .)
    SEMICOLON       reduce using rule 76 (T -> MINUS TERMINO T .)
    DIVIDE          reduce using rule 76 (T -> MINUS TERMINO T .)
    MULTIPLY        reduce using rule 76 (T -> MINUS TERMINO T .)
    PLUS            reduce using rule 76 (T -> MINUS TERMINO T .)
    MINUS           reduce using rule 76 (T -> MINUS TERMINO T .)
    LPAREN          reduce using rule 76 (T -> MINUS TERMINO T .)
    C_INT           reduce using rule 76 (T -> MINUS TERMINO T .)
    C_FLOAT         reduce using rule 76 (T -> MINUS TERMINO T .)
    C_CHAR          reduce using rule 76 (T -> MINUS TERMINO T .)
    NAME            reduce using rule 76 (T -> MINUS TERMINO T .)
    FUNC            reduce using rule 76 (T -> MINUS TERMINO T .)
    MAIN            reduce using rule 76 (T -> MINUS TERMINO T .)
    LBRACKET        reduce using rule 76 (T -> MINUS TERMINO T .)
    RPAREN          reduce using rule 76 (T -> MINUS TERMINO T .)
    RSBRACKET       reduce using rule 76 (T -> MINUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 76 (T -> MINUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 76 (T -> MINUS TERMINO T .)
    GREATER_THAN    reduce using rule 76 (T -> MINUS TERMINO T .)
    LESS_THAN       reduce using rule 76 (T -> MINUS TERMINO T .)
    IS_EQUAL        reduce using rule 76 (T -> MINUS TERMINO T .)
    NOT_EQUAL       reduce using rule 76 (T -> MINUS TERMINO T .)
    AND             reduce using rule 76 (T -> MINUS TERMINO T .)
    OR              reduce using rule 76 (T -> MINUS TERMINO T .)
    EQUALS          reduce using rule 76 (T -> MINUS TERMINO T .)
    RBRACKET        reduce using rule 76 (T -> MINUS TERMINO T .)


state 134

    (63) G -> G_EXP AND G .

    COMMA           reduce using rule 63 (G -> G_EXP AND G .)
    SEMICOLON       reduce using rule 63 (G -> G_EXP AND G .)
    DIVIDE          reduce using rule 63 (G -> G_EXP AND G .)
    MULTIPLY        reduce using rule 63 (G -> G_EXP AND G .)
    PLUS            reduce using rule 63 (G -> G_EXP AND G .)
    MINUS           reduce using rule 63 (G -> G_EXP AND G .)
    LPAREN          reduce using rule 63 (G -> G_EXP AND G .)
    C_INT           reduce using rule 63 (G -> G_EXP AND G .)
    C_FLOAT         reduce using rule 63 (G -> G_EXP AND G .)
    C_CHAR          reduce using rule 63 (G -> G_EXP AND G .)
    NAME            reduce using rule 63 (G -> G_EXP AND G .)
    FUNC            reduce using rule 63 (G -> G_EXP AND G .)
    MAIN            reduce using rule 63 (G -> G_EXP AND G .)
    LBRACKET        reduce using rule 63 (G -> G_EXP AND G .)
    RPAREN          reduce using rule 63 (G -> G_EXP AND G .)
    RSBRACKET       reduce using rule 63 (G -> G_EXP AND G .)
    GREATER_OR_EQUAL reduce using rule 63 (G -> G_EXP AND G .)
    LESS_OR_EQUAL   reduce using rule 63 (G -> G_EXP AND G .)
    GREATER_THAN    reduce using rule 63 (G -> G_EXP AND G .)
    LESS_THAN       reduce using rule 63 (G -> G_EXP AND G .)
    IS_EQUAL        reduce using rule 63 (G -> G_EXP AND G .)
    NOT_EQUAL       reduce using rule 63 (G -> G_EXP AND G .)
    AND             reduce using rule 63 (G -> G_EXP AND G .)
    OR              reduce using rule 63 (G -> G_EXP AND G .)
    EQUALS          reduce using rule 63 (G -> G_EXP AND G .)
    RBRACKET        reduce using rule 63 (G -> G_EXP AND G .)


state 135

    (65) B -> GREATER_OR_EQUAL EXP .

    COMMA           reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    PLUS            reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    MINUS           reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    LPAREN          reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    C_INT           reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    NAME            reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    FUNC            reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    MAIN            reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    RPAREN          reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    AND             reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    OR              reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    EQUALS          reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 65 (B -> GREATER_OR_EQUAL EXP .)


state 136

    (66) B -> LESS_OR_EQUAL EXP .

    COMMA           reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    PLUS            reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    MINUS           reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    LPAREN          reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    C_INT           reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    NAME            reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    FUNC            reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    MAIN            reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    RPAREN          reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    AND             reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    OR              reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    EQUALS          reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 66 (B -> LESS_OR_EQUAL EXP .)


state 137

    (67) B -> GREATER_THAN EXP .

    COMMA           reduce using rule 67 (B -> GREATER_THAN EXP .)
    SEMICOLON       reduce using rule 67 (B -> GREATER_THAN EXP .)
    DIVIDE          reduce using rule 67 (B -> GREATER_THAN EXP .)
    MULTIPLY        reduce using rule 67 (B -> GREATER_THAN EXP .)
    PLUS            reduce using rule 67 (B -> GREATER_THAN EXP .)
    MINUS           reduce using rule 67 (B -> GREATER_THAN EXP .)
    LPAREN          reduce using rule 67 (B -> GREATER_THAN EXP .)
    C_INT           reduce using rule 67 (B -> GREATER_THAN EXP .)
    C_FLOAT         reduce using rule 67 (B -> GREATER_THAN EXP .)
    C_CHAR          reduce using rule 67 (B -> GREATER_THAN EXP .)
    NAME            reduce using rule 67 (B -> GREATER_THAN EXP .)
    FUNC            reduce using rule 67 (B -> GREATER_THAN EXP .)
    MAIN            reduce using rule 67 (B -> GREATER_THAN EXP .)
    LBRACKET        reduce using rule 67 (B -> GREATER_THAN EXP .)
    RPAREN          reduce using rule 67 (B -> GREATER_THAN EXP .)
    RSBRACKET       reduce using rule 67 (B -> GREATER_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 67 (B -> GREATER_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 67 (B -> GREATER_THAN EXP .)
    GREATER_THAN    reduce using rule 67 (B -> GREATER_THAN EXP .)
    LESS_THAN       reduce using rule 67 (B -> GREATER_THAN EXP .)
    IS_EQUAL        reduce using rule 67 (B -> GREATER_THAN EXP .)
    NOT_EQUAL       reduce using rule 67 (B -> GREATER_THAN EXP .)
    AND             reduce using rule 67 (B -> GREATER_THAN EXP .)
    OR              reduce using rule 67 (B -> GREATER_THAN EXP .)
    EQUALS          reduce using rule 67 (B -> GREATER_THAN EXP .)
    RBRACKET        reduce using rule 67 (B -> GREATER_THAN EXP .)


state 138

    (68) B -> LESS_THAN EXP .

    COMMA           reduce using rule 68 (B -> LESS_THAN EXP .)
    SEMICOLON       reduce using rule 68 (B -> LESS_THAN EXP .)
    DIVIDE          reduce using rule 68 (B -> LESS_THAN EXP .)
    MULTIPLY        reduce using rule 68 (B -> LESS_THAN EXP .)
    PLUS            reduce using rule 68 (B -> LESS_THAN EXP .)
    MINUS           reduce using rule 68 (B -> LESS_THAN EXP .)
    LPAREN          reduce using rule 68 (B -> LESS_THAN EXP .)
    C_INT           reduce using rule 68 (B -> LESS_THAN EXP .)
    C_FLOAT         reduce using rule 68 (B -> LESS_THAN EXP .)
    C_CHAR          reduce using rule 68 (B -> LESS_THAN EXP .)
    NAME            reduce using rule 68 (B -> LESS_THAN EXP .)
    FUNC            reduce using rule 68 (B -> LESS_THAN EXP .)
    MAIN            reduce using rule 68 (B -> LESS_THAN EXP .)
    LBRACKET        reduce using rule 68 (B -> LESS_THAN EXP .)
    RPAREN          reduce using rule 68 (B -> LESS_THAN EXP .)
    RSBRACKET       reduce using rule 68 (B -> LESS_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 68 (B -> LESS_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 68 (B -> LESS_THAN EXP .)
    GREATER_THAN    reduce using rule 68 (B -> LESS_THAN EXP .)
    LESS_THAN       reduce using rule 68 (B -> LESS_THAN EXP .)
    IS_EQUAL        reduce using rule 68 (B -> LESS_THAN EXP .)
    NOT_EQUAL       reduce using rule 68 (B -> LESS_THAN EXP .)
    AND             reduce using rule 68 (B -> LESS_THAN EXP .)
    OR              reduce using rule 68 (B -> LESS_THAN EXP .)
    EQUALS          reduce using rule 68 (B -> LESS_THAN EXP .)
    RBRACKET        reduce using rule 68 (B -> LESS_THAN EXP .)


state 139

    (69) B -> IS_EQUAL EXP .

    COMMA           reduce using rule 69 (B -> IS_EQUAL EXP .)
    SEMICOLON       reduce using rule 69 (B -> IS_EQUAL EXP .)
    DIVIDE          reduce using rule 69 (B -> IS_EQUAL EXP .)
    MULTIPLY        reduce using rule 69 (B -> IS_EQUAL EXP .)
    PLUS            reduce using rule 69 (B -> IS_EQUAL EXP .)
    MINUS           reduce using rule 69 (B -> IS_EQUAL EXP .)
    LPAREN          reduce using rule 69 (B -> IS_EQUAL EXP .)
    C_INT           reduce using rule 69 (B -> IS_EQUAL EXP .)
    C_FLOAT         reduce using rule 69 (B -> IS_EQUAL EXP .)
    C_CHAR          reduce using rule 69 (B -> IS_EQUAL EXP .)
    NAME            reduce using rule 69 (B -> IS_EQUAL EXP .)
    FUNC            reduce using rule 69 (B -> IS_EQUAL EXP .)
    MAIN            reduce using rule 69 (B -> IS_EQUAL EXP .)
    LBRACKET        reduce using rule 69 (B -> IS_EQUAL EXP .)
    RPAREN          reduce using rule 69 (B -> IS_EQUAL EXP .)
    RSBRACKET       reduce using rule 69 (B -> IS_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 69 (B -> IS_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 69 (B -> IS_EQUAL EXP .)
    GREATER_THAN    reduce using rule 69 (B -> IS_EQUAL EXP .)
    LESS_THAN       reduce using rule 69 (B -> IS_EQUAL EXP .)
    IS_EQUAL        reduce using rule 69 (B -> IS_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 69 (B -> IS_EQUAL EXP .)
    AND             reduce using rule 69 (B -> IS_EQUAL EXP .)
    OR              reduce using rule 69 (B -> IS_EQUAL EXP .)
    EQUALS          reduce using rule 69 (B -> IS_EQUAL EXP .)
    RBRACKET        reduce using rule 69 (B -> IS_EQUAL EXP .)


state 140

    (70) B -> NOT_EQUAL EXP .

    COMMA           reduce using rule 70 (B -> NOT_EQUAL EXP .)
    SEMICOLON       reduce using rule 70 (B -> NOT_EQUAL EXP .)
    DIVIDE          reduce using rule 70 (B -> NOT_EQUAL EXP .)
    MULTIPLY        reduce using rule 70 (B -> NOT_EQUAL EXP .)
    PLUS            reduce using rule 70 (B -> NOT_EQUAL EXP .)
    MINUS           reduce using rule 70 (B -> NOT_EQUAL EXP .)
    LPAREN          reduce using rule 70 (B -> NOT_EQUAL EXP .)
    C_INT           reduce using rule 70 (B -> NOT_EQUAL EXP .)
    C_FLOAT         reduce using rule 70 (B -> NOT_EQUAL EXP .)
    C_CHAR          reduce using rule 70 (B -> NOT_EQUAL EXP .)
    NAME            reduce using rule 70 (B -> NOT_EQUAL EXP .)
    FUNC            reduce using rule 70 (B -> NOT_EQUAL EXP .)
    MAIN            reduce using rule 70 (B -> NOT_EQUAL EXP .)
    LBRACKET        reduce using rule 70 (B -> NOT_EQUAL EXP .)
    RPAREN          reduce using rule 70 (B -> NOT_EQUAL EXP .)
    RSBRACKET       reduce using rule 70 (B -> NOT_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 70 (B -> NOT_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 70 (B -> NOT_EQUAL EXP .)
    GREATER_THAN    reduce using rule 70 (B -> NOT_EQUAL EXP .)
    LESS_THAN       reduce using rule 70 (B -> NOT_EQUAL EXP .)
    IS_EQUAL        reduce using rule 70 (B -> NOT_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 70 (B -> NOT_EQUAL EXP .)
    AND             reduce using rule 70 (B -> NOT_EQUAL EXP .)
    OR              reduce using rule 70 (B -> NOT_EQUAL EXP .)
    EQUALS          reduce using rule 70 (B -> NOT_EQUAL EXP .)
    RBRACKET        reduce using rule 70 (B -> NOT_EQUAL EXP .)


state 141

    (79) F2 -> DIVIDE FACTOR F2 .

    COMMA           reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    SEMICOLON       reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    DIVIDE          reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    MULTIPLY        reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    PLUS            reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    MINUS           reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    LPAREN          reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    C_INT           reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    C_FLOAT         reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    C_CHAR          reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    NAME            reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    FUNC            reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    MAIN            reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    LBRACKET        reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    RPAREN          reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    RSBRACKET       reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_THAN    reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    LESS_THAN       reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    IS_EQUAL        reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    NOT_EQUAL       reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    AND             reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    OR              reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    EQUALS          reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)
    RBRACKET        reduce using rule 79 (F2 -> DIVIDE FACTOR F2 .)


state 142

    (80) F2 -> MULTIPLY FACTOR F2 .

    COMMA           reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    SEMICOLON       reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    DIVIDE          reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    MULTIPLY        reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    PLUS            reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    MINUS           reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    LPAREN          reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    C_INT           reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    C_FLOAT         reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    C_CHAR          reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    NAME            reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    FUNC            reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    MAIN            reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    LBRACKET        reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    RPAREN          reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    RSBRACKET       reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_THAN    reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_THAN       reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    IS_EQUAL        reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    NOT_EQUAL       reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    AND             reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    OR              reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    EQUALS          reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)
    RBRACKET        reduce using rule 80 (F2 -> MULTIPLY FACTOR F2 .)


state 143

    (17) CUERPO -> LBRACKET E RBRACKET .

    $end            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    FUNC            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    MAIN            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    ELSE            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    NAME            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    RETURN          reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    READ            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    PRINT           reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    IF              reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    WHILE           reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    FROM            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    LPAREN          reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    C_INT           reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    C_FLOAT         reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    C_CHAR          reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    RPAREN          reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)


state 144

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables . RPAREN V4 CUERPO

    RPAREN          shift and go to state 160


state 145

    (13) PARAMS -> TIPO NAME . agregarVarLista P1
    (95) agregarVarLista -> .

    COMMA           reduce using rule 95 (agregarVarLista -> .)
    RPAREN          reduce using rule 95 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 161

state 146

    (48) V3 -> VARIABLE . COMMA V3
    (49) V3 -> VARIABLE .

    COMMA           shift and go to state 162
    FUNC            reduce using rule 49 (V3 -> VARIABLE .)
    MAIN            reduce using rule 49 (V3 -> VARIABLE .)
    LBRACKET        reduce using rule 49 (V3 -> VARIABLE .)
    RPAREN          reduce using rule 49 (V3 -> VARIABLE .)


state 147

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .

    FUNC            reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    MAIN            reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    LBRACKET        reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    RPAREN          reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)


state 148

    (8) V3 -> borrarListaVar . V1
    (5) V1 -> . TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V1                             shift and go to state 163
    TIPO                           shift and go to state 22

state 149

    (9) V3 -> empty .

    FUNC            reduce using rule 9 (V3 -> empty .)
    MAIN            reduce using rule 9 (V3 -> empty .)
    LBRACKET        reduce using rule 9 (V3 -> empty .)
    RPAREN          reduce using rule 9 (V3 -> empty .)


state 150

    (6) V2 -> COMMA VARIABLE agregarVarLista V2 .

    SEMICOLON       reduce using rule 6 (V2 -> COMMA VARIABLE agregarVarLista V2 .)


state 151

    (42) LLAMADA -> NAME LPAREN E1 . RPAREN SEMICOLON
    (45) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 164


state 152

    (44) E1 -> EXP COMMA E1 .

    RPAREN          reduce using rule 44 (E1 -> EXP COMMA E1 .)
    RBRACKET        reduce using rule 44 (E1 -> EXP COMMA E1 .)


state 153

    (41) ASIGNACION -> VARIABLE EQUALS EXP . SEMICOLON

    SEMICOLON       shift and go to state 165


state 154

    (46) RETORNO -> RETURN LPAREN EXP . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 155

    (47) LECTURA -> READ LPAREN V3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 156

    (50) ESCRITURA -> PRINT LPAREN E2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 168


state 157

    (53) CONDICION -> IF LPAREN H_EXP . RPAREN THEN CUERPO ELSE1

    RPAREN          shift and go to state 169


state 158

    (56) CICLO_W -> WHILE LPAREN H_EXP . RPAREN DO CUERPO

    RPAREN          shift and go to state 170


state 159

    (57) CICLO_F -> FROM NAME EQUALS . C_INT TO C_INT DO CUERPO

    C_INT           shift and go to state 171


state 160

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN . V4 CUERPO
    (11) V4 -> . VARS
    (12) V4 -> . empty
    (4) VARS -> . borrarListaVar VAR V1
    (88) empty -> .
    (96) borrarListaVar -> .

    LBRACKET        reduce using rule 88 (empty -> .)
    VAR             reduce using rule 96 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 7
    V4                             shift and go to state 172
    VARS                           shift and go to state 173
    empty                          shift and go to state 174

state 161

    (13) PARAMS -> TIPO NAME agregarVarLista . P1
    (14) P1 -> . P2
    (15) P1 -> . empty
    (16) P2 -> . COMMA PARAMS P1
    (88) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 178
    RPAREN          reduce using rule 88 (empty -> .)

  ! COMMA           [ reduce using rule 88 (empty -> .) ]

    P1                             shift and go to state 175
    P2                             shift and go to state 176
    empty                          shift and go to state 177

state 162

    (48) V3 -> VARIABLE COMMA . V3
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (48) V3 -> . VARIABLE COMMA V3
    (49) V3 -> . VARIABLE
    (96) borrarListaVar -> .
    (88) empty -> .
    (30) VARIABLE -> . NAME E2

    INT             reduce using rule 96 (borrarListaVar -> .)
    FLOAT           reduce using rule 96 (borrarListaVar -> .)
    CHAR            reduce using rule 96 (borrarListaVar -> .)
    FUNC            reduce using rule 88 (empty -> .)
    MAIN            reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 146
    V3                             shift and go to state 179
    borrarListaVar                 shift and go to state 148
    empty                          shift and go to state 149

state 163

    (8) V3 -> borrarListaVar V1 .

    FUNC            reduce using rule 8 (V3 -> borrarListaVar V1 .)
    MAIN            reduce using rule 8 (V3 -> borrarListaVar V1 .)
    LBRACKET        reduce using rule 8 (V3 -> borrarListaVar V1 .)
    RPAREN          reduce using rule 8 (V3 -> borrarListaVar V1 .)


state 164

    (42) LLAMADA -> NAME LPAREN E1 RPAREN . SEMICOLON
    (45) LLAMADAF -> NAME LPAREN E1 RPAREN .

    SEMICOLON       shift and go to state 180
    DIVIDE          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    COMMA           reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 45 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 165

    (41) ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .

    NAME            reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RETURN          reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    READ            reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    PRINT           reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    IF              reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    WHILE           reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    FROM            reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    LPAREN          reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_INT           reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_FLOAT         reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_CHAR          reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RPAREN          reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RBRACKET        reduce using rule 41 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)


state 166

    (46) RETORNO -> RETURN LPAREN EXP RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 167

    (47) LECTURA -> READ LPAREN V3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 168

    (50) ESCRITURA -> PRINT LPAREN E2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 183


state 169

    (53) CONDICION -> IF LPAREN H_EXP RPAREN . THEN CUERPO ELSE1

    THEN            shift and go to state 184


state 170

    (56) CICLO_W -> WHILE LPAREN H_EXP RPAREN . DO CUERPO

    DO              shift and go to state 185


state 171

    (57) CICLO_F -> FROM NAME EQUALS C_INT . TO C_INT DO CUERPO

    TO              shift and go to state 186


state 172

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 187

state 173

    (11) V4 -> VARS .

    LBRACKET        reduce using rule 11 (V4 -> VARS .)


state 174

    (12) V4 -> empty .

    LBRACKET        reduce using rule 12 (V4 -> empty .)


state 175

    (13) PARAMS -> TIPO NAME agregarVarLista P1 .

    RPAREN          reduce using rule 13 (PARAMS -> TIPO NAME agregarVarLista P1 .)
    COMMA           reduce using rule 13 (PARAMS -> TIPO NAME agregarVarLista P1 .)


state 176

    (14) P1 -> P2 .

    COMMA           reduce using rule 14 (P1 -> P2 .)
    RPAREN          reduce using rule 14 (P1 -> P2 .)


state 177

    (15) P1 -> empty .

    COMMA           reduce using rule 15 (P1 -> empty .)
    RPAREN          reduce using rule 15 (P1 -> empty .)


state 178

    (16) P2 -> COMMA . PARAMS P1
    (13) PARAMS -> . TIPO NAME agregarVarLista P1
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 188
    TIPO                           shift and go to state 117

state 179

    (48) V3 -> VARIABLE COMMA V3 .

    FUNC            reduce using rule 48 (V3 -> VARIABLE COMMA V3 .)
    MAIN            reduce using rule 48 (V3 -> VARIABLE COMMA V3 .)
    LBRACKET        reduce using rule 48 (V3 -> VARIABLE COMMA V3 .)
    RPAREN          reduce using rule 48 (V3 -> VARIABLE COMMA V3 .)


state 180

    (42) LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .

    NAME            reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    READ            reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    PRINT           reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    IF              reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    FROM            reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_INT           reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 42 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)


state 181

    (46) RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .

    NAME            reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RETURN          reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    READ            reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    PRINT           reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    IF              reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    FROM            reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    LPAREN          reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_INT           reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RPAREN          reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 46 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)


state 182

    (47) LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .

    NAME            reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    READ            reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    IF              reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    FROM            reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_INT           reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 47 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)


state 183

    (50) ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .

    NAME            reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RETURN          reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    READ            reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    PRINT           reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    IF              reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    FROM            reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_INT           reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 50 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)


state 184

    (53) CONDICION -> IF LPAREN H_EXP RPAREN THEN . CUERPO ELSE1
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 189

state 185

    (56) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 190

state 186

    (57) CICLO_F -> FROM NAME EQUALS C_INT TO . C_INT DO CUERPO

    C_INT           shift and go to state 191


state 187

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO .

    FUNC            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO .)
    MAIN            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar PARAMS agregarVariables RPAREN V4 CUERPO .)


state 188

    (16) P2 -> COMMA PARAMS . P1
    (14) P1 -> . P2
    (15) P1 -> . empty
    (16) P2 -> . COMMA PARAMS P1
    (88) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 178
    RPAREN          reduce using rule 88 (empty -> .)

  ! COMMA           [ reduce using rule 88 (empty -> .) ]

    P1                             shift and go to state 192
    P2                             shift and go to state 176
    empty                          shift and go to state 177

state 189

    (53) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO . ELSE1
    (54) ELSE1 -> . ELSE CUERPO
    (55) ELSE1 -> . empty
    (88) empty -> .

    ELSE            shift and go to state 194
    NAME            reduce using rule 88 (empty -> .)
    RETURN          reduce using rule 88 (empty -> .)
    READ            reduce using rule 88 (empty -> .)
    PRINT           reduce using rule 88 (empty -> .)
    IF              reduce using rule 88 (empty -> .)
    WHILE           reduce using rule 88 (empty -> .)
    FROM            reduce using rule 88 (empty -> .)
    LPAREN          reduce using rule 88 (empty -> .)
    C_INT           reduce using rule 88 (empty -> .)
    C_FLOAT         reduce using rule 88 (empty -> .)
    C_CHAR          reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)

    ELSE1                          shift and go to state 193
    empty                          shift and go to state 195

state 190

    (56) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .

    NAME            reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RETURN          reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    READ            reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    PRINT           reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    IF              reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    WHILE           reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    FROM            reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    LPAREN          reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_INT           reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_FLOAT         reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_CHAR          reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RPAREN          reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RBRACKET        reduce using rule 56 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)


state 191

    (57) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT . DO CUERPO

    DO              shift and go to state 196


state 192

    (16) P2 -> COMMA PARAMS P1 .

    COMMA           reduce using rule 16 (P2 -> COMMA PARAMS P1 .)
    RPAREN          reduce using rule 16 (P2 -> COMMA PARAMS P1 .)


state 193

    (53) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .

    NAME            reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RETURN          reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    READ            reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    PRINT           reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    IF              reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    WHILE           reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    FROM            reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    LPAREN          reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_INT           reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_FLOAT         reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_CHAR          reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RPAREN          reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RBRACKET        reduce using rule 53 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)


state 194

    (54) ELSE1 -> ELSE . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 197

state 195

    (55) ELSE1 -> empty .

    NAME            reduce using rule 55 (ELSE1 -> empty .)
    RETURN          reduce using rule 55 (ELSE1 -> empty .)
    READ            reduce using rule 55 (ELSE1 -> empty .)
    PRINT           reduce using rule 55 (ELSE1 -> empty .)
    IF              reduce using rule 55 (ELSE1 -> empty .)
    WHILE           reduce using rule 55 (ELSE1 -> empty .)
    FROM            reduce using rule 55 (ELSE1 -> empty .)
    LPAREN          reduce using rule 55 (ELSE1 -> empty .)
    C_INT           reduce using rule 55 (ELSE1 -> empty .)
    C_FLOAT         reduce using rule 55 (ELSE1 -> empty .)
    C_CHAR          reduce using rule 55 (ELSE1 -> empty .)
    RPAREN          reduce using rule 55 (ELSE1 -> empty .)
    RBRACKET        reduce using rule 55 (ELSE1 -> empty .)


state 196

    (57) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 198

state 197

    (54) ELSE1 -> ELSE CUERPO .

    NAME            reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    RETURN          reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    READ            reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    PRINT           reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    IF              reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    WHILE           reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    FROM            reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    LPAREN          reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    C_INT           reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    C_FLOAT         reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    C_CHAR          reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    RPAREN          reduce using rule 54 (ELSE1 -> ELSE CUERPO .)
    RBRACKET        reduce using rule 54 (ELSE1 -> ELSE CUERPO .)


state 198

    (57) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .

    NAME            reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RETURN          reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    READ            reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    PRINT           reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    IF              reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    WHILE           reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    FROM            reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    LPAREN          reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_INT           reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_FLOAT         reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_CHAR          reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RPAREN          reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RBRACKET        reduce using rule 57 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 30 resolved as shift
WARNING: shift/reduce conflict for NAME in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 34 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for NAME in state 34 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 41 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 41 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for NAME in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 42 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 56 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 56 resolved as shift
WARNING: shift/reduce conflict for NAME in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 76 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 76 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 76 resolved as shift
WARNING: shift/reduce conflict for NAME in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 97 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 97 resolved as shift
WARNING: shift/reduce conflict for NAME in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 98 resolved as shift
WARNING: shift/reduce conflict for NAME in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 99 resolved as shift
WARNING: shift/reduce conflict for NAME in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 161 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (E1 -> EXP)
WARNING: rejected rule (empty -> <empty>) in state 79
