Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
Rule 2     F -> FUNCION F
Rule 3     F -> empty
Rule 4     VARS -> borrarListaVar VAR V1
Rule 5     V1 -> TIPO VARIABLEDer V2 SEMICOLON V3
Rule 6     V2 -> COMMA VARIABLEDer V2
Rule 7     V2 -> empty
Rule 8     V3 -> V1
Rule 9     V3 -> empty
Rule 10    FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
Rule 11    V4 -> VARS
Rule 12    V4 -> empty
Rule 13    PARAMS -> TIPO NAME agregarVarLista P1
Rule 14    P1 -> P2
Rule 15    P1 -> empty
Rule 16    P2 -> COMMA PARAMS P1
Rule 17    CUERPO -> LBRACKET E RBRACKET
Rule 18    E -> E1
Rule 19    E -> empty
Rule 20    E1 -> ESTATUTO
Rule 21    E1 -> ESTATUTO E1
Rule 22    TIPO -> INT
Rule 23    TIPO -> FLOAT
Rule 24    TIPO -> CHAR
Rule 25    TIPO_FUNCION -> INT
Rule 26    TIPO_FUNCION -> FLOAT
Rule 27    TIPO_FUNCION -> CHAR
Rule 28    TIPO_FUNCION -> VOID
Rule 29    PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc
Rule 30    VARIABLE -> NAME agregarPilaOp E2
Rule 31    E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
Rule 32    E2 -> empty
Rule 33    VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der
Rule 34    E2Der -> LSBRACKET C_INT declararArray RSBRACKET
Rule 35    E2Der -> empty
Rule 36    ESTATUTO -> ASIGNACION
Rule 37    ESTATUTO -> LLAMADA
Rule 38    ESTATUTO -> RETORNO
Rule 39    ESTATUTO -> LECTURA
Rule 40    ESTATUTO -> ESCRITURA
Rule 41    ESTATUTO -> CONDICION
Rule 42    ESTATUTO -> CICLO_W
Rule 43    ESTATUTO -> CICLO_F
Rule 44    ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
Rule 45    LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
Rule 46    E4 -> EXP generarParam
Rule 47    E4 -> EXP generarParam COMMA E4
Rule 48    E4 -> empty
Rule 49    LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
Rule 50    RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON
Rule 51    LECTURA -> READ LPAREN V3 RPAREN SEMICOLON
Rule 52    V3 -> VARIABLE popRead COMMA V3
Rule 53    V3 -> VARIABLE popRead
Rule 54    ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON
Rule 55    E3 -> S_EXP popPrint
Rule 56    E3 -> S_EXP popPrint COMMA E3
Rule 57    CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
Rule 58    ELSE1 -> ELSE gotoElse CUERPO
Rule 59    ELSE1 -> empty
Rule 60    CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
Rule 61    CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
Rule 62    H_EXP -> T_EXP
Rule 63    H_EXP -> T_EXP OR meterOperador H_EXP popComp
Rule 64    T_EXP -> G_EXP
Rule 65    T_EXP -> G_EXP AND meterOperador T_EXP popComp
Rule 66    G_EXP -> EXP B popBool
Rule 67    B -> GREATER_OR_EQUAL meterOperador G_EXP
Rule 68    B -> LESS_OR_EQUAL meterOperador G_EXP
Rule 69    B -> GREATER_THAN meterOperador G_EXP
Rule 70    B -> LESS_THAN meterOperador G_EXP
Rule 71    B -> IS_EQUAL meterOperador G_EXP
Rule 72    B -> NOT_EQUAL meterOperador G_EXP
Rule 73    B -> empty
Rule 74    S_EXP -> C_STRING agregarConstString
Rule 75    S_EXP -> EXP
Rule 76    EXP -> TERMINO popSumaResta T
Rule 77    T -> PLUS meterOperador EXP
Rule 78    T -> MINUS meterOperador EXP
Rule 79    T -> empty
Rule 80    TERMINO -> FACTOR popMultDiv F2
Rule 81    F2 -> DIVIDE meterOperador TERMINO
Rule 82    F2 -> MULTIPLY meterOperador TERMINO
Rule 83    F2 -> empty
Rule 84    FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
Rule 85    FACTOR -> C_INT agregarConstInt
Rule 86    FACTOR -> C_FLOAT agregarConstFloat
Rule 87    FACTOR -> C_CHAR agregarConstChar
Rule 88    FACTOR -> VARIABLE
Rule 89    FACTOR -> LLAMADAF
Rule 90    empty -> <empty>
Rule 91    generarGosub -> <empty>
Rule 92    verificarLlamada -> <empty>
Rule 93    verificarParam -> <empty>
Rule 94    generarParam -> <empty>
Rule 95    generarEra -> <empty>
Rule 96    verificarFunc -> <empty>
Rule 97    verificarFuncVoid -> <empty>
Rule 98    terminarFunc -> <empty>
Rule 99    agregarLocalVar -> <empty>
Rule 100   agregarLocalVarGlobal -> <empty>
Rule 101   agregarParamTable -> <empty>
Rule 102   guardarArreglo -> <empty>
Rule 103   verificarArreglo -> <empty>
Rule 104   declararArray -> <empty>
Rule 105   agregarFrom -> <empty>
Rule 106   crearCompFrom -> <empty>
Rule 107   sumarFrom -> <empty>
Rule 108   agregarConstInt -> <empty>
Rule 109   agregarConstFloat -> <empty>
Rule 110   agregarConstChar -> <empty>
Rule 111   agregarConstString -> <empty>
Rule 112   scopeGlobal -> <empty>
Rule 113   scopeLocal -> <empty>
Rule 114   scopeTemp -> <empty>
Rule 115   scopeConst -> <empty>
Rule 116   gotoIf -> <empty>
Rule 117   terminarGoto -> <empty>
Rule 118   agregarWhile -> <empty>
Rule 119   terminarWhile -> <empty>
Rule 120   gotoElse -> <empty>
Rule 121   meterFondoFalso -> <empty>
Rule 122   quitarFondoFalso -> <empty>
Rule 123   agregarPilaOp -> <empty>
Rule 124   popPrint -> <empty>
Rule 125   popRead -> <empty>
Rule 126   popReturn -> <empty>
Rule 127   popComp -> <empty>
Rule 128   popBool -> <empty>
Rule 129   popIgual -> <empty>
Rule 130   popMultDiv -> <empty>
Rule 131   popSumaResta -> <empty>
Rule 132   meterIgual -> <empty>
Rule 133   meterBool -> <empty>
Rule 134   meterMultDiv -> <empty>
Rule 135   meterSumaResta -> <empty>
Rule 136   meterOperador -> <empty>
Rule 137   crearFuncGlobal -> <empty>
Rule 138   crearFuncMain -> <empty>
Rule 139   agregarFunc -> <empty>
Rule 140   agregarVariables -> <empty>
Rule 141   printFunciones -> <empty>
Rule 142   printTodo -> <empty>
Rule 143   agregarVarLista -> <empty>
Rule 144   borrarListaVar -> <empty>

Terminals, with rules where they appear

AND                  : 65
CHAR                 : 24 27
COMMA                : 6 16 47 52 56
C_CHAR               : 87
C_FLOAT              : 86
C_INT                : 34 85
C_STRING             : 74
DIVIDE               : 81
DO                   : 60 61
ELSE                 : 58
EQUALS               : 44 61
FLOAT                : 23 26
FROM                 : 61
FUNC                 : 10
GREATER_OR_EQUAL     : 67
GREATER_THAN         : 69
IF                   : 57
INT                  : 22 25
IS_EQUAL             : 71
LBRACKET             : 17
LESS_OR_EQUAL        : 68
LESS_THAN            : 70
LPAREN               : 10 29 45 49 50 51 54 57 60 84
LSBRACKET            : 31 34
MAIN                 : 29
MINUS                : 78
MULTIPLY             : 82
NAME                 : 1 10 13 30 33 45 49
NOT_EQUAL            : 72
OR                   : 63
PLUS                 : 77
PRINT                : 54
PROGRAM              : 1
RBRACKET             : 17
READ                 : 51
RETURN               : 50
RPAREN               : 10 29 45 49 50 51 54 57 60 84
RSBRACKET            : 31 34
SEMICOLON            : 1 5 44 45 50 51 54
THEN                 : 57
TO                   : 61
VAR                  : 4
VOID                 : 28
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 36
B                    : 66
CICLO_F              : 43
CICLO_W              : 42
CONDICION            : 41
CUERPO               : 10 29 57 58 60 61
E                    : 17
E1                   : 18 21
E2                   : 30
E2Der                : 33
E3                   : 54 56
E4                   : 45 47 49
ELSE1                : 57
ESCRITURA            : 40
ESTATUTO             : 20 21
EXP                  : 31 44 46 47 50 61 61 66 75 77 78
F                    : 1 2
F2                   : 80
FACTOR               : 80
FUNCION              : 2
G_EXP                : 64 65 67 68 69 70 71 72
H_EXP                : 57 60 63 84
LECTURA              : 39
LLAMADA              : 37
LLAMADAF             : 89
P1                   : 13 16
P2                   : 14
PARAMS               : 10 16
PRINCIPAL            : 1
PROGRAMA             : 0
RETORNO              : 38
S_EXP                : 55 56
T                    : 76
TERMINO              : 76 81 82
TIPO                 : 5 13
TIPO_FUNCION         : 10
T_EXP                : 62 63 65
V1                   : 4 8
V2                   : 5 6
V3                   : 5 51 52
V4                   : 10
VARIABLE             : 44 52 53 61 88
VARIABLEDer          : 5 6
VARS                 : 1 11
agregarConstChar     : 87
agregarConstFloat    : 86
agregarConstInt      : 85
agregarConstString   : 74
agregarFrom          : 61
agregarFunc          : 10
agregarLocalVar      : 10
agregarLocalVarGlobal : 1
agregarParamTable    : 10
agregarPilaOp        : 30
agregarVarLista      : 13 33
agregarVariables     : 10 33
agregarWhile         : 60 61
borrarListaVar       : 4 10 33
crearCompFrom        : 61
crearFuncGlobal      : 1
crearFuncMain        : 29
declararArray        : 34
empty                : 3 7 9 12 15 19 32 35 48 59 73 79 83
generarEra           : 45 49
generarGosub         : 45 49
generarParam         : 46 47
gotoElse             : 58
gotoIf               : 57 60 61
guardarArreglo       : 31
meterBool            : 
meterFondoFalso      : 31 45 49 84
meterIgual           : 
meterMultDiv         : 
meterOperador        : 44 61 63 65 67 68 69 70 71 72 77 78 81 82
meterSumaResta       : 
popBool              : 66
popComp              : 63 65
popIgual             : 44 61
popMultDiv           : 80
popPrint             : 55 56
popRead              : 52 53
popReturn            : 50
popSumaResta         : 76
printFunciones       : 
printTodo            : 1
quitarFondoFalso     : 31 45 49 84
scopeConst           : 
scopeGlobal          : 1
scopeLocal           : 10
scopeTemp            : 
sumarFrom            : 61
terminarFunc         : 10 29
terminarGoto         : 57
terminarWhile        : 60 61
verificarArreglo     : 31
verificarFunc        : 49
verificarFuncVoid    : 45
verificarLlamada     : 49
verificarParam       : 45 49

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (137) crearFuncGlobal -> .

    PROGRAM         reduce using rule 137 (crearFuncGlobal -> .)

    PROGRAMA                       shift and go to state 1
    crearFuncGlobal                shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> crearFuncGlobal . PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    PROGRAM         shift and go to state 3


state 3

    (1) PROGRAMA -> crearFuncGlobal PROGRAM . NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    NAME            shift and go to state 4


state 4

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME . SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON . scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (112) scopeGlobal -> .

    VAR             reduce using rule 112 (scopeGlobal -> .)

    scopeGlobal                    shift and go to state 6

state 6

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal . VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (4) VARS -> . borrarListaVar VAR V1
    (144) borrarListaVar -> .

    VAR             reduce using rule 144 (borrarListaVar -> .)

    VARS                           shift and go to state 7
    borrarListaVar                 shift and go to state 8

state 7

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS . F agregarLocalVarGlobal PRINCIPAL printTodo
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (90) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 90 (empty -> .)

    F                              shift and go to state 9
    FUNCION                        shift and go to state 10
    empty                          shift and go to state 11

state 8

    (4) VARS -> borrarListaVar . VAR V1

    VAR             shift and go to state 13


state 9

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F . agregarLocalVarGlobal PRINCIPAL printTodo
    (100) agregarLocalVarGlobal -> .

    MAIN            reduce using rule 100 (agregarLocalVarGlobal -> .)

    agregarLocalVarGlobal          shift and go to state 14

state 10

    (2) F -> FUNCION . F
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (90) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 90 (empty -> .)

    FUNCION                        shift and go to state 10
    F                              shift and go to state 15
    empty                          shift and go to state 11

state 11

    (3) F -> empty .

    MAIN            reduce using rule 3 (F -> empty .)


state 12

    (10) FUNCION -> FUNC . TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (25) TIPO_FUNCION -> . INT
    (26) TIPO_FUNCION -> . FLOAT
    (27) TIPO_FUNCION -> . CHAR
    (28) TIPO_FUNCION -> . VOID

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    VOID            shift and go to state 20

    TIPO_FUNCION                   shift and go to state 16

state 13

    (4) VARS -> borrarListaVar VAR . V1
    (5) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V1                             shift and go to state 21
    TIPO                           shift and go to state 22

state 14

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal . PRINCIPAL printTodo
    (29) PRINCIPAL -> . MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc

    MAIN            shift and go to state 27

    PRINCIPAL                      shift and go to state 26

state 15

    (2) F -> FUNCION F .

    MAIN            reduce using rule 2 (F -> FUNCION F .)


state 16

    (10) FUNCION -> FUNC TIPO_FUNCION . NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc

    NAME            shift and go to state 28


state 17

    (25) TIPO_FUNCION -> INT .

    NAME            reduce using rule 25 (TIPO_FUNCION -> INT .)


state 18

    (26) TIPO_FUNCION -> FLOAT .

    NAME            reduce using rule 26 (TIPO_FUNCION -> FLOAT .)


state 19

    (27) TIPO_FUNCION -> CHAR .

    NAME            reduce using rule 27 (TIPO_FUNCION -> CHAR .)


state 20

    (28) TIPO_FUNCION -> VOID .

    NAME            reduce using rule 28 (TIPO_FUNCION -> VOID .)


state 21

    (4) VARS -> borrarListaVar VAR V1 .

    FUNC            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    MAIN            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    LBRACKET        reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)


state 22

    (5) V1 -> TIPO . VARIABLEDer V2 SEMICOLON V3
    (33) VARIABLEDer -> . NAME agregarVarLista agregarVariables borrarListaVar E2Der

    NAME            shift and go to state 30

    VARIABLEDer                    shift and go to state 29

state 23

    (22) TIPO -> INT .

    NAME            reduce using rule 22 (TIPO -> INT .)


state 24

    (23) TIPO -> FLOAT .

    NAME            reduce using rule 23 (TIPO -> FLOAT .)


state 25

    (24) TIPO -> CHAR .

    NAME            reduce using rule 24 (TIPO -> CHAR .)


state 26

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL . printTodo
    (142) printTodo -> .

    $end            reduce using rule 142 (printTodo -> .)

    printTodo                      shift and go to state 31

state 27

    (29) PRINCIPAL -> MAIN . LPAREN crearFuncMain RPAREN CUERPO terminarFunc

    LPAREN          shift and go to state 32


state 28

    (10) FUNCION -> FUNC TIPO_FUNCION NAME . agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (139) agregarFunc -> .

    LPAREN          reduce using rule 139 (agregarFunc -> .)

    agregarFunc                    shift and go to state 33

state 29

    (5) V1 -> TIPO VARIABLEDer . V2 SEMICOLON V3
    (6) V2 -> . COMMA VARIABLEDer V2
    (7) V2 -> . empty
    (90) empty -> .

    COMMA           shift and go to state 35
    SEMICOLON       reduce using rule 90 (empty -> .)

    V2                             shift and go to state 34
    empty                          shift and go to state 36

state 30

    (33) VARIABLEDer -> NAME . agregarVarLista agregarVariables borrarListaVar E2Der
    (143) agregarVarLista -> .

    LSBRACKET       reduce using rule 143 (agregarVarLista -> .)
    COMMA           reduce using rule 143 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 143 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 37

state 31

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo .

    $end            reduce using rule 1 (PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo .)


state 32

    (29) PRINCIPAL -> MAIN LPAREN . crearFuncMain RPAREN CUERPO terminarFunc
    (138) crearFuncMain -> .

    RPAREN          reduce using rule 138 (crearFuncMain -> .)

    crearFuncMain                  shift and go to state 38

state 33

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc . LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc

    LPAREN          shift and go to state 39


state 34

    (5) V1 -> TIPO VARIABLEDer V2 . SEMICOLON V3

    SEMICOLON       shift and go to state 40


state 35

    (6) V2 -> COMMA . VARIABLEDer V2
    (33) VARIABLEDer -> . NAME agregarVarLista agregarVariables borrarListaVar E2Der

    NAME            shift and go to state 30

    VARIABLEDer                    shift and go to state 41

state 36

    (7) V2 -> empty .

    SEMICOLON       reduce using rule 7 (V2 -> empty .)


state 37

    (33) VARIABLEDer -> NAME agregarVarLista . agregarVariables borrarListaVar E2Der
    (140) agregarVariables -> .

    LSBRACKET       reduce using rule 140 (agregarVariables -> .)
    COMMA           reduce using rule 140 (agregarVariables -> .)
    SEMICOLON       reduce using rule 140 (agregarVariables -> .)

    agregarVariables               shift and go to state 42

state 38

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain . RPAREN CUERPO terminarFunc

    RPAREN          shift and go to state 43


state 39

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN . borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (144) borrarListaVar -> .

    INT             reduce using rule 144 (borrarListaVar -> .)
    FLOAT           reduce using rule 144 (borrarListaVar -> .)
    CHAR            reduce using rule 144 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 44

state 40

    (5) V1 -> TIPO VARIABLEDer V2 SEMICOLON . V3
    (8) V3 -> . V1
    (9) V3 -> . empty
    (52) V3 -> . VARIABLE popRead COMMA V3
    (53) V3 -> . VARIABLE popRead
    (5) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (90) empty -> .
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    FUNC            reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)
    LBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    NAME            shift and go to state 49
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    TIPO                           shift and go to state 22
    V3                             shift and go to state 45
    V1                             shift and go to state 46
    empty                          shift and go to state 47
    VARIABLE                       shift and go to state 48

state 41

    (6) V2 -> COMMA VARIABLEDer . V2
    (6) V2 -> . COMMA VARIABLEDer V2
    (7) V2 -> . empty
    (90) empty -> .

    COMMA           shift and go to state 35
    SEMICOLON       reduce using rule 90 (empty -> .)

    V2                             shift and go to state 50
    empty                          shift and go to state 36

state 42

    (33) VARIABLEDer -> NAME agregarVarLista agregarVariables . borrarListaVar E2Der
    (144) borrarListaVar -> .

    LSBRACKET       reduce using rule 144 (borrarListaVar -> .)
    COMMA           reduce using rule 144 (borrarListaVar -> .)
    SEMICOLON       reduce using rule 144 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 51

state 43

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN . CUERPO terminarFunc
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 52

state 44

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar . scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (113) scopeLocal -> .

    INT             reduce using rule 113 (scopeLocal -> .)
    FLOAT           reduce using rule 113 (scopeLocal -> .)
    CHAR            reduce using rule 113 (scopeLocal -> .)

    scopeLocal                     shift and go to state 54

state 45

    (5) V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .

    FUNC            reduce using rule 5 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)
    MAIN            reduce using rule 5 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)
    LBRACKET        reduce using rule 5 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)
    RPAREN          reduce using rule 5 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)


state 46

    (8) V3 -> V1 .

    FUNC            reduce using rule 8 (V3 -> V1 .)
    MAIN            reduce using rule 8 (V3 -> V1 .)
    LBRACKET        reduce using rule 8 (V3 -> V1 .)
    RPAREN          reduce using rule 8 (V3 -> V1 .)


state 47

    (9) V3 -> empty .

    FUNC            reduce using rule 9 (V3 -> empty .)
    MAIN            reduce using rule 9 (V3 -> empty .)
    LBRACKET        reduce using rule 9 (V3 -> empty .)
    RPAREN          reduce using rule 9 (V3 -> empty .)


state 48

    (52) V3 -> VARIABLE . popRead COMMA V3
    (53) V3 -> VARIABLE . popRead
    (125) popRead -> .

    COMMA           reduce using rule 125 (popRead -> .)
    FUNC            reduce using rule 125 (popRead -> .)
    MAIN            reduce using rule 125 (popRead -> .)
    LBRACKET        reduce using rule 125 (popRead -> .)
    RPAREN          reduce using rule 125 (popRead -> .)

    popRead                        shift and go to state 55

state 49

    (30) VARIABLE -> NAME . agregarPilaOp E2
    (123) agregarPilaOp -> .

    LSBRACKET       reduce using rule 123 (agregarPilaOp -> .)
    COMMA           reduce using rule 123 (agregarPilaOp -> .)
    FUNC            reduce using rule 123 (agregarPilaOp -> .)
    MAIN            reduce using rule 123 (agregarPilaOp -> .)
    LBRACKET        reduce using rule 123 (agregarPilaOp -> .)
    RPAREN          reduce using rule 123 (agregarPilaOp -> .)
    EQUALS          reduce using rule 123 (agregarPilaOp -> .)

    agregarPilaOp                  shift and go to state 56

state 50

    (6) V2 -> COMMA VARIABLEDer V2 .

    SEMICOLON       reduce using rule 6 (V2 -> COMMA VARIABLEDer V2 .)


state 51

    (33) VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar . E2Der
    (34) E2Der -> . LSBRACKET C_INT declararArray RSBRACKET
    (35) E2Der -> . empty
    (90) empty -> .

    LSBRACKET       shift and go to state 58
    COMMA           reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)

    E2Der                          shift and go to state 57
    empty                          shift and go to state 59

state 52

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO . terminarFunc
    (98) terminarFunc -> .

    $end            reduce using rule 98 (terminarFunc -> .)

    terminarFunc                   shift and go to state 60

state 53

    (17) CUERPO -> LBRACKET . E RBRACKET
    (18) E -> . E1
    (19) E -> . empty
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (90) empty -> .
    (36) ESTATUTO -> . ASIGNACION
    (37) ESTATUTO -> . LLAMADA
    (38) ESTATUTO -> . RETORNO
    (39) ESTATUTO -> . LECTURA
    (40) ESTATUTO -> . ESCRITURA
    (41) ESTATUTO -> . CONDICION
    (42) ESTATUTO -> . CICLO_W
    (43) ESTATUTO -> . CICLO_F
    (44) ASIGNACION -> . VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
    (45) LLAMADA -> . NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (50) RETORNO -> . RETURN LPAREN EXP popReturn RPAREN SEMICOLON
    (51) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (54) ESCRITURA -> . PRINT LPAREN E3 RPAREN SEMICOLON
    (57) CONDICION -> . IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (60) CICLO_W -> . WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (61) CICLO_F -> . FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (30) VARIABLE -> . NAME agregarPilaOp E2

    RBRACKET        reduce using rule 90 (empty -> .)
    NAME            shift and go to state 74
    RETURN          shift and go to state 75
    READ            shift and go to state 76
    PRINT           shift and go to state 77
    IF              shift and go to state 78
    WHILE           shift and go to state 79
    FROM            shift and go to state 80

    E                              shift and go to state 61
    E1                             shift and go to state 62
    empty                          shift and go to state 63
    ESTATUTO                       shift and go to state 64
    ASIGNACION                     shift and go to state 65
    LLAMADA                        shift and go to state 66
    RETORNO                        shift and go to state 67
    LECTURA                        shift and go to state 68
    ESCRITURA                      shift and go to state 69
    CONDICION                      shift and go to state 70
    CICLO_W                        shift and go to state 71
    CICLO_F                        shift and go to state 72
    VARIABLE                       shift and go to state 73

state 54

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal . PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (13) PARAMS -> . TIPO NAME agregarVarLista P1
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 81
    TIPO                           shift and go to state 82

state 55

    (52) V3 -> VARIABLE popRead . COMMA V3
    (53) V3 -> VARIABLE popRead .

    COMMA           shift and go to state 83
    FUNC            reduce using rule 53 (V3 -> VARIABLE popRead .)
    MAIN            reduce using rule 53 (V3 -> VARIABLE popRead .)
    LBRACKET        reduce using rule 53 (V3 -> VARIABLE popRead .)
    RPAREN          reduce using rule 53 (V3 -> VARIABLE popRead .)


state 56

    (30) VARIABLE -> NAME agregarPilaOp . E2
    (31) E2 -> . LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (32) E2 -> . empty
    (90) empty -> .

    LSBRACKET       shift and go to state 85
    COMMA           reduce using rule 90 (empty -> .)
    FUNC            reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)
    LBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    EQUALS          reduce using rule 90 (empty -> .)
    DIVIDE          reduce using rule 90 (empty -> .)
    MULTIPLY        reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 90 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 90 (empty -> .)
    GREATER_THAN    reduce using rule 90 (empty -> .)
    LESS_THAN       reduce using rule 90 (empty -> .)
    IS_EQUAL        reduce using rule 90 (empty -> .)
    NOT_EQUAL       reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    RSBRACKET       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    DO              reduce using rule 90 (empty -> .)

    E2                             shift and go to state 84
    empty                          shift and go to state 86

state 57

    (33) VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .

    COMMA           reduce using rule 33 (VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .)
    SEMICOLON       reduce using rule 33 (VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .)


state 58

    (34) E2Der -> LSBRACKET . C_INT declararArray RSBRACKET

    C_INT           shift and go to state 87


state 59

    (35) E2Der -> empty .

    COMMA           reduce using rule 35 (E2Der -> empty .)
    SEMICOLON       reduce using rule 35 (E2Der -> empty .)


state 60

    (29) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc .

    $end            reduce using rule 29 (PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc .)


state 61

    (17) CUERPO -> LBRACKET E . RBRACKET

    RBRACKET        shift and go to state 88


state 62

    (18) E -> E1 .

    RBRACKET        reduce using rule 18 (E -> E1 .)


state 63

    (19) E -> empty .

    RBRACKET        reduce using rule 19 (E -> empty .)


state 64

    (20) E1 -> ESTATUTO .
    (21) E1 -> ESTATUTO . E1
    (20) E1 -> . ESTATUTO
    (21) E1 -> . ESTATUTO E1
    (36) ESTATUTO -> . ASIGNACION
    (37) ESTATUTO -> . LLAMADA
    (38) ESTATUTO -> . RETORNO
    (39) ESTATUTO -> . LECTURA
    (40) ESTATUTO -> . ESCRITURA
    (41) ESTATUTO -> . CONDICION
    (42) ESTATUTO -> . CICLO_W
    (43) ESTATUTO -> . CICLO_F
    (44) ASIGNACION -> . VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
    (45) LLAMADA -> . NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (50) RETORNO -> . RETURN LPAREN EXP popReturn RPAREN SEMICOLON
    (51) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (54) ESCRITURA -> . PRINT LPAREN E3 RPAREN SEMICOLON
    (57) CONDICION -> . IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (60) CICLO_W -> . WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (61) CICLO_F -> . FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (30) VARIABLE -> . NAME agregarPilaOp E2

    RBRACKET        reduce using rule 20 (E1 -> ESTATUTO .)
    NAME            shift and go to state 74
    RETURN          shift and go to state 75
    READ            shift and go to state 76
    PRINT           shift and go to state 77
    IF              shift and go to state 78
    WHILE           shift and go to state 79
    FROM            shift and go to state 80

    ESTATUTO                       shift and go to state 64
    E1                             shift and go to state 89
    ASIGNACION                     shift and go to state 65
    LLAMADA                        shift and go to state 66
    RETORNO                        shift and go to state 67
    LECTURA                        shift and go to state 68
    ESCRITURA                      shift and go to state 69
    CONDICION                      shift and go to state 70
    CICLO_W                        shift and go to state 71
    CICLO_F                        shift and go to state 72
    VARIABLE                       shift and go to state 73

state 65

    (36) ESTATUTO -> ASIGNACION .

    NAME            reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    FROM            reduce using rule 36 (ESTATUTO -> ASIGNACION .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> ASIGNACION .)


state 66

    (37) ESTATUTO -> LLAMADA .

    NAME            reduce using rule 37 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 37 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 37 (ESTATUTO -> LLAMADA .)
    PRINT           reduce using rule 37 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 37 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 37 (ESTATUTO -> LLAMADA .)
    FROM            reduce using rule 37 (ESTATUTO -> LLAMADA .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> LLAMADA .)


state 67

    (38) ESTATUTO -> RETORNO .

    NAME            reduce using rule 38 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 38 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 38 (ESTATUTO -> RETORNO .)
    PRINT           reduce using rule 38 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 38 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 38 (ESTATUTO -> RETORNO .)
    FROM            reduce using rule 38 (ESTATUTO -> RETORNO .)
    RBRACKET        reduce using rule 38 (ESTATUTO -> RETORNO .)


state 68

    (39) ESTATUTO -> LECTURA .

    NAME            reduce using rule 39 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 39 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 39 (ESTATUTO -> LECTURA .)
    PRINT           reduce using rule 39 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 39 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 39 (ESTATUTO -> LECTURA .)
    FROM            reduce using rule 39 (ESTATUTO -> LECTURA .)
    RBRACKET        reduce using rule 39 (ESTATUTO -> LECTURA .)


state 69

    (40) ESTATUTO -> ESCRITURA .

    NAME            reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    FROM            reduce using rule 40 (ESTATUTO -> ESCRITURA .)
    RBRACKET        reduce using rule 40 (ESTATUTO -> ESCRITURA .)


state 70

    (41) ESTATUTO -> CONDICION .

    NAME            reduce using rule 41 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 41 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 41 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 41 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 41 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 41 (ESTATUTO -> CONDICION .)
    FROM            reduce using rule 41 (ESTATUTO -> CONDICION .)
    RBRACKET        reduce using rule 41 (ESTATUTO -> CONDICION .)


state 71

    (42) ESTATUTO -> CICLO_W .

    NAME            reduce using rule 42 (ESTATUTO -> CICLO_W .)
    RETURN          reduce using rule 42 (ESTATUTO -> CICLO_W .)
    READ            reduce using rule 42 (ESTATUTO -> CICLO_W .)
    PRINT           reduce using rule 42 (ESTATUTO -> CICLO_W .)
    IF              reduce using rule 42 (ESTATUTO -> CICLO_W .)
    WHILE           reduce using rule 42 (ESTATUTO -> CICLO_W .)
    FROM            reduce using rule 42 (ESTATUTO -> CICLO_W .)
    RBRACKET        reduce using rule 42 (ESTATUTO -> CICLO_W .)


state 72

    (43) ESTATUTO -> CICLO_F .

    NAME            reduce using rule 43 (ESTATUTO -> CICLO_F .)
    RETURN          reduce using rule 43 (ESTATUTO -> CICLO_F .)
    READ            reduce using rule 43 (ESTATUTO -> CICLO_F .)
    PRINT           reduce using rule 43 (ESTATUTO -> CICLO_F .)
    IF              reduce using rule 43 (ESTATUTO -> CICLO_F .)
    WHILE           reduce using rule 43 (ESTATUTO -> CICLO_F .)
    FROM            reduce using rule 43 (ESTATUTO -> CICLO_F .)
    RBRACKET        reduce using rule 43 (ESTATUTO -> CICLO_F .)


state 73

    (44) ASIGNACION -> VARIABLE . EQUALS meterOperador EXP popIgual SEMICOLON

    EQUALS          shift and go to state 90


state 74

    (45) LLAMADA -> NAME . verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (30) VARIABLE -> NAME . agregarPilaOp E2
    (97) verificarFuncVoid -> .
    (123) agregarPilaOp -> .

    LPAREN          reduce using rule 97 (verificarFuncVoid -> .)
    LSBRACKET       reduce using rule 123 (agregarPilaOp -> .)
    EQUALS          reduce using rule 123 (agregarPilaOp -> .)

    verificarFuncVoid              shift and go to state 91
    agregarPilaOp                  shift and go to state 56

state 75

    (50) RETORNO -> RETURN . LPAREN EXP popReturn RPAREN SEMICOLON

    LPAREN          shift and go to state 92


state 76

    (51) LECTURA -> READ . LPAREN V3 RPAREN SEMICOLON

    LPAREN          shift and go to state 93


state 77

    (54) ESCRITURA -> PRINT . LPAREN E3 RPAREN SEMICOLON

    LPAREN          shift and go to state 94


state 78

    (57) CONDICION -> IF . LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto

    LPAREN          shift and go to state 95


state 79

    (60) CICLO_W -> WHILE . agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (118) agregarWhile -> .

    LPAREN          reduce using rule 118 (agregarWhile -> .)

    agregarWhile                   shift and go to state 96

state 80

    (61) CICLO_F -> FROM . VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (30) VARIABLE -> . NAME agregarPilaOp E2

    NAME            shift and go to state 49

    VARIABLE                       shift and go to state 97

state 81

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS . agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (101) agregarParamTable -> .

    RPAREN          reduce using rule 101 (agregarParamTable -> .)

    agregarParamTable              shift and go to state 98

state 82

    (13) PARAMS -> TIPO . NAME agregarVarLista P1

    NAME            shift and go to state 99


state 83

    (52) V3 -> VARIABLE popRead COMMA . V3
    (8) V3 -> . V1
    (9) V3 -> . empty
    (52) V3 -> . VARIABLE popRead COMMA V3
    (53) V3 -> . VARIABLE popRead
    (5) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (90) empty -> .
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    FUNC            reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)
    LBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    NAME            shift and go to state 49
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    VARIABLE                       shift and go to state 48
    V3                             shift and go to state 100
    V1                             shift and go to state 46
    empty                          shift and go to state 47
    TIPO                           shift and go to state 22

state 84

    (30) VARIABLE -> NAME agregarPilaOp E2 .

    COMMA           reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    FUNC            reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    MAIN            reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    LBRACKET        reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    RPAREN          reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    EQUALS          reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    DIVIDE          reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    MULTIPLY        reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    PLUS            reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    MINUS           reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    GREATER_OR_EQUAL reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    LESS_OR_EQUAL   reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    GREATER_THAN    reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    LESS_THAN       reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    IS_EQUAL        reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    NOT_EQUAL       reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    AND             reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    OR              reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    SEMICOLON       reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    RSBRACKET       reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    TO              reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)
    DO              reduce using rule 30 (VARIABLE -> NAME agregarPilaOp E2 .)


state 85

    (31) E2 -> LSBRACKET . guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (102) guardarArreglo -> .

    LPAREN          reduce using rule 102 (guardarArreglo -> .)
    C_INT           reduce using rule 102 (guardarArreglo -> .)
    C_FLOAT         reduce using rule 102 (guardarArreglo -> .)
    C_CHAR          reduce using rule 102 (guardarArreglo -> .)
    NAME            reduce using rule 102 (guardarArreglo -> .)

    guardarArreglo                 shift and go to state 101

state 86

    (32) E2 -> empty .

    COMMA           reduce using rule 32 (E2 -> empty .)
    FUNC            reduce using rule 32 (E2 -> empty .)
    MAIN            reduce using rule 32 (E2 -> empty .)
    LBRACKET        reduce using rule 32 (E2 -> empty .)
    RPAREN          reduce using rule 32 (E2 -> empty .)
    EQUALS          reduce using rule 32 (E2 -> empty .)
    DIVIDE          reduce using rule 32 (E2 -> empty .)
    MULTIPLY        reduce using rule 32 (E2 -> empty .)
    PLUS            reduce using rule 32 (E2 -> empty .)
    MINUS           reduce using rule 32 (E2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 32 (E2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 32 (E2 -> empty .)
    GREATER_THAN    reduce using rule 32 (E2 -> empty .)
    LESS_THAN       reduce using rule 32 (E2 -> empty .)
    IS_EQUAL        reduce using rule 32 (E2 -> empty .)
    NOT_EQUAL       reduce using rule 32 (E2 -> empty .)
    AND             reduce using rule 32 (E2 -> empty .)
    OR              reduce using rule 32 (E2 -> empty .)
    SEMICOLON       reduce using rule 32 (E2 -> empty .)
    RSBRACKET       reduce using rule 32 (E2 -> empty .)
    TO              reduce using rule 32 (E2 -> empty .)
    DO              reduce using rule 32 (E2 -> empty .)


state 87

    (34) E2Der -> LSBRACKET C_INT . declararArray RSBRACKET
    (104) declararArray -> .

    RSBRACKET       reduce using rule 104 (declararArray -> .)

    declararArray                  shift and go to state 102

state 88

    (17) CUERPO -> LBRACKET E RBRACKET .

    $end            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    ELSE            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    NAME            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    RETURN          reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    READ            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    PRINT           reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    IF              reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    WHILE           reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    FROM            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    FUNC            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)
    MAIN            reduce using rule 17 (CUERPO -> LBRACKET E RBRACKET .)


state 89

    (21) E1 -> ESTATUTO E1 .

    RBRACKET        reduce using rule 21 (E1 -> ESTATUTO E1 .)


state 90

    (44) ASIGNACION -> VARIABLE EQUALS . meterOperador EXP popIgual SEMICOLON
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 103

state 91

    (45) LLAMADA -> NAME verificarFuncVoid . LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON

    LPAREN          shift and go to state 104


state 92

    (50) RETORNO -> RETURN LPAREN . EXP popReturn RPAREN SEMICOLON
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    EXP                            shift and go to state 106
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 93

    (51) LECTURA -> READ LPAREN . V3 RPAREN SEMICOLON
    (8) V3 -> . V1
    (9) V3 -> . empty
    (52) V3 -> . VARIABLE popRead COMMA V3
    (53) V3 -> . VARIABLE popRead
    (5) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (90) empty -> .
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    RPAREN          reduce using rule 90 (empty -> .)
    NAME            shift and go to state 49
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V3                             shift and go to state 115
    V1                             shift and go to state 46
    empty                          shift and go to state 47
    VARIABLE                       shift and go to state 48
    TIPO                           shift and go to state 22

state 94

    (54) ESCRITURA -> PRINT LPAREN . E3 RPAREN SEMICOLON
    (55) E3 -> . S_EXP popPrint
    (56) E3 -> . S_EXP popPrint COMMA E3
    (74) S_EXP -> . C_STRING agregarConstString
    (75) S_EXP -> . EXP
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    C_STRING        shift and go to state 118
    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    E3                             shift and go to state 116
    S_EXP                          shift and go to state 117
    EXP                            shift and go to state 119
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 95

    (57) CONDICION -> IF LPAREN . H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (62) H_EXP -> . T_EXP
    (63) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (64) T_EXP -> . G_EXP
    (65) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    H_EXP                          shift and go to state 120
    T_EXP                          shift and go to state 121
    G_EXP                          shift and go to state 122
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 96

    (60) CICLO_W -> WHILE agregarWhile . LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile

    LPAREN          shift and go to state 124


state 97

    (61) CICLO_F -> FROM VARIABLE . agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (105) agregarFrom -> .

    EQUALS          reduce using rule 105 (agregarFrom -> .)

    agregarFrom                    shift and go to state 125

state 98

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable . agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc
    (140) agregarVariables -> .

    RPAREN          reduce using rule 140 (agregarVariables -> .)

    agregarVariables               shift and go to state 126

state 99

    (13) PARAMS -> TIPO NAME . agregarVarLista P1
    (143) agregarVarLista -> .

    COMMA           reduce using rule 143 (agregarVarLista -> .)
    RPAREN          reduce using rule 143 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 127

state 100

    (52) V3 -> VARIABLE popRead COMMA V3 .

    FUNC            reduce using rule 52 (V3 -> VARIABLE popRead COMMA V3 .)
    MAIN            reduce using rule 52 (V3 -> VARIABLE popRead COMMA V3 .)
    LBRACKET        reduce using rule 52 (V3 -> VARIABLE popRead COMMA V3 .)
    RPAREN          reduce using rule 52 (V3 -> VARIABLE popRead COMMA V3 .)


state 101

    (31) E2 -> LSBRACKET guardarArreglo . meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (121) meterFondoFalso -> .

    LPAREN          reduce using rule 121 (meterFondoFalso -> .)
    C_INT           reduce using rule 121 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 121 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 121 (meterFondoFalso -> .)
    NAME            reduce using rule 121 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 128

state 102

    (34) E2Der -> LSBRACKET C_INT declararArray . RSBRACKET

    RSBRACKET       shift and go to state 129


state 103

    (44) ASIGNACION -> VARIABLE EQUALS meterOperador . EXP popIgual SEMICOLON
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    VARIABLE                       shift and go to state 112
    EXP                            shift and go to state 130
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    LLAMADAF                       shift and go to state 113

state 104

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN . meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (121) meterFondoFalso -> .

    LPAREN          reduce using rule 121 (meterFondoFalso -> .)
    C_INT           reduce using rule 121 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 121 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 121 (meterFondoFalso -> .)
    NAME            reduce using rule 121 (meterFondoFalso -> .)
    RPAREN          reduce using rule 121 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 131

state 105

    (84) FACTOR -> LPAREN . meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (121) meterFondoFalso -> .

    LPAREN          reduce using rule 121 (meterFondoFalso -> .)
    C_INT           reduce using rule 121 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 121 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 121 (meterFondoFalso -> .)
    NAME            reduce using rule 121 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 132

state 106

    (50) RETORNO -> RETURN LPAREN EXP . popReturn RPAREN SEMICOLON
    (126) popReturn -> .

    RPAREN          reduce using rule 126 (popReturn -> .)

    popReturn                      shift and go to state 133

state 107

    (76) EXP -> TERMINO . popSumaResta T
    (131) popSumaResta -> .

    PLUS            reduce using rule 131 (popSumaResta -> .)
    MINUS           reduce using rule 131 (popSumaResta -> .)
    RPAREN          reduce using rule 131 (popSumaResta -> .)
    COMMA           reduce using rule 131 (popSumaResta -> .)
    GREATER_OR_EQUAL reduce using rule 131 (popSumaResta -> .)
    LESS_OR_EQUAL   reduce using rule 131 (popSumaResta -> .)
    GREATER_THAN    reduce using rule 131 (popSumaResta -> .)
    LESS_THAN       reduce using rule 131 (popSumaResta -> .)
    IS_EQUAL        reduce using rule 131 (popSumaResta -> .)
    NOT_EQUAL       reduce using rule 131 (popSumaResta -> .)
    AND             reduce using rule 131 (popSumaResta -> .)
    OR              reduce using rule 131 (popSumaResta -> .)
    SEMICOLON       reduce using rule 131 (popSumaResta -> .)
    RSBRACKET       reduce using rule 131 (popSumaResta -> .)
    TO              reduce using rule 131 (popSumaResta -> .)
    DO              reduce using rule 131 (popSumaResta -> .)

    popSumaResta                   shift and go to state 134

state 108

    (80) TERMINO -> FACTOR . popMultDiv F2
    (130) popMultDiv -> .

    DIVIDE          reduce using rule 130 (popMultDiv -> .)
    MULTIPLY        reduce using rule 130 (popMultDiv -> .)
    PLUS            reduce using rule 130 (popMultDiv -> .)
    MINUS           reduce using rule 130 (popMultDiv -> .)
    RPAREN          reduce using rule 130 (popMultDiv -> .)
    COMMA           reduce using rule 130 (popMultDiv -> .)
    GREATER_OR_EQUAL reduce using rule 130 (popMultDiv -> .)
    LESS_OR_EQUAL   reduce using rule 130 (popMultDiv -> .)
    GREATER_THAN    reduce using rule 130 (popMultDiv -> .)
    LESS_THAN       reduce using rule 130 (popMultDiv -> .)
    IS_EQUAL        reduce using rule 130 (popMultDiv -> .)
    NOT_EQUAL       reduce using rule 130 (popMultDiv -> .)
    AND             reduce using rule 130 (popMultDiv -> .)
    OR              reduce using rule 130 (popMultDiv -> .)
    SEMICOLON       reduce using rule 130 (popMultDiv -> .)
    RSBRACKET       reduce using rule 130 (popMultDiv -> .)
    TO              reduce using rule 130 (popMultDiv -> .)
    DO              reduce using rule 130 (popMultDiv -> .)

    popMultDiv                     shift and go to state 135

state 109

    (85) FACTOR -> C_INT . agregarConstInt
    (108) agregarConstInt -> .

    DIVIDE          reduce using rule 108 (agregarConstInt -> .)
    MULTIPLY        reduce using rule 108 (agregarConstInt -> .)
    PLUS            reduce using rule 108 (agregarConstInt -> .)
    MINUS           reduce using rule 108 (agregarConstInt -> .)
    RPAREN          reduce using rule 108 (agregarConstInt -> .)
    COMMA           reduce using rule 108 (agregarConstInt -> .)
    GREATER_OR_EQUAL reduce using rule 108 (agregarConstInt -> .)
    LESS_OR_EQUAL   reduce using rule 108 (agregarConstInt -> .)
    GREATER_THAN    reduce using rule 108 (agregarConstInt -> .)
    LESS_THAN       reduce using rule 108 (agregarConstInt -> .)
    IS_EQUAL        reduce using rule 108 (agregarConstInt -> .)
    NOT_EQUAL       reduce using rule 108 (agregarConstInt -> .)
    AND             reduce using rule 108 (agregarConstInt -> .)
    OR              reduce using rule 108 (agregarConstInt -> .)
    SEMICOLON       reduce using rule 108 (agregarConstInt -> .)
    RSBRACKET       reduce using rule 108 (agregarConstInt -> .)
    TO              reduce using rule 108 (agregarConstInt -> .)
    DO              reduce using rule 108 (agregarConstInt -> .)

    agregarConstInt                shift and go to state 136

state 110

    (86) FACTOR -> C_FLOAT . agregarConstFloat
    (109) agregarConstFloat -> .

    DIVIDE          reduce using rule 109 (agregarConstFloat -> .)
    MULTIPLY        reduce using rule 109 (agregarConstFloat -> .)
    PLUS            reduce using rule 109 (agregarConstFloat -> .)
    MINUS           reduce using rule 109 (agregarConstFloat -> .)
    RPAREN          reduce using rule 109 (agregarConstFloat -> .)
    COMMA           reduce using rule 109 (agregarConstFloat -> .)
    GREATER_OR_EQUAL reduce using rule 109 (agregarConstFloat -> .)
    LESS_OR_EQUAL   reduce using rule 109 (agregarConstFloat -> .)
    GREATER_THAN    reduce using rule 109 (agregarConstFloat -> .)
    LESS_THAN       reduce using rule 109 (agregarConstFloat -> .)
    IS_EQUAL        reduce using rule 109 (agregarConstFloat -> .)
    NOT_EQUAL       reduce using rule 109 (agregarConstFloat -> .)
    AND             reduce using rule 109 (agregarConstFloat -> .)
    OR              reduce using rule 109 (agregarConstFloat -> .)
    SEMICOLON       reduce using rule 109 (agregarConstFloat -> .)
    RSBRACKET       reduce using rule 109 (agregarConstFloat -> .)
    TO              reduce using rule 109 (agregarConstFloat -> .)
    DO              reduce using rule 109 (agregarConstFloat -> .)

    agregarConstFloat              shift and go to state 137

state 111

    (87) FACTOR -> C_CHAR . agregarConstChar
    (110) agregarConstChar -> .

    DIVIDE          reduce using rule 110 (agregarConstChar -> .)
    MULTIPLY        reduce using rule 110 (agregarConstChar -> .)
    PLUS            reduce using rule 110 (agregarConstChar -> .)
    MINUS           reduce using rule 110 (agregarConstChar -> .)
    RPAREN          reduce using rule 110 (agregarConstChar -> .)
    COMMA           reduce using rule 110 (agregarConstChar -> .)
    GREATER_OR_EQUAL reduce using rule 110 (agregarConstChar -> .)
    LESS_OR_EQUAL   reduce using rule 110 (agregarConstChar -> .)
    GREATER_THAN    reduce using rule 110 (agregarConstChar -> .)
    LESS_THAN       reduce using rule 110 (agregarConstChar -> .)
    IS_EQUAL        reduce using rule 110 (agregarConstChar -> .)
    NOT_EQUAL       reduce using rule 110 (agregarConstChar -> .)
    AND             reduce using rule 110 (agregarConstChar -> .)
    OR              reduce using rule 110 (agregarConstChar -> .)
    SEMICOLON       reduce using rule 110 (agregarConstChar -> .)
    RSBRACKET       reduce using rule 110 (agregarConstChar -> .)
    TO              reduce using rule 110 (agregarConstChar -> .)
    DO              reduce using rule 110 (agregarConstChar -> .)

    agregarConstChar               shift and go to state 138

state 112

    (88) FACTOR -> VARIABLE .

    DIVIDE          reduce using rule 88 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 88 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 88 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 88 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 88 (FACTOR -> VARIABLE .)
    COMMA           reduce using rule 88 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 88 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 88 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 88 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 88 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 88 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 88 (FACTOR -> VARIABLE .)
    AND             reduce using rule 88 (FACTOR -> VARIABLE .)
    OR              reduce using rule 88 (FACTOR -> VARIABLE .)
    SEMICOLON       reduce using rule 88 (FACTOR -> VARIABLE .)
    RSBRACKET       reduce using rule 88 (FACTOR -> VARIABLE .)
    TO              reduce using rule 88 (FACTOR -> VARIABLE .)
    DO              reduce using rule 88 (FACTOR -> VARIABLE .)


state 113

    (89) FACTOR -> LLAMADAF .

    DIVIDE          reduce using rule 89 (FACTOR -> LLAMADAF .)
    MULTIPLY        reduce using rule 89 (FACTOR -> LLAMADAF .)
    PLUS            reduce using rule 89 (FACTOR -> LLAMADAF .)
    MINUS           reduce using rule 89 (FACTOR -> LLAMADAF .)
    RPAREN          reduce using rule 89 (FACTOR -> LLAMADAF .)
    COMMA           reduce using rule 89 (FACTOR -> LLAMADAF .)
    GREATER_OR_EQUAL reduce using rule 89 (FACTOR -> LLAMADAF .)
    LESS_OR_EQUAL   reduce using rule 89 (FACTOR -> LLAMADAF .)
    GREATER_THAN    reduce using rule 89 (FACTOR -> LLAMADAF .)
    LESS_THAN       reduce using rule 89 (FACTOR -> LLAMADAF .)
    IS_EQUAL        reduce using rule 89 (FACTOR -> LLAMADAF .)
    NOT_EQUAL       reduce using rule 89 (FACTOR -> LLAMADAF .)
    AND             reduce using rule 89 (FACTOR -> LLAMADAF .)
    OR              reduce using rule 89 (FACTOR -> LLAMADAF .)
    SEMICOLON       reduce using rule 89 (FACTOR -> LLAMADAF .)
    RSBRACKET       reduce using rule 89 (FACTOR -> LLAMADAF .)
    TO              reduce using rule 89 (FACTOR -> LLAMADAF .)
    DO              reduce using rule 89 (FACTOR -> LLAMADAF .)


state 114

    (30) VARIABLE -> NAME . agregarPilaOp E2
    (49) LLAMADAF -> NAME . verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (123) agregarPilaOp -> .
    (96) verificarFunc -> .

    LSBRACKET       reduce using rule 123 (agregarPilaOp -> .)
    DIVIDE          reduce using rule 123 (agregarPilaOp -> .)
    MULTIPLY        reduce using rule 123 (agregarPilaOp -> .)
    PLUS            reduce using rule 123 (agregarPilaOp -> .)
    MINUS           reduce using rule 123 (agregarPilaOp -> .)
    RPAREN          reduce using rule 123 (agregarPilaOp -> .)
    COMMA           reduce using rule 123 (agregarPilaOp -> .)
    GREATER_OR_EQUAL reduce using rule 123 (agregarPilaOp -> .)
    LESS_OR_EQUAL   reduce using rule 123 (agregarPilaOp -> .)
    GREATER_THAN    reduce using rule 123 (agregarPilaOp -> .)
    LESS_THAN       reduce using rule 123 (agregarPilaOp -> .)
    IS_EQUAL        reduce using rule 123 (agregarPilaOp -> .)
    NOT_EQUAL       reduce using rule 123 (agregarPilaOp -> .)
    AND             reduce using rule 123 (agregarPilaOp -> .)
    OR              reduce using rule 123 (agregarPilaOp -> .)
    SEMICOLON       reduce using rule 123 (agregarPilaOp -> .)
    RSBRACKET       reduce using rule 123 (agregarPilaOp -> .)
    TO              reduce using rule 123 (agregarPilaOp -> .)
    DO              reduce using rule 123 (agregarPilaOp -> .)
    LPAREN          reduce using rule 96 (verificarFunc -> .)

    agregarPilaOp                  shift and go to state 56
    verificarFunc                  shift and go to state 139

state 115

    (51) LECTURA -> READ LPAREN V3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 140


state 116

    (54) ESCRITURA -> PRINT LPAREN E3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 117

    (55) E3 -> S_EXP . popPrint
    (56) E3 -> S_EXP . popPrint COMMA E3
    (124) popPrint -> .

    COMMA           reduce using rule 124 (popPrint -> .)
    RPAREN          reduce using rule 124 (popPrint -> .)

    popPrint                       shift and go to state 142

state 118

    (74) S_EXP -> C_STRING . agregarConstString
    (111) agregarConstString -> .

    COMMA           reduce using rule 111 (agregarConstString -> .)
    RPAREN          reduce using rule 111 (agregarConstString -> .)

    agregarConstString             shift and go to state 143

state 119

    (75) S_EXP -> EXP .

    COMMA           reduce using rule 75 (S_EXP -> EXP .)
    RPAREN          reduce using rule 75 (S_EXP -> EXP .)


state 120

    (57) CONDICION -> IF LPAREN H_EXP . RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto

    RPAREN          shift and go to state 144


state 121

    (62) H_EXP -> T_EXP .
    (63) H_EXP -> T_EXP . OR meterOperador H_EXP popComp

    RPAREN          reduce using rule 62 (H_EXP -> T_EXP .)
    OR              shift and go to state 145


state 122

    (64) T_EXP -> G_EXP .
    (65) T_EXP -> G_EXP . AND meterOperador T_EXP popComp

    OR              reduce using rule 64 (T_EXP -> G_EXP .)
    RPAREN          reduce using rule 64 (T_EXP -> G_EXP .)
    AND             shift and go to state 146


state 123

    (66) G_EXP -> EXP . B popBool
    (67) B -> . GREATER_OR_EQUAL meterOperador G_EXP
    (68) B -> . LESS_OR_EQUAL meterOperador G_EXP
    (69) B -> . GREATER_THAN meterOperador G_EXP
    (70) B -> . LESS_THAN meterOperador G_EXP
    (71) B -> . IS_EQUAL meterOperador G_EXP
    (72) B -> . NOT_EQUAL meterOperador G_EXP
    (73) B -> . empty
    (90) empty -> .

    GREATER_OR_EQUAL shift and go to state 148
    LESS_OR_EQUAL   shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    IS_EQUAL        shift and go to state 152
    NOT_EQUAL       shift and go to state 153
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    B                              shift and go to state 147
    empty                          shift and go to state 154

state 124

    (60) CICLO_W -> WHILE agregarWhile LPAREN . H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (62) H_EXP -> . T_EXP
    (63) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (64) T_EXP -> . G_EXP
    (65) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    H_EXP                          shift and go to state 155
    T_EXP                          shift and go to state 121
    G_EXP                          shift and go to state 122
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 125

    (61) CICLO_F -> FROM VARIABLE agregarFrom . EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile

    EQUALS          shift and go to state 156


state 126

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables . RPAREN V4 agregarLocalVar CUERPO terminarFunc

    RPAREN          shift and go to state 157


state 127

    (13) PARAMS -> TIPO NAME agregarVarLista . P1
    (14) P1 -> . P2
    (15) P1 -> . empty
    (16) P2 -> . COMMA PARAMS P1
    (90) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 161
    RPAREN          reduce using rule 90 (empty -> .)

  ! COMMA           [ reduce using rule 90 (empty -> .) ]

    P1                             shift and go to state 158
    P2                             shift and go to state 159
    empty                          shift and go to state 160

state 128

    (31) E2 -> LSBRACKET guardarArreglo meterFondoFalso . EXP RSBRACKET verificarArreglo quitarFondoFalso
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    EXP                            shift and go to state 162
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 129

    (34) E2Der -> LSBRACKET C_INT declararArray RSBRACKET .

    COMMA           reduce using rule 34 (E2Der -> LSBRACKET C_INT declararArray RSBRACKET .)
    SEMICOLON       reduce using rule 34 (E2Der -> LSBRACKET C_INT declararArray RSBRACKET .)


state 130

    (44) ASIGNACION -> VARIABLE EQUALS meterOperador EXP . popIgual SEMICOLON
    (129) popIgual -> .

    SEMICOLON       reduce using rule 129 (popIgual -> .)

    popIgual                       shift and go to state 163

state 131

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso . generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (95) generarEra -> .

    LPAREN          reduce using rule 95 (generarEra -> .)
    C_INT           reduce using rule 95 (generarEra -> .)
    C_FLOAT         reduce using rule 95 (generarEra -> .)
    C_CHAR          reduce using rule 95 (generarEra -> .)
    NAME            reduce using rule 95 (generarEra -> .)
    RPAREN          reduce using rule 95 (generarEra -> .)

    generarEra                     shift and go to state 164

state 132

    (84) FACTOR -> LPAREN meterFondoFalso . H_EXP RPAREN quitarFondoFalso
    (62) H_EXP -> . T_EXP
    (63) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (64) T_EXP -> . G_EXP
    (65) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    H_EXP                          shift and go to state 165
    T_EXP                          shift and go to state 121
    G_EXP                          shift and go to state 122
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 133

    (50) RETORNO -> RETURN LPAREN EXP popReturn . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 134

    (76) EXP -> TERMINO popSumaResta . T
    (77) T -> . PLUS meterOperador EXP
    (78) T -> . MINUS meterOperador EXP
    (79) T -> . empty
    (90) empty -> .

    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    RPAREN          reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 90 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 90 (empty -> .)
    GREATER_THAN    reduce using rule 90 (empty -> .)
    LESS_THAN       reduce using rule 90 (empty -> .)
    IS_EQUAL        reduce using rule 90 (empty -> .)
    NOT_EQUAL       reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    RSBRACKET       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    DO              reduce using rule 90 (empty -> .)

    T                              shift and go to state 167
    empty                          shift and go to state 170

state 135

    (80) TERMINO -> FACTOR popMultDiv . F2
    (81) F2 -> . DIVIDE meterOperador TERMINO
    (82) F2 -> . MULTIPLY meterOperador TERMINO
    (83) F2 -> . empty
    (90) empty -> .

    DIVIDE          shift and go to state 172
    MULTIPLY        shift and go to state 173
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 90 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 90 (empty -> .)
    GREATER_THAN    reduce using rule 90 (empty -> .)
    LESS_THAN       reduce using rule 90 (empty -> .)
    IS_EQUAL        reduce using rule 90 (empty -> .)
    NOT_EQUAL       reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    RSBRACKET       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    DO              reduce using rule 90 (empty -> .)

    F2                             shift and go to state 171
    empty                          shift and go to state 174

state 136

    (85) FACTOR -> C_INT agregarConstInt .

    DIVIDE          reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    MULTIPLY        reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    PLUS            reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    MINUS           reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    RPAREN          reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    COMMA           reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    LESS_THAN       reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    AND             reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    OR              reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    SEMICOLON       reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    RSBRACKET       reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    TO              reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)
    DO              reduce using rule 85 (FACTOR -> C_INT agregarConstInt .)


state 137

    (86) FACTOR -> C_FLOAT agregarConstFloat .

    DIVIDE          reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    MULTIPLY        reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    PLUS            reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    MINUS           reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    RPAREN          reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    COMMA           reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    GREATER_OR_EQUAL reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    LESS_OR_EQUAL   reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    GREATER_THAN    reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    LESS_THAN       reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    IS_EQUAL        reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    NOT_EQUAL       reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    AND             reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    OR              reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    SEMICOLON       reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    RSBRACKET       reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    TO              reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)
    DO              reduce using rule 86 (FACTOR -> C_FLOAT agregarConstFloat .)


state 138

    (87) FACTOR -> C_CHAR agregarConstChar .

    DIVIDE          reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    MULTIPLY        reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    PLUS            reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    MINUS           reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    RPAREN          reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    COMMA           reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    GREATER_OR_EQUAL reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    LESS_OR_EQUAL   reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    GREATER_THAN    reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    LESS_THAN       reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    IS_EQUAL        reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    NOT_EQUAL       reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    AND             reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    OR              reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    SEMICOLON       reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    RSBRACKET       reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    TO              reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)
    DO              reduce using rule 87 (FACTOR -> C_CHAR agregarConstChar .)


state 139

    (49) LLAMADAF -> NAME verificarFunc . LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 175


state 140

    (51) LECTURA -> READ LPAREN V3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 141

    (54) ESCRITURA -> PRINT LPAREN E3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 177


state 142

    (55) E3 -> S_EXP popPrint .
    (56) E3 -> S_EXP popPrint . COMMA E3

    RPAREN          reduce using rule 55 (E3 -> S_EXP popPrint .)
    COMMA           shift and go to state 178


state 143

    (74) S_EXP -> C_STRING agregarConstString .

    COMMA           reduce using rule 74 (S_EXP -> C_STRING agregarConstString .)
    RPAREN          reduce using rule 74 (S_EXP -> C_STRING agregarConstString .)


state 144

    (57) CONDICION -> IF LPAREN H_EXP RPAREN . gotoIf THEN CUERPO ELSE1 terminarGoto
    (116) gotoIf -> .

    THEN            reduce using rule 116 (gotoIf -> .)

    gotoIf                         shift and go to state 179

state 145

    (63) H_EXP -> T_EXP OR . meterOperador H_EXP popComp
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 180

state 146

    (65) T_EXP -> G_EXP AND . meterOperador T_EXP popComp
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 181

state 147

    (66) G_EXP -> EXP B . popBool
    (128) popBool -> .

    AND             reduce using rule 128 (popBool -> .)
    OR              reduce using rule 128 (popBool -> .)
    RPAREN          reduce using rule 128 (popBool -> .)

    popBool                        shift and go to state 182

state 148

    (67) B -> GREATER_OR_EQUAL . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 183

state 149

    (68) B -> LESS_OR_EQUAL . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 184

state 150

    (69) B -> GREATER_THAN . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 185

state 151

    (70) B -> LESS_THAN . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 186

state 152

    (71) B -> IS_EQUAL . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 187

state 153

    (72) B -> NOT_EQUAL . meterOperador G_EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 188

state 154

    (73) B -> empty .

    AND             reduce using rule 73 (B -> empty .)
    OR              reduce using rule 73 (B -> empty .)
    RPAREN          reduce using rule 73 (B -> empty .)


state 155

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP . RPAREN DO gotoIf CUERPO terminarWhile

    RPAREN          shift and go to state 189


state 156

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS . meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 190

state 157

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN . V4 agregarLocalVar CUERPO terminarFunc
    (11) V4 -> . VARS
    (12) V4 -> . empty
    (4) VARS -> . borrarListaVar VAR V1
    (90) empty -> .
    (144) borrarListaVar -> .

    LBRACKET        reduce using rule 90 (empty -> .)
    VAR             reduce using rule 144 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 8
    V4                             shift and go to state 191
    VARS                           shift and go to state 192
    empty                          shift and go to state 193

state 158

    (13) PARAMS -> TIPO NAME agregarVarLista P1 .

    RPAREN          reduce using rule 13 (PARAMS -> TIPO NAME agregarVarLista P1 .)
    COMMA           reduce using rule 13 (PARAMS -> TIPO NAME agregarVarLista P1 .)


state 159

    (14) P1 -> P2 .

    COMMA           reduce using rule 14 (P1 -> P2 .)
    RPAREN          reduce using rule 14 (P1 -> P2 .)


state 160

    (15) P1 -> empty .

    COMMA           reduce using rule 15 (P1 -> empty .)
    RPAREN          reduce using rule 15 (P1 -> empty .)


state 161

    (16) P2 -> COMMA . PARAMS P1
    (13) PARAMS -> . TIPO NAME agregarVarLista P1
    (22) TIPO -> . INT
    (23) TIPO -> . FLOAT
    (24) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 194
    TIPO                           shift and go to state 82

state 162

    (31) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP . RSBRACKET verificarArreglo quitarFondoFalso

    RSBRACKET       shift and go to state 195


state 163

    (44) ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual . SEMICOLON

    SEMICOLON       shift and go to state 196


state 164

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra . E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (46) E4 -> . EXP generarParam
    (47) E4 -> . EXP generarParam COMMA E4
    (48) E4 -> . empty
    (76) EXP -> . TERMINO popSumaResta T
    (90) empty -> .
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    E4                             shift and go to state 197
    EXP                            shift and go to state 198
    empty                          shift and go to state 199
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 165

    (84) FACTOR -> LPAREN meterFondoFalso H_EXP . RPAREN quitarFondoFalso

    RPAREN          shift and go to state 200


state 166

    (50) RETORNO -> RETURN LPAREN EXP popReturn RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 201


state 167

    (76) EXP -> TERMINO popSumaResta T .

    RPAREN          reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    COMMA           reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    GREATER_OR_EQUAL reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    LESS_OR_EQUAL   reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    GREATER_THAN    reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    LESS_THAN       reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    IS_EQUAL        reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    NOT_EQUAL       reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    AND             reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    OR              reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    SEMICOLON       reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    RSBRACKET       reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    TO              reduce using rule 76 (EXP -> TERMINO popSumaResta T .)
    DO              reduce using rule 76 (EXP -> TERMINO popSumaResta T .)


state 168

    (77) T -> PLUS . meterOperador EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 202

state 169

    (78) T -> MINUS . meterOperador EXP
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 203

state 170

    (79) T -> empty .

    RPAREN          reduce using rule 79 (T -> empty .)
    COMMA           reduce using rule 79 (T -> empty .)
    GREATER_OR_EQUAL reduce using rule 79 (T -> empty .)
    LESS_OR_EQUAL   reduce using rule 79 (T -> empty .)
    GREATER_THAN    reduce using rule 79 (T -> empty .)
    LESS_THAN       reduce using rule 79 (T -> empty .)
    IS_EQUAL        reduce using rule 79 (T -> empty .)
    NOT_EQUAL       reduce using rule 79 (T -> empty .)
    AND             reduce using rule 79 (T -> empty .)
    OR              reduce using rule 79 (T -> empty .)
    SEMICOLON       reduce using rule 79 (T -> empty .)
    RSBRACKET       reduce using rule 79 (T -> empty .)
    TO              reduce using rule 79 (T -> empty .)
    DO              reduce using rule 79 (T -> empty .)


state 171

    (80) TERMINO -> FACTOR popMultDiv F2 .

    PLUS            reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    MINUS           reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    RPAREN          reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    COMMA           reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    GREATER_OR_EQUAL reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    LESS_OR_EQUAL   reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    GREATER_THAN    reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    LESS_THAN       reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    IS_EQUAL        reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    NOT_EQUAL       reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    AND             reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    OR              reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    SEMICOLON       reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    RSBRACKET       reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    TO              reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)
    DO              reduce using rule 80 (TERMINO -> FACTOR popMultDiv F2 .)


state 172

    (81) F2 -> DIVIDE . meterOperador TERMINO
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 204

state 173

    (82) F2 -> MULTIPLY . meterOperador TERMINO
    (136) meterOperador -> .

    LPAREN          reduce using rule 136 (meterOperador -> .)
    C_INT           reduce using rule 136 (meterOperador -> .)
    C_FLOAT         reduce using rule 136 (meterOperador -> .)
    C_CHAR          reduce using rule 136 (meterOperador -> .)
    NAME            reduce using rule 136 (meterOperador -> .)

    meterOperador                  shift and go to state 205

state 174

    (83) F2 -> empty .

    PLUS            reduce using rule 83 (F2 -> empty .)
    MINUS           reduce using rule 83 (F2 -> empty .)
    RPAREN          reduce using rule 83 (F2 -> empty .)
    COMMA           reduce using rule 83 (F2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 83 (F2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 83 (F2 -> empty .)
    GREATER_THAN    reduce using rule 83 (F2 -> empty .)
    LESS_THAN       reduce using rule 83 (F2 -> empty .)
    IS_EQUAL        reduce using rule 83 (F2 -> empty .)
    NOT_EQUAL       reduce using rule 83 (F2 -> empty .)
    AND             reduce using rule 83 (F2 -> empty .)
    OR              reduce using rule 83 (F2 -> empty .)
    SEMICOLON       reduce using rule 83 (F2 -> empty .)
    RSBRACKET       reduce using rule 83 (F2 -> empty .)
    TO              reduce using rule 83 (F2 -> empty .)
    DO              reduce using rule 83 (F2 -> empty .)


state 175

    (49) LLAMADAF -> NAME verificarFunc LPAREN . meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (121) meterFondoFalso -> .

    LPAREN          reduce using rule 121 (meterFondoFalso -> .)
    C_INT           reduce using rule 121 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 121 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 121 (meterFondoFalso -> .)
    NAME            reduce using rule 121 (meterFondoFalso -> .)
    RPAREN          reduce using rule 121 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 206

state 176

    (51) LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .

    NAME            reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    READ            reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    IF              reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    FROM            reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 51 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)


state 177

    (54) ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .

    NAME            reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    READ            reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    IF              reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    FROM            reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 54 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)


state 178

    (56) E3 -> S_EXP popPrint COMMA . E3
    (55) E3 -> . S_EXP popPrint
    (56) E3 -> . S_EXP popPrint COMMA E3
    (74) S_EXP -> . C_STRING agregarConstString
    (75) S_EXP -> . EXP
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    C_STRING        shift and go to state 118
    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    S_EXP                          shift and go to state 117
    E3                             shift and go to state 207
    EXP                            shift and go to state 119
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 179

    (57) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf . THEN CUERPO ELSE1 terminarGoto

    THEN            shift and go to state 208


state 180

    (63) H_EXP -> T_EXP OR meterOperador . H_EXP popComp
    (62) H_EXP -> . T_EXP
    (63) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (64) T_EXP -> . G_EXP
    (65) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    T_EXP                          shift and go to state 121
    H_EXP                          shift and go to state 209
    G_EXP                          shift and go to state 122
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 181

    (65) T_EXP -> G_EXP AND meterOperador . T_EXP popComp
    (64) T_EXP -> . G_EXP
    (65) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 122
    T_EXP                          shift and go to state 210
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 182

    (66) G_EXP -> EXP B popBool .

    AND             reduce using rule 66 (G_EXP -> EXP B popBool .)
    OR              reduce using rule 66 (G_EXP -> EXP B popBool .)
    RPAREN          reduce using rule 66 (G_EXP -> EXP B popBool .)


state 183

    (67) B -> GREATER_OR_EQUAL meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 211
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 184

    (68) B -> LESS_OR_EQUAL meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 212
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 185

    (69) B -> GREATER_THAN meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 213
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 186

    (70) B -> LESS_THAN meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 214
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 187

    (71) B -> IS_EQUAL meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 215
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 188

    (72) B -> NOT_EQUAL meterOperador . G_EXP
    (66) G_EXP -> . EXP B popBool
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    G_EXP                          shift and go to state 216
    EXP                            shift and go to state 123
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 189

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN . DO gotoIf CUERPO terminarWhile

    DO              shift and go to state 217


state 190

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador . EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    VARIABLE                       shift and go to state 112
    EXP                            shift and go to state 218
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    LLAMADAF                       shift and go to state 113

state 191

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 . agregarLocalVar CUERPO terminarFunc
    (99) agregarLocalVar -> .

    LBRACKET        reduce using rule 99 (agregarLocalVar -> .)

    agregarLocalVar                shift and go to state 219

state 192

    (11) V4 -> VARS .

    LBRACKET        reduce using rule 11 (V4 -> VARS .)


state 193

    (12) V4 -> empty .

    LBRACKET        reduce using rule 12 (V4 -> empty .)


state 194

    (16) P2 -> COMMA PARAMS . P1
    (14) P1 -> . P2
    (15) P1 -> . empty
    (16) P2 -> . COMMA PARAMS P1
    (90) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 161
    RPAREN          reduce using rule 90 (empty -> .)

  ! COMMA           [ reduce using rule 90 (empty -> .) ]

    P1                             shift and go to state 220
    P2                             shift and go to state 159
    empty                          shift and go to state 160

state 195

    (31) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET . verificarArreglo quitarFondoFalso
    (103) verificarArreglo -> .

    COMMA           reduce using rule 103 (verificarArreglo -> .)
    FUNC            reduce using rule 103 (verificarArreglo -> .)
    MAIN            reduce using rule 103 (verificarArreglo -> .)
    LBRACKET        reduce using rule 103 (verificarArreglo -> .)
    RPAREN          reduce using rule 103 (verificarArreglo -> .)
    EQUALS          reduce using rule 103 (verificarArreglo -> .)
    DIVIDE          reduce using rule 103 (verificarArreglo -> .)
    MULTIPLY        reduce using rule 103 (verificarArreglo -> .)
    PLUS            reduce using rule 103 (verificarArreglo -> .)
    MINUS           reduce using rule 103 (verificarArreglo -> .)
    GREATER_OR_EQUAL reduce using rule 103 (verificarArreglo -> .)
    LESS_OR_EQUAL   reduce using rule 103 (verificarArreglo -> .)
    GREATER_THAN    reduce using rule 103 (verificarArreglo -> .)
    LESS_THAN       reduce using rule 103 (verificarArreglo -> .)
    IS_EQUAL        reduce using rule 103 (verificarArreglo -> .)
    NOT_EQUAL       reduce using rule 103 (verificarArreglo -> .)
    AND             reduce using rule 103 (verificarArreglo -> .)
    OR              reduce using rule 103 (verificarArreglo -> .)
    SEMICOLON       reduce using rule 103 (verificarArreglo -> .)
    RSBRACKET       reduce using rule 103 (verificarArreglo -> .)
    TO              reduce using rule 103 (verificarArreglo -> .)
    DO              reduce using rule 103 (verificarArreglo -> .)

    verificarArreglo               shift and go to state 221

state 196

    (44) ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .

    NAME            reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    RETURN          reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    READ            reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    PRINT           reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    IF              reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    WHILE           reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    FROM            reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    RBRACKET        reduce using rule 44 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)


state 197

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 . verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (93) verificarParam -> .

    RPAREN          reduce using rule 93 (verificarParam -> .)

    verificarParam                 shift and go to state 222

state 198

    (46) E4 -> EXP . generarParam
    (47) E4 -> EXP . generarParam COMMA E4
    (94) generarParam -> .

    COMMA           reduce using rule 94 (generarParam -> .)
    RPAREN          reduce using rule 94 (generarParam -> .)

    generarParam                   shift and go to state 223

state 199

    (48) E4 -> empty .

    RPAREN          reduce using rule 48 (E4 -> empty .)


state 200

    (84) FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN . quitarFondoFalso
    (122) quitarFondoFalso -> .

    DIVIDE          reduce using rule 122 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 122 (quitarFondoFalso -> .)
    PLUS            reduce using rule 122 (quitarFondoFalso -> .)
    MINUS           reduce using rule 122 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 122 (quitarFondoFalso -> .)
    COMMA           reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 122 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 122 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 122 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 122 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 122 (quitarFondoFalso -> .)
    AND             reduce using rule 122 (quitarFondoFalso -> .)
    OR              reduce using rule 122 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 122 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 122 (quitarFondoFalso -> .)
    TO              reduce using rule 122 (quitarFondoFalso -> .)
    DO              reduce using rule 122 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 224

state 201

    (50) RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .

    NAME            reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    RETURN          reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    READ            reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    PRINT           reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    IF              reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    FROM            reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 50 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)


state 202

    (77) T -> PLUS meterOperador . EXP
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    EXP                            shift and go to state 225
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 203

    (78) T -> MINUS meterOperador . EXP
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    EXP                            shift and go to state 226
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 204

    (81) F2 -> DIVIDE meterOperador . TERMINO
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    TERMINO                        shift and go to state 227
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 205

    (82) F2 -> MULTIPLY meterOperador . TERMINO
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    TERMINO                        shift and go to state 228
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 206

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso . generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (95) generarEra -> .

    LPAREN          reduce using rule 95 (generarEra -> .)
    C_INT           reduce using rule 95 (generarEra -> .)
    C_FLOAT         reduce using rule 95 (generarEra -> .)
    C_CHAR          reduce using rule 95 (generarEra -> .)
    NAME            reduce using rule 95 (generarEra -> .)
    RPAREN          reduce using rule 95 (generarEra -> .)

    generarEra                     shift and go to state 229

state 207

    (56) E3 -> S_EXP popPrint COMMA E3 .

    RPAREN          reduce using rule 56 (E3 -> S_EXP popPrint COMMA E3 .)


state 208

    (57) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN . CUERPO ELSE1 terminarGoto
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 230

state 209

    (63) H_EXP -> T_EXP OR meterOperador H_EXP . popComp
    (127) popComp -> .

    RPAREN          reduce using rule 127 (popComp -> .)

    popComp                        shift and go to state 231

state 210

    (65) T_EXP -> G_EXP AND meterOperador T_EXP . popComp
    (127) popComp -> .

    OR              reduce using rule 127 (popComp -> .)
    RPAREN          reduce using rule 127 (popComp -> .)

    popComp                        shift and go to state 232

state 211

    (67) B -> GREATER_OR_EQUAL meterOperador G_EXP .

    AND             reduce using rule 67 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 67 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 67 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)


state 212

    (68) B -> LESS_OR_EQUAL meterOperador G_EXP .

    AND             reduce using rule 68 (B -> LESS_OR_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 68 (B -> LESS_OR_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 68 (B -> LESS_OR_EQUAL meterOperador G_EXP .)


state 213

    (69) B -> GREATER_THAN meterOperador G_EXP .

    AND             reduce using rule 69 (B -> GREATER_THAN meterOperador G_EXP .)
    OR              reduce using rule 69 (B -> GREATER_THAN meterOperador G_EXP .)
    RPAREN          reduce using rule 69 (B -> GREATER_THAN meterOperador G_EXP .)


state 214

    (70) B -> LESS_THAN meterOperador G_EXP .

    AND             reduce using rule 70 (B -> LESS_THAN meterOperador G_EXP .)
    OR              reduce using rule 70 (B -> LESS_THAN meterOperador G_EXP .)
    RPAREN          reduce using rule 70 (B -> LESS_THAN meterOperador G_EXP .)


state 215

    (71) B -> IS_EQUAL meterOperador G_EXP .

    AND             reduce using rule 71 (B -> IS_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 71 (B -> IS_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 71 (B -> IS_EQUAL meterOperador G_EXP .)


state 216

    (72) B -> NOT_EQUAL meterOperador G_EXP .

    AND             reduce using rule 72 (B -> NOT_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 72 (B -> NOT_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 72 (B -> NOT_EQUAL meterOperador G_EXP .)


state 217

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO . gotoIf CUERPO terminarWhile
    (116) gotoIf -> .

    LBRACKET        reduce using rule 116 (gotoIf -> .)

    gotoIf                         shift and go to state 233

state 218

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP . popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (129) popIgual -> .

    TO              reduce using rule 129 (popIgual -> .)

    popIgual                       shift and go to state 234

state 219

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar . CUERPO terminarFunc
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 235

state 220

    (16) P2 -> COMMA PARAMS P1 .

    COMMA           reduce using rule 16 (P2 -> COMMA PARAMS P1 .)
    RPAREN          reduce using rule 16 (P2 -> COMMA PARAMS P1 .)


state 221

    (31) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo . quitarFondoFalso
    (122) quitarFondoFalso -> .

    COMMA           reduce using rule 122 (quitarFondoFalso -> .)
    FUNC            reduce using rule 122 (quitarFondoFalso -> .)
    MAIN            reduce using rule 122 (quitarFondoFalso -> .)
    LBRACKET        reduce using rule 122 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 122 (quitarFondoFalso -> .)
    EQUALS          reduce using rule 122 (quitarFondoFalso -> .)
    DIVIDE          reduce using rule 122 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 122 (quitarFondoFalso -> .)
    PLUS            reduce using rule 122 (quitarFondoFalso -> .)
    MINUS           reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 122 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 122 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 122 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 122 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 122 (quitarFondoFalso -> .)
    AND             reduce using rule 122 (quitarFondoFalso -> .)
    OR              reduce using rule 122 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 122 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 122 (quitarFondoFalso -> .)
    TO              reduce using rule 122 (quitarFondoFalso -> .)
    DO              reduce using rule 122 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 236

state 222

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam . RPAREN quitarFondoFalso generarGosub SEMICOLON

    RPAREN          shift and go to state 237


state 223

    (46) E4 -> EXP generarParam .
    (47) E4 -> EXP generarParam . COMMA E4

    RPAREN          reduce using rule 46 (E4 -> EXP generarParam .)
    COMMA           shift and go to state 238


state 224

    (84) FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .

    DIVIDE          reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    MULTIPLY        reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    PLUS            reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    MINUS           reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    RPAREN          reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    COMMA           reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    LESS_THAN       reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    AND             reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    OR              reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    SEMICOLON       reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    RSBRACKET       reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    TO              reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    DO              reduce using rule 84 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)


state 225

    (77) T -> PLUS meterOperador EXP .

    RPAREN          reduce using rule 77 (T -> PLUS meterOperador EXP .)
    COMMA           reduce using rule 77 (T -> PLUS meterOperador EXP .)
    GREATER_OR_EQUAL reduce using rule 77 (T -> PLUS meterOperador EXP .)
    LESS_OR_EQUAL   reduce using rule 77 (T -> PLUS meterOperador EXP .)
    GREATER_THAN    reduce using rule 77 (T -> PLUS meterOperador EXP .)
    LESS_THAN       reduce using rule 77 (T -> PLUS meterOperador EXP .)
    IS_EQUAL        reduce using rule 77 (T -> PLUS meterOperador EXP .)
    NOT_EQUAL       reduce using rule 77 (T -> PLUS meterOperador EXP .)
    AND             reduce using rule 77 (T -> PLUS meterOperador EXP .)
    OR              reduce using rule 77 (T -> PLUS meterOperador EXP .)
    SEMICOLON       reduce using rule 77 (T -> PLUS meterOperador EXP .)
    RSBRACKET       reduce using rule 77 (T -> PLUS meterOperador EXP .)
    TO              reduce using rule 77 (T -> PLUS meterOperador EXP .)
    DO              reduce using rule 77 (T -> PLUS meterOperador EXP .)


state 226

    (78) T -> MINUS meterOperador EXP .

    RPAREN          reduce using rule 78 (T -> MINUS meterOperador EXP .)
    COMMA           reduce using rule 78 (T -> MINUS meterOperador EXP .)
    GREATER_OR_EQUAL reduce using rule 78 (T -> MINUS meterOperador EXP .)
    LESS_OR_EQUAL   reduce using rule 78 (T -> MINUS meterOperador EXP .)
    GREATER_THAN    reduce using rule 78 (T -> MINUS meterOperador EXP .)
    LESS_THAN       reduce using rule 78 (T -> MINUS meterOperador EXP .)
    IS_EQUAL        reduce using rule 78 (T -> MINUS meterOperador EXP .)
    NOT_EQUAL       reduce using rule 78 (T -> MINUS meterOperador EXP .)
    AND             reduce using rule 78 (T -> MINUS meterOperador EXP .)
    OR              reduce using rule 78 (T -> MINUS meterOperador EXP .)
    SEMICOLON       reduce using rule 78 (T -> MINUS meterOperador EXP .)
    RSBRACKET       reduce using rule 78 (T -> MINUS meterOperador EXP .)
    TO              reduce using rule 78 (T -> MINUS meterOperador EXP .)
    DO              reduce using rule 78 (T -> MINUS meterOperador EXP .)


state 227

    (81) F2 -> DIVIDE meterOperador TERMINO .

    PLUS            reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    MINUS           reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    RPAREN          reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    COMMA           reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    GREATER_OR_EQUAL reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    LESS_OR_EQUAL   reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    GREATER_THAN    reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    LESS_THAN       reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    IS_EQUAL        reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    NOT_EQUAL       reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    AND             reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    OR              reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    SEMICOLON       reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    RSBRACKET       reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    TO              reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)
    DO              reduce using rule 81 (F2 -> DIVIDE meterOperador TERMINO .)


state 228

    (82) F2 -> MULTIPLY meterOperador TERMINO .

    PLUS            reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    MINUS           reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    RPAREN          reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    COMMA           reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    GREATER_OR_EQUAL reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    LESS_OR_EQUAL   reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    GREATER_THAN    reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    LESS_THAN       reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    IS_EQUAL        reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    NOT_EQUAL       reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    AND             reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    OR              reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    SEMICOLON       reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    RSBRACKET       reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    TO              reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)
    DO              reduce using rule 82 (F2 -> MULTIPLY meterOperador TERMINO .)


state 229

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra . E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (46) E4 -> . EXP generarParam
    (47) E4 -> . EXP generarParam COMMA E4
    (48) E4 -> . empty
    (76) EXP -> . TERMINO popSumaResta T
    (90) empty -> .
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    E4                             shift and go to state 239
    EXP                            shift and go to state 198
    empty                          shift and go to state 199
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 230

    (57) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO . ELSE1 terminarGoto
    (58) ELSE1 -> . ELSE gotoElse CUERPO
    (59) ELSE1 -> . empty
    (90) empty -> .

    ELSE            shift and go to state 241
    NAME            reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FROM            reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)

    ELSE1                          shift and go to state 240
    empty                          shift and go to state 242

state 231

    (63) H_EXP -> T_EXP OR meterOperador H_EXP popComp .

    RPAREN          reduce using rule 63 (H_EXP -> T_EXP OR meterOperador H_EXP popComp .)


state 232

    (65) T_EXP -> G_EXP AND meterOperador T_EXP popComp .

    OR              reduce using rule 65 (T_EXP -> G_EXP AND meterOperador T_EXP popComp .)
    RPAREN          reduce using rule 65 (T_EXP -> G_EXP AND meterOperador T_EXP popComp .)


state 233

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf . CUERPO terminarWhile
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 243

state 234

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual . agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (118) agregarWhile -> .

    TO              reduce using rule 118 (agregarWhile -> .)

    agregarWhile                   shift and go to state 244

state 235

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO . terminarFunc
    (98) terminarFunc -> .

    FUNC            reduce using rule 98 (terminarFunc -> .)
    MAIN            reduce using rule 98 (terminarFunc -> .)

    terminarFunc                   shift and go to state 245

state 236

    (31) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .

    COMMA           reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    FUNC            reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    MAIN            reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    LBRACKET        reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    RPAREN          reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    EQUALS          reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    DIVIDE          reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    MULTIPLY        reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    PLUS            reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    MINUS           reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    GREATER_OR_EQUAL reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    LESS_OR_EQUAL   reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    GREATER_THAN    reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    LESS_THAN       reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    IS_EQUAL        reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    NOT_EQUAL       reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    AND             reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    OR              reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    SEMICOLON       reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    RSBRACKET       reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    TO              reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    DO              reduce using rule 31 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)


state 237

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN . quitarFondoFalso generarGosub SEMICOLON
    (122) quitarFondoFalso -> .

    SEMICOLON       reduce using rule 122 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 246

state 238

    (47) E4 -> EXP generarParam COMMA . E4
    (46) E4 -> . EXP generarParam
    (47) E4 -> . EXP generarParam COMMA E4
    (48) E4 -> . empty
    (76) EXP -> . TERMINO popSumaResta T
    (90) empty -> .
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 90 (empty -> .)
    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    EXP                            shift and go to state 198
    E4                             shift and go to state 247
    empty                          shift and go to state 199
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    VARIABLE                       shift and go to state 112
    LLAMADAF                       shift and go to state 113

state 239

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 . verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (93) verificarParam -> .

    RPAREN          reduce using rule 93 (verificarParam -> .)

    verificarParam                 shift and go to state 248

state 240

    (57) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 . terminarGoto
    (117) terminarGoto -> .

    NAME            reduce using rule 117 (terminarGoto -> .)
    RETURN          reduce using rule 117 (terminarGoto -> .)
    READ            reduce using rule 117 (terminarGoto -> .)
    PRINT           reduce using rule 117 (terminarGoto -> .)
    IF              reduce using rule 117 (terminarGoto -> .)
    WHILE           reduce using rule 117 (terminarGoto -> .)
    FROM            reduce using rule 117 (terminarGoto -> .)
    RBRACKET        reduce using rule 117 (terminarGoto -> .)

    terminarGoto                   shift and go to state 249

state 241

    (58) ELSE1 -> ELSE . gotoElse CUERPO
    (120) gotoElse -> .

    LBRACKET        reduce using rule 120 (gotoElse -> .)

    gotoElse                       shift and go to state 250

state 242

    (59) ELSE1 -> empty .

    NAME            reduce using rule 59 (ELSE1 -> empty .)
    RETURN          reduce using rule 59 (ELSE1 -> empty .)
    READ            reduce using rule 59 (ELSE1 -> empty .)
    PRINT           reduce using rule 59 (ELSE1 -> empty .)
    IF              reduce using rule 59 (ELSE1 -> empty .)
    WHILE           reduce using rule 59 (ELSE1 -> empty .)
    FROM            reduce using rule 59 (ELSE1 -> empty .)
    RBRACKET        reduce using rule 59 (ELSE1 -> empty .)


state 243

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO . terminarWhile
    (119) terminarWhile -> .

    NAME            reduce using rule 119 (terminarWhile -> .)
    RETURN          reduce using rule 119 (terminarWhile -> .)
    READ            reduce using rule 119 (terminarWhile -> .)
    PRINT           reduce using rule 119 (terminarWhile -> .)
    IF              reduce using rule 119 (terminarWhile -> .)
    WHILE           reduce using rule 119 (terminarWhile -> .)
    FROM            reduce using rule 119 (terminarWhile -> .)
    RBRACKET        reduce using rule 119 (terminarWhile -> .)

    terminarWhile                  shift and go to state 251

state 244

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile . TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile

    TO              shift and go to state 252


state 245

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc .

    FUNC            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc .)
    MAIN            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN V4 agregarLocalVar CUERPO terminarFunc .)


state 246

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso . generarGosub SEMICOLON
    (91) generarGosub -> .

    SEMICOLON       reduce using rule 91 (generarGosub -> .)

    generarGosub                   shift and go to state 253

state 247

    (47) E4 -> EXP generarParam COMMA E4 .

    RPAREN          reduce using rule 47 (E4 -> EXP generarParam COMMA E4 .)


state 248

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam . RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          shift and go to state 254


state 249

    (57) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .

    NAME            reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    RETURN          reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    READ            reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    PRINT           reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    IF              reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    WHILE           reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    FROM            reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    RBRACKET        reduce using rule 57 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)


state 250

    (58) ELSE1 -> ELSE gotoElse . CUERPO
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 255

state 251

    (60) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .

    NAME            reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    RETURN          reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    READ            reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    PRINT           reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    IF              reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    WHILE           reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    FROM            reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    RBRACKET        reduce using rule 60 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)


state 252

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO . EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (76) EXP -> . TERMINO popSumaResta T
    (80) TERMINO -> . FACTOR popMultDiv F2
    (84) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (85) FACTOR -> . C_INT agregarConstInt
    (86) FACTOR -> . C_FLOAT agregarConstFloat
    (87) FACTOR -> . C_CHAR agregarConstChar
    (88) FACTOR -> . VARIABLE
    (89) FACTOR -> . LLAMADAF
    (30) VARIABLE -> . NAME agregarPilaOp E2
    (49) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 105
    C_INT           shift and go to state 109
    C_FLOAT         shift and go to state 110
    C_CHAR          shift and go to state 111
    NAME            shift and go to state 114

    VARIABLE                       shift and go to state 112
    EXP                            shift and go to state 256
    TERMINO                        shift and go to state 107
    FACTOR                         shift and go to state 108
    LLAMADAF                       shift and go to state 113

state 253

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub . SEMICOLON

    SEMICOLON       shift and go to state 257


state 254

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN . quitarFondoFalso verificarLlamada generarGosub
    (122) quitarFondoFalso -> .

    DIVIDE          reduce using rule 122 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 122 (quitarFondoFalso -> .)
    PLUS            reduce using rule 122 (quitarFondoFalso -> .)
    MINUS           reduce using rule 122 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 122 (quitarFondoFalso -> .)
    COMMA           reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 122 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 122 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 122 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 122 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 122 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 122 (quitarFondoFalso -> .)
    AND             reduce using rule 122 (quitarFondoFalso -> .)
    OR              reduce using rule 122 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 122 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 122 (quitarFondoFalso -> .)
    TO              reduce using rule 122 (quitarFondoFalso -> .)
    DO              reduce using rule 122 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 258

state 255

    (58) ELSE1 -> ELSE gotoElse CUERPO .

    NAME            reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    RETURN          reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    READ            reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    PRINT           reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    IF              reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    WHILE           reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    FROM            reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)
    RBRACKET        reduce using rule 58 (ELSE1 -> ELSE gotoElse CUERPO .)


state 256

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP . crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (106) crearCompFrom -> .

    DO              reduce using rule 106 (crearCompFrom -> .)

    crearCompFrom                  shift and go to state 259

state 257

    (45) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .

    NAME            reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    RETURN          reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    READ            reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    PRINT           reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    IF              reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    WHILE           reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    FROM            reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    RBRACKET        reduce using rule 45 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)


state 258

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso . verificarLlamada generarGosub
    (92) verificarLlamada -> .

    DIVIDE          reduce using rule 92 (verificarLlamada -> .)
    MULTIPLY        reduce using rule 92 (verificarLlamada -> .)
    PLUS            reduce using rule 92 (verificarLlamada -> .)
    MINUS           reduce using rule 92 (verificarLlamada -> .)
    RPAREN          reduce using rule 92 (verificarLlamada -> .)
    COMMA           reduce using rule 92 (verificarLlamada -> .)
    GREATER_OR_EQUAL reduce using rule 92 (verificarLlamada -> .)
    LESS_OR_EQUAL   reduce using rule 92 (verificarLlamada -> .)
    GREATER_THAN    reduce using rule 92 (verificarLlamada -> .)
    LESS_THAN       reduce using rule 92 (verificarLlamada -> .)
    IS_EQUAL        reduce using rule 92 (verificarLlamada -> .)
    NOT_EQUAL       reduce using rule 92 (verificarLlamada -> .)
    AND             reduce using rule 92 (verificarLlamada -> .)
    OR              reduce using rule 92 (verificarLlamada -> .)
    SEMICOLON       reduce using rule 92 (verificarLlamada -> .)
    RSBRACKET       reduce using rule 92 (verificarLlamada -> .)
    TO              reduce using rule 92 (verificarLlamada -> .)
    DO              reduce using rule 92 (verificarLlamada -> .)

    verificarLlamada               shift and go to state 260

state 259

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom . DO gotoIf CUERPO sumarFrom terminarWhile

    DO              shift and go to state 261


state 260

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada . generarGosub
    (91) generarGosub -> .

    DIVIDE          reduce using rule 91 (generarGosub -> .)
    MULTIPLY        reduce using rule 91 (generarGosub -> .)
    PLUS            reduce using rule 91 (generarGosub -> .)
    MINUS           reduce using rule 91 (generarGosub -> .)
    RPAREN          reduce using rule 91 (generarGosub -> .)
    COMMA           reduce using rule 91 (generarGosub -> .)
    GREATER_OR_EQUAL reduce using rule 91 (generarGosub -> .)
    LESS_OR_EQUAL   reduce using rule 91 (generarGosub -> .)
    GREATER_THAN    reduce using rule 91 (generarGosub -> .)
    LESS_THAN       reduce using rule 91 (generarGosub -> .)
    IS_EQUAL        reduce using rule 91 (generarGosub -> .)
    NOT_EQUAL       reduce using rule 91 (generarGosub -> .)
    AND             reduce using rule 91 (generarGosub -> .)
    OR              reduce using rule 91 (generarGosub -> .)
    SEMICOLON       reduce using rule 91 (generarGosub -> .)
    RSBRACKET       reduce using rule 91 (generarGosub -> .)
    TO              reduce using rule 91 (generarGosub -> .)
    DO              reduce using rule 91 (generarGosub -> .)

    generarGosub                   shift and go to state 262

state 261

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO . gotoIf CUERPO sumarFrom terminarWhile
    (116) gotoIf -> .

    LBRACKET        reduce using rule 116 (gotoIf -> .)

    gotoIf                         shift and go to state 263

state 262

    (49) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .

    DIVIDE          reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    MULTIPLY        reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    PLUS            reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    MINUS           reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    RPAREN          reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    COMMA           reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    GREATER_OR_EQUAL reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    LESS_OR_EQUAL   reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    GREATER_THAN    reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    LESS_THAN       reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    IS_EQUAL        reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    NOT_EQUAL       reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    AND             reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    OR              reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    SEMICOLON       reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    RSBRACKET       reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    TO              reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    DO              reduce using rule 49 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)


state 263

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf . CUERPO sumarFrom terminarWhile
    (17) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 53

    CUERPO                         shift and go to state 264

state 264

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO . sumarFrom terminarWhile
    (107) sumarFrom -> .

    NAME            reduce using rule 107 (sumarFrom -> .)
    RETURN          reduce using rule 107 (sumarFrom -> .)
    READ            reduce using rule 107 (sumarFrom -> .)
    PRINT           reduce using rule 107 (sumarFrom -> .)
    IF              reduce using rule 107 (sumarFrom -> .)
    WHILE           reduce using rule 107 (sumarFrom -> .)
    FROM            reduce using rule 107 (sumarFrom -> .)
    RBRACKET        reduce using rule 107 (sumarFrom -> .)

    sumarFrom                      shift and go to state 265

state 265

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom . terminarWhile
    (119) terminarWhile -> .

    NAME            reduce using rule 119 (terminarWhile -> .)
    RETURN          reduce using rule 119 (terminarWhile -> .)
    READ            reduce using rule 119 (terminarWhile -> .)
    PRINT           reduce using rule 119 (terminarWhile -> .)
    IF              reduce using rule 119 (terminarWhile -> .)
    WHILE           reduce using rule 119 (terminarWhile -> .)
    FROM            reduce using rule 119 (terminarWhile -> .)
    RBRACKET        reduce using rule 119 (terminarWhile -> .)

    terminarWhile                  shift and go to state 266

state 266

    (61) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .

    NAME            reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    RETURN          reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    READ            reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    PRINT           reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    IF              reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    WHILE           reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    FROM            reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    RBRACKET        reduce using rule 61 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 127 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 194 resolved as shift
