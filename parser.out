Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo
Rule 2     F -> FUNCION F
Rule 3     F -> empty
Rule 4     VARS -> borrarListaVar VAR V1
Rule 5     V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
Rule 6     V2 -> COMMA VARIABLE agregarVarLista V2
Rule 7     V2 -> empty
Rule 8     V3 -> borrarListaVar V1
Rule 9     V3 -> empty
Rule 10    FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO
Rule 11    V4 -> VARS
Rule 12    V4 -> empty
Rule 13    PARAMS -> TIPO NAME P1
Rule 14    P1 -> COMMA PARAMS P1
Rule 15    P1 -> empty
Rule 16    CUERPO -> LBRACKET E RBRACKET
Rule 17    E -> E1
Rule 18    E -> empty
Rule 19    E1 -> ESTATUTO
Rule 20    E1 -> ESTATUTO E1
Rule 21    TIPO -> INT
Rule 22    TIPO -> FLOAT
Rule 23    TIPO -> CHAR
Rule 24    TIPO_FUNCION -> INT
Rule 25    TIPO_FUNCION -> FLOAT
Rule 26    TIPO_FUNCION -> CHAR
Rule 27    TIPO_FUNCION -> VOID
Rule 28    PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO
Rule 29    VARIABLE -> NAME E2
Rule 30    E2 -> LSBRACKET EXP RSBRACKET
Rule 31    E2 -> empty
Rule 32    ESTATUTO -> ASIGNACION
Rule 33    ESTATUTO -> LLAMADA
Rule 34    ESTATUTO -> RETORNO
Rule 35    ESTATUTO -> LECTURA
Rule 36    ESTATUTO -> ESCRITURA
Rule 37    ESTATUTO -> CONDICION
Rule 38    ESTATUTO -> CICLO_W
Rule 39    ESTATUTO -> CICLO_F
Rule 40    ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON
Rule 41    LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON
Rule 42    E1 -> EXP
Rule 43    E1 -> EXP COMMA E1
Rule 44    LLAMADAF -> NAME LPAREN E1 RPAREN
Rule 45    RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON
Rule 46    LECTURA -> READ LPAREN V3 RPAREN SEMICOLON
Rule 47    V3 -> VARIABLE COMMA V3
Rule 48    V3 -> VARIABLE
Rule 49    ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON
Rule 50    E2 -> S_EXP
Rule 51    E2 -> S_EXP COMMA E2
Rule 52    CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
Rule 53    ELSE1 -> ELSE CUERPO
Rule 54    ELSE1 -> empty
Rule 55    CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO
Rule 56    CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO
Rule 57    H_EXP -> T
Rule 58    T -> T_EXP
Rule 59    T -> T_EXP OR T
Rule 60    T_EXP -> G
Rule 61    G -> G_EXP
Rule 62    G -> G_EXP AND G
Rule 63    G_EXP -> EXP B
Rule 64    B -> GREATER_OR_EQUAL EXP
Rule 65    B -> LESS_OR_EQUAL EXP
Rule 66    B -> GREATER_THAN EXP
Rule 67    B -> LESS_THAN EXP
Rule 68    B -> IS_EQUAL EXP
Rule 69    B -> NOT_EQUAL EXP
Rule 70    B -> empty
Rule 71    S_EXP -> C_STRING
Rule 72    S_EXP -> EXP
Rule 73    EXP -> TERMINO T
Rule 74    T -> PLUS TERMINO T
Rule 75    T -> MINUS TERMINO T
Rule 76    T -> empty
Rule 77    TERMINO -> FACTOR F2
Rule 78    F2 -> DIVIDE FACTOR F2
Rule 79    F2 -> MULTIPLY FACTOR F2
Rule 80    F2 -> empty
Rule 81    FACTOR -> LPAREN H_EXP RPAREN
Rule 82    FACTOR -> C_INT
Rule 83    FACTOR -> C_FLOAT
Rule 84    FACTOR -> C_CHAR
Rule 85    FACTOR -> VARIABLE
Rule 86    FACTOR -> LLAMADAF
Rule 87    empty -> <empty>
Rule 88    crearFuncGlobal -> <empty>
Rule 89    crearFuncMain -> <empty>
Rule 90    agregarFunc -> <empty>
Rule 91    agregarVariables -> <empty>
Rule 92    printFunciones -> <empty>
Rule 93    printTodo -> <empty>
Rule 94    agregarVarLista -> <empty>
Rule 95    borrarListaVar -> <empty>

Terminals, with rules where they appear

AND                  : 62
CHAR                 : 23 26
COMMA                : 6 14 43 47 51
C_CHAR               : 84
C_FLOAT              : 83
C_INT                : 56 56 82
C_STRING             : 71
DIVIDE               : 78
DO                   : 55 56
ELSE                 : 53
EQUALS               : 40 56
FLOAT                : 22 25
FROM                 : 56
FUNC                 : 10
GREATER_OR_EQUAL     : 64
GREATER_THAN         : 66
IF                   : 52
INT                  : 21 24
IS_EQUAL             : 68
LBRACKET             : 16
LESS_OR_EQUAL        : 65
LESS_THAN            : 67
LPAREN               : 10 28 41 44 45 46 49 52 55 81
LSBRACKET            : 30
MAIN                 : 28
MINUS                : 75
MULTIPLY             : 79
NAME                 : 1 10 13 29 41 44 56
NOT_EQUAL            : 69
OR                   : 59
PLUS                 : 74
PRINT                : 49
PROGRAM              : 1
RBRACKET             : 16
READ                 : 46
RETURN               : 45
RPAREN               : 10 28 41 44 45 46 49 52 55 81
RSBRACKET            : 30
SEMICOLON            : 1 5 40 41 45 46 49
THEN                 : 52
TO                   : 56
VAR                  : 4
VOID                 : 27
WHILE                : 55
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 32
B                    : 63
CICLO_F              : 39
CICLO_W              : 38
CONDICION            : 37
CUERPO               : 10 28 52 53 55 56
E                    : 16
E1                   : 17 20 41 43 44
E2                   : 29 49 51
ELSE1                : 52
ESCRITURA            : 36
ESTATUTO             : 19 20
EXP                  : 30 40 42 43 45 63 64 65 66 67 68 69 72
F                    : 1 2
F2                   : 77 78 79
FACTOR               : 77 78 79
FUNCION              : 2
G                    : 60 62
G_EXP                : 61 62
H_EXP                : 52 55 81
LECTURA              : 35
LLAMADA              : 33
LLAMADAF             : 86
P1                   : 13 14
PARAMS               : 10 14
PRINCIPAL            : 1
PROGRAMA             : 0
RETORNO              : 34
S_EXP                : 50 51
T                    : 57 59 73 74 75
TERMINO              : 73 74 75
TIPO                 : 5 13
TIPO_FUNCION         : 10
T_EXP                : 58 59
V1                   : 4 8
V2                   : 5 6
V3                   : 5 46 47
V4                   : 10
VARIABLE             : 5 6 40 47 48 85
VARS                 : 1 11
agregarFunc          : 10
agregarVarLista      : 5 6
agregarVariables     : 5
borrarListaVar       : 4 8
crearFuncGlobal      : 1
crearFuncMain        : 28
empty                : 3 7 9 12 15 18 31 54 70 76 80
printFunciones       : 
printTodo            : 1

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo
    (88) crearFuncGlobal -> .

    PROGRAM         reduce using rule 88 (crearFuncGlobal -> .)

    PROGRAMA                       shift and go to state 1
    crearFuncGlobal                shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> crearFuncGlobal . PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo

    PROGRAM         shift and go to state 3


state 3

    (1) PROGRAMA -> crearFuncGlobal PROGRAM . NAME SEMICOLON VARS F PRINCIPAL printTodo

    NAME            shift and go to state 4


state 4

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME . SEMICOLON VARS F PRINCIPAL printTodo

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON . VARS F PRINCIPAL printTodo
    (4) VARS -> . borrarListaVar VAR V1
    (95) borrarListaVar -> .

    VAR             reduce using rule 95 (borrarListaVar -> .)

    VARS                           shift and go to state 6
    borrarListaVar                 shift and go to state 7

state 6

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS . F PRINCIPAL printTodo
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO
    (87) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 87 (empty -> .)

    F                              shift and go to state 8
    FUNCION                        shift and go to state 9
    empty                          shift and go to state 10

state 7

    (4) VARS -> borrarListaVar . VAR V1

    VAR             shift and go to state 12


state 8

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F . PRINCIPAL printTodo
    (28) PRINCIPAL -> . MAIN LPAREN crearFuncMain RPAREN CUERPO

    MAIN            shift and go to state 14

    PRINCIPAL                      shift and go to state 13

state 9

    (2) F -> FUNCION . F
    (2) F -> . FUNCION F
    (3) F -> . empty
    (10) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO
    (87) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 87 (empty -> .)

    FUNCION                        shift and go to state 9
    F                              shift and go to state 15
    empty                          shift and go to state 10

state 10

    (3) F -> empty .

    MAIN            reduce using rule 3 (F -> empty .)


state 11

    (10) FUNCION -> FUNC . TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO
    (24) TIPO_FUNCION -> . INT
    (25) TIPO_FUNCION -> . FLOAT
    (26) TIPO_FUNCION -> . CHAR
    (27) TIPO_FUNCION -> . VOID

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    VOID            shift and go to state 20

    TIPO_FUNCION                   shift and go to state 16

state 12

    (4) VARS -> borrarListaVar VAR . V1
    (5) V1 -> . TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V1                             shift and go to state 21
    TIPO                           shift and go to state 22

state 13

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL . printTodo
    (93) printTodo -> .

    $end            reduce using rule 93 (printTodo -> .)

    printTodo                      shift and go to state 26

state 14

    (28) PRINCIPAL -> MAIN . LPAREN crearFuncMain RPAREN CUERPO

    LPAREN          shift and go to state 27


state 15

    (2) F -> FUNCION F .

    MAIN            reduce using rule 2 (F -> FUNCION F .)


state 16

    (10) FUNCION -> FUNC TIPO_FUNCION . NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO

    NAME            shift and go to state 28


state 17

    (24) TIPO_FUNCION -> INT .

    NAME            reduce using rule 24 (TIPO_FUNCION -> INT .)


state 18

    (25) TIPO_FUNCION -> FLOAT .

    NAME            reduce using rule 25 (TIPO_FUNCION -> FLOAT .)


state 19

    (26) TIPO_FUNCION -> CHAR .

    NAME            reduce using rule 26 (TIPO_FUNCION -> CHAR .)


state 20

    (27) TIPO_FUNCION -> VOID .

    NAME            reduce using rule 27 (TIPO_FUNCION -> VOID .)


state 21

    (4) VARS -> borrarListaVar VAR V1 .

    FUNC            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    MAIN            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    LBRACKET        reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)


state 22

    (5) V1 -> TIPO . VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (29) VARIABLE -> . NAME E2

    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 29

state 23

    (21) TIPO -> INT .

    NAME            reduce using rule 21 (TIPO -> INT .)


state 24

    (22) TIPO -> FLOAT .

    NAME            reduce using rule 22 (TIPO -> FLOAT .)


state 25

    (23) TIPO -> CHAR .

    NAME            reduce using rule 23 (TIPO -> CHAR .)


state 26

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo .

    $end            reduce using rule 1 (PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON VARS F PRINCIPAL printTodo .)


state 27

    (28) PRINCIPAL -> MAIN LPAREN . crearFuncMain RPAREN CUERPO
    (89) crearFuncMain -> .

    RPAREN          reduce using rule 89 (crearFuncMain -> .)

    crearFuncMain                  shift and go to state 31

state 28

    (10) FUNCION -> FUNC TIPO_FUNCION NAME . agregarFunc LPAREN PARAMS RPAREN V4 CUERPO
    (90) agregarFunc -> .

    LPAREN          reduce using rule 90 (agregarFunc -> .)

    agregarFunc                    shift and go to state 32

state 29

    (5) V1 -> TIPO VARIABLE . agregarVarLista V2 SEMICOLON agregarVariables V3
    (94) agregarVarLista -> .

    COMMA           reduce using rule 94 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 94 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 33

state 30

    (29) VARIABLE -> NAME . E2
    (30) E2 -> . LSBRACKET EXP RSBRACKET
    (31) E2 -> . empty
    (50) E2 -> . S_EXP
    (51) E2 -> . S_EXP COMMA E2
    (87) empty -> .
    (71) S_EXP -> . C_STRING
    (72) S_EXP -> . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 31

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain . RPAREN CUERPO

    RPAREN          shift and go to state 49


state 32

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc . LPAREN PARAMS RPAREN V4 CUERPO

    LPAREN          shift and go to state 50


state 33

    (5) V1 -> TIPO VARIABLE agregarVarLista . V2 SEMICOLON agregarVariables V3
    (6) V2 -> . COMMA VARIABLE agregarVarLista V2
    (7) V2 -> . empty
    (87) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 87 (empty -> .)

    V2                             shift and go to state 51
    empty                          shift and go to state 53

state 34

    (29) VARIABLE -> NAME . E2
    (44) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (30) E2 -> . LSBRACKET EXP RSBRACKET
    (31) E2 -> . empty
    (50) E2 -> . S_EXP
    (51) E2 -> . S_EXP COMMA E2
    (87) empty -> .
    (71) S_EXP -> . C_STRING
    (72) S_EXP -> . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 54
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    C_STRING        shift and go to state 40
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 35

    (29) VARIABLE -> NAME E2 .

    COMMA           reduce using rule 29 (VARIABLE -> NAME E2 .)
    SEMICOLON       reduce using rule 29 (VARIABLE -> NAME E2 .)
    DIVIDE          reduce using rule 29 (VARIABLE -> NAME E2 .)
    MULTIPLY        reduce using rule 29 (VARIABLE -> NAME E2 .)
    PLUS            reduce using rule 29 (VARIABLE -> NAME E2 .)
    MINUS           reduce using rule 29 (VARIABLE -> NAME E2 .)
    LPAREN          reduce using rule 29 (VARIABLE -> NAME E2 .)
    C_INT           reduce using rule 29 (VARIABLE -> NAME E2 .)
    C_FLOAT         reduce using rule 29 (VARIABLE -> NAME E2 .)
    C_CHAR          reduce using rule 29 (VARIABLE -> NAME E2 .)
    NAME            reduce using rule 29 (VARIABLE -> NAME E2 .)
    FUNC            reduce using rule 29 (VARIABLE -> NAME E2 .)
    MAIN            reduce using rule 29 (VARIABLE -> NAME E2 .)
    LBRACKET        reduce using rule 29 (VARIABLE -> NAME E2 .)
    RPAREN          reduce using rule 29 (VARIABLE -> NAME E2 .)
    RSBRACKET       reduce using rule 29 (VARIABLE -> NAME E2 .)
    GREATER_OR_EQUAL reduce using rule 29 (VARIABLE -> NAME E2 .)
    LESS_OR_EQUAL   reduce using rule 29 (VARIABLE -> NAME E2 .)
    GREATER_THAN    reduce using rule 29 (VARIABLE -> NAME E2 .)
    LESS_THAN       reduce using rule 29 (VARIABLE -> NAME E2 .)
    IS_EQUAL        reduce using rule 29 (VARIABLE -> NAME E2 .)
    NOT_EQUAL       reduce using rule 29 (VARIABLE -> NAME E2 .)
    AND             reduce using rule 29 (VARIABLE -> NAME E2 .)
    OR              reduce using rule 29 (VARIABLE -> NAME E2 .)
    EQUALS          reduce using rule 29 (VARIABLE -> NAME E2 .)
    RBRACKET        reduce using rule 29 (VARIABLE -> NAME E2 .)


state 36

    (30) E2 -> LSBRACKET . EXP RSBRACKET
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 55
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 37

    (72) S_EXP -> EXP .

    COMMA           reduce using rule 72 (S_EXP -> EXP .)
    SEMICOLON       reduce using rule 72 (S_EXP -> EXP .)
    DIVIDE          reduce using rule 72 (S_EXP -> EXP .)
    MULTIPLY        reduce using rule 72 (S_EXP -> EXP .)
    PLUS            reduce using rule 72 (S_EXP -> EXP .)
    MINUS           reduce using rule 72 (S_EXP -> EXP .)
    LPAREN          reduce using rule 72 (S_EXP -> EXP .)
    C_INT           reduce using rule 72 (S_EXP -> EXP .)
    C_FLOAT         reduce using rule 72 (S_EXP -> EXP .)
    C_CHAR          reduce using rule 72 (S_EXP -> EXP .)
    NAME            reduce using rule 72 (S_EXP -> EXP .)
    FUNC            reduce using rule 72 (S_EXP -> EXP .)
    MAIN            reduce using rule 72 (S_EXP -> EXP .)
    LBRACKET        reduce using rule 72 (S_EXP -> EXP .)
    RPAREN          reduce using rule 72 (S_EXP -> EXP .)
    RSBRACKET       reduce using rule 72 (S_EXP -> EXP .)
    GREATER_OR_EQUAL reduce using rule 72 (S_EXP -> EXP .)
    LESS_OR_EQUAL   reduce using rule 72 (S_EXP -> EXP .)
    GREATER_THAN    reduce using rule 72 (S_EXP -> EXP .)
    LESS_THAN       reduce using rule 72 (S_EXP -> EXP .)
    IS_EQUAL        reduce using rule 72 (S_EXP -> EXP .)
    NOT_EQUAL       reduce using rule 72 (S_EXP -> EXP .)
    AND             reduce using rule 72 (S_EXP -> EXP .)
    OR              reduce using rule 72 (S_EXP -> EXP .)
    EQUALS          reduce using rule 72 (S_EXP -> EXP .)
    RBRACKET        reduce using rule 72 (S_EXP -> EXP .)


state 38

    (31) E2 -> empty .

    COMMA           reduce using rule 31 (E2 -> empty .)
    SEMICOLON       reduce using rule 31 (E2 -> empty .)
    DIVIDE          reduce using rule 31 (E2 -> empty .)
    MULTIPLY        reduce using rule 31 (E2 -> empty .)
    PLUS            reduce using rule 31 (E2 -> empty .)
    MINUS           reduce using rule 31 (E2 -> empty .)
    LPAREN          reduce using rule 31 (E2 -> empty .)
    C_INT           reduce using rule 31 (E2 -> empty .)
    C_FLOAT         reduce using rule 31 (E2 -> empty .)
    C_CHAR          reduce using rule 31 (E2 -> empty .)
    NAME            reduce using rule 31 (E2 -> empty .)
    FUNC            reduce using rule 31 (E2 -> empty .)
    MAIN            reduce using rule 31 (E2 -> empty .)
    LBRACKET        reduce using rule 31 (E2 -> empty .)
    RPAREN          reduce using rule 31 (E2 -> empty .)
    RSBRACKET       reduce using rule 31 (E2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 31 (E2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 31 (E2 -> empty .)
    GREATER_THAN    reduce using rule 31 (E2 -> empty .)
    LESS_THAN       reduce using rule 31 (E2 -> empty .)
    IS_EQUAL        reduce using rule 31 (E2 -> empty .)
    NOT_EQUAL       reduce using rule 31 (E2 -> empty .)
    AND             reduce using rule 31 (E2 -> empty .)
    OR              reduce using rule 31 (E2 -> empty .)
    EQUALS          reduce using rule 31 (E2 -> empty .)
    RBRACKET        reduce using rule 31 (E2 -> empty .)


state 39

    (50) E2 -> S_EXP .
    (51) E2 -> S_EXP . COMMA E2

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 50 (E2 -> S_EXP .)
    DIVIDE          reduce using rule 50 (E2 -> S_EXP .)
    MULTIPLY        reduce using rule 50 (E2 -> S_EXP .)
    PLUS            reduce using rule 50 (E2 -> S_EXP .)
    MINUS           reduce using rule 50 (E2 -> S_EXP .)
    LPAREN          reduce using rule 50 (E2 -> S_EXP .)
    C_INT           reduce using rule 50 (E2 -> S_EXP .)
    C_FLOAT         reduce using rule 50 (E2 -> S_EXP .)
    C_CHAR          reduce using rule 50 (E2 -> S_EXP .)
    NAME            reduce using rule 50 (E2 -> S_EXP .)
    FUNC            reduce using rule 50 (E2 -> S_EXP .)
    MAIN            reduce using rule 50 (E2 -> S_EXP .)
    LBRACKET        reduce using rule 50 (E2 -> S_EXP .)
    RPAREN          reduce using rule 50 (E2 -> S_EXP .)
    RSBRACKET       reduce using rule 50 (E2 -> S_EXP .)
    GREATER_OR_EQUAL reduce using rule 50 (E2 -> S_EXP .)
    LESS_OR_EQUAL   reduce using rule 50 (E2 -> S_EXP .)
    GREATER_THAN    reduce using rule 50 (E2 -> S_EXP .)
    LESS_THAN       reduce using rule 50 (E2 -> S_EXP .)
    IS_EQUAL        reduce using rule 50 (E2 -> S_EXP .)
    NOT_EQUAL       reduce using rule 50 (E2 -> S_EXP .)
    AND             reduce using rule 50 (E2 -> S_EXP .)
    OR              reduce using rule 50 (E2 -> S_EXP .)
    EQUALS          reduce using rule 50 (E2 -> S_EXP .)
    RBRACKET        reduce using rule 50 (E2 -> S_EXP .)
    COMMA           shift and go to state 56

  ! COMMA           [ reduce using rule 50 (E2 -> S_EXP .) ]


state 40

    (71) S_EXP -> C_STRING .

    COMMA           reduce using rule 71 (S_EXP -> C_STRING .)
    SEMICOLON       reduce using rule 71 (S_EXP -> C_STRING .)
    DIVIDE          reduce using rule 71 (S_EXP -> C_STRING .)
    MULTIPLY        reduce using rule 71 (S_EXP -> C_STRING .)
    PLUS            reduce using rule 71 (S_EXP -> C_STRING .)
    MINUS           reduce using rule 71 (S_EXP -> C_STRING .)
    LPAREN          reduce using rule 71 (S_EXP -> C_STRING .)
    C_INT           reduce using rule 71 (S_EXP -> C_STRING .)
    C_FLOAT         reduce using rule 71 (S_EXP -> C_STRING .)
    C_CHAR          reduce using rule 71 (S_EXP -> C_STRING .)
    NAME            reduce using rule 71 (S_EXP -> C_STRING .)
    FUNC            reduce using rule 71 (S_EXP -> C_STRING .)
    MAIN            reduce using rule 71 (S_EXP -> C_STRING .)
    LBRACKET        reduce using rule 71 (S_EXP -> C_STRING .)
    RPAREN          reduce using rule 71 (S_EXP -> C_STRING .)
    RSBRACKET       reduce using rule 71 (S_EXP -> C_STRING .)
    GREATER_OR_EQUAL reduce using rule 71 (S_EXP -> C_STRING .)
    LESS_OR_EQUAL   reduce using rule 71 (S_EXP -> C_STRING .)
    GREATER_THAN    reduce using rule 71 (S_EXP -> C_STRING .)
    LESS_THAN       reduce using rule 71 (S_EXP -> C_STRING .)
    IS_EQUAL        reduce using rule 71 (S_EXP -> C_STRING .)
    NOT_EQUAL       reduce using rule 71 (S_EXP -> C_STRING .)
    AND             reduce using rule 71 (S_EXP -> C_STRING .)
    OR              reduce using rule 71 (S_EXP -> C_STRING .)
    EQUALS          reduce using rule 71 (S_EXP -> C_STRING .)
    RBRACKET        reduce using rule 71 (S_EXP -> C_STRING .)


state 41

    (73) EXP -> TERMINO . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 87 (empty -> .) ]
  ! MINUS           [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 57
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 42

    (77) TERMINO -> FACTOR . F2
    (78) F2 -> . DIVIDE FACTOR F2
    (79) F2 -> . MULTIPLY FACTOR F2
    (80) F2 -> . empty
    (87) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    LPAREN          reduce using rule 87 (empty -> .)
    C_INT           reduce using rule 87 (empty -> .)
    C_FLOAT         reduce using rule 87 (empty -> .)
    C_CHAR          reduce using rule 87 (empty -> .)
    NAME            reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)

  ! DIVIDE          [ reduce using rule 87 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 87 (empty -> .) ]

    F2                             shift and go to state 65
    empty                          shift and go to state 68

state 43

    (81) FACTOR -> LPAREN . H_EXP RPAREN
    (57) H_EXP -> . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 69
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 44

    (82) FACTOR -> C_INT .

    COMMA           reduce using rule 82 (FACTOR -> C_INT .)
    SEMICOLON       reduce using rule 82 (FACTOR -> C_INT .)
    DIVIDE          reduce using rule 82 (FACTOR -> C_INT .)
    MULTIPLY        reduce using rule 82 (FACTOR -> C_INT .)
    PLUS            reduce using rule 82 (FACTOR -> C_INT .)
    MINUS           reduce using rule 82 (FACTOR -> C_INT .)
    LPAREN          reduce using rule 82 (FACTOR -> C_INT .)
    C_INT           reduce using rule 82 (FACTOR -> C_INT .)
    C_FLOAT         reduce using rule 82 (FACTOR -> C_INT .)
    C_CHAR          reduce using rule 82 (FACTOR -> C_INT .)
    NAME            reduce using rule 82 (FACTOR -> C_INT .)
    FUNC            reduce using rule 82 (FACTOR -> C_INT .)
    MAIN            reduce using rule 82 (FACTOR -> C_INT .)
    LBRACKET        reduce using rule 82 (FACTOR -> C_INT .)
    RPAREN          reduce using rule 82 (FACTOR -> C_INT .)
    RSBRACKET       reduce using rule 82 (FACTOR -> C_INT .)
    GREATER_OR_EQUAL reduce using rule 82 (FACTOR -> C_INT .)
    LESS_OR_EQUAL   reduce using rule 82 (FACTOR -> C_INT .)
    GREATER_THAN    reduce using rule 82 (FACTOR -> C_INT .)
    LESS_THAN       reduce using rule 82 (FACTOR -> C_INT .)
    IS_EQUAL        reduce using rule 82 (FACTOR -> C_INT .)
    NOT_EQUAL       reduce using rule 82 (FACTOR -> C_INT .)
    AND             reduce using rule 82 (FACTOR -> C_INT .)
    OR              reduce using rule 82 (FACTOR -> C_INT .)
    EQUALS          reduce using rule 82 (FACTOR -> C_INT .)
    RBRACKET        reduce using rule 82 (FACTOR -> C_INT .)


state 45

    (83) FACTOR -> C_FLOAT .

    COMMA           reduce using rule 83 (FACTOR -> C_FLOAT .)
    SEMICOLON       reduce using rule 83 (FACTOR -> C_FLOAT .)
    DIVIDE          reduce using rule 83 (FACTOR -> C_FLOAT .)
    MULTIPLY        reduce using rule 83 (FACTOR -> C_FLOAT .)
    PLUS            reduce using rule 83 (FACTOR -> C_FLOAT .)
    MINUS           reduce using rule 83 (FACTOR -> C_FLOAT .)
    LPAREN          reduce using rule 83 (FACTOR -> C_FLOAT .)
    C_INT           reduce using rule 83 (FACTOR -> C_FLOAT .)
    C_FLOAT         reduce using rule 83 (FACTOR -> C_FLOAT .)
    C_CHAR          reduce using rule 83 (FACTOR -> C_FLOAT .)
    NAME            reduce using rule 83 (FACTOR -> C_FLOAT .)
    FUNC            reduce using rule 83 (FACTOR -> C_FLOAT .)
    MAIN            reduce using rule 83 (FACTOR -> C_FLOAT .)
    LBRACKET        reduce using rule 83 (FACTOR -> C_FLOAT .)
    RPAREN          reduce using rule 83 (FACTOR -> C_FLOAT .)
    RSBRACKET       reduce using rule 83 (FACTOR -> C_FLOAT .)
    GREATER_OR_EQUAL reduce using rule 83 (FACTOR -> C_FLOAT .)
    LESS_OR_EQUAL   reduce using rule 83 (FACTOR -> C_FLOAT .)
    GREATER_THAN    reduce using rule 83 (FACTOR -> C_FLOAT .)
    LESS_THAN       reduce using rule 83 (FACTOR -> C_FLOAT .)
    IS_EQUAL        reduce using rule 83 (FACTOR -> C_FLOAT .)
    NOT_EQUAL       reduce using rule 83 (FACTOR -> C_FLOAT .)
    AND             reduce using rule 83 (FACTOR -> C_FLOAT .)
    OR              reduce using rule 83 (FACTOR -> C_FLOAT .)
    EQUALS          reduce using rule 83 (FACTOR -> C_FLOAT .)
    RBRACKET        reduce using rule 83 (FACTOR -> C_FLOAT .)


state 46

    (84) FACTOR -> C_CHAR .

    COMMA           reduce using rule 84 (FACTOR -> C_CHAR .)
    SEMICOLON       reduce using rule 84 (FACTOR -> C_CHAR .)
    DIVIDE          reduce using rule 84 (FACTOR -> C_CHAR .)
    MULTIPLY        reduce using rule 84 (FACTOR -> C_CHAR .)
    PLUS            reduce using rule 84 (FACTOR -> C_CHAR .)
    MINUS           reduce using rule 84 (FACTOR -> C_CHAR .)
    LPAREN          reduce using rule 84 (FACTOR -> C_CHAR .)
    C_INT           reduce using rule 84 (FACTOR -> C_CHAR .)
    C_FLOAT         reduce using rule 84 (FACTOR -> C_CHAR .)
    C_CHAR          reduce using rule 84 (FACTOR -> C_CHAR .)
    NAME            reduce using rule 84 (FACTOR -> C_CHAR .)
    FUNC            reduce using rule 84 (FACTOR -> C_CHAR .)
    MAIN            reduce using rule 84 (FACTOR -> C_CHAR .)
    LBRACKET        reduce using rule 84 (FACTOR -> C_CHAR .)
    RPAREN          reduce using rule 84 (FACTOR -> C_CHAR .)
    RSBRACKET       reduce using rule 84 (FACTOR -> C_CHAR .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> C_CHAR .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> C_CHAR .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> C_CHAR .)
    LESS_THAN       reduce using rule 84 (FACTOR -> C_CHAR .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> C_CHAR .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> C_CHAR .)
    AND             reduce using rule 84 (FACTOR -> C_CHAR .)
    OR              reduce using rule 84 (FACTOR -> C_CHAR .)
    EQUALS          reduce using rule 84 (FACTOR -> C_CHAR .)
    RBRACKET        reduce using rule 84 (FACTOR -> C_CHAR .)


state 47

    (85) FACTOR -> VARIABLE .

    COMMA           reduce using rule 85 (FACTOR -> VARIABLE .)
    SEMICOLON       reduce using rule 85 (FACTOR -> VARIABLE .)
    DIVIDE          reduce using rule 85 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 85 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 85 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 85 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 85 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 85 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 85 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 85 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 85 (FACTOR -> VARIABLE .)
    FUNC            reduce using rule 85 (FACTOR -> VARIABLE .)
    MAIN            reduce using rule 85 (FACTOR -> VARIABLE .)
    LBRACKET        reduce using rule 85 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 85 (FACTOR -> VARIABLE .)
    RSBRACKET       reduce using rule 85 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 85 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> VARIABLE .)
    AND             reduce using rule 85 (FACTOR -> VARIABLE .)
    OR              reduce using rule 85 (FACTOR -> VARIABLE .)
    EQUALS          reduce using rule 85 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 85 (FACTOR -> VARIABLE .)


state 48

    (86) FACTOR -> LLAMADAF .

    COMMA           reduce using rule 86 (FACTOR -> LLAMADAF .)
    SEMICOLON       reduce using rule 86 (FACTOR -> LLAMADAF .)
    DIVIDE          reduce using rule 86 (FACTOR -> LLAMADAF .)
    MULTIPLY        reduce using rule 86 (FACTOR -> LLAMADAF .)
    PLUS            reduce using rule 86 (FACTOR -> LLAMADAF .)
    MINUS           reduce using rule 86 (FACTOR -> LLAMADAF .)
    LPAREN          reduce using rule 86 (FACTOR -> LLAMADAF .)
    C_INT           reduce using rule 86 (FACTOR -> LLAMADAF .)
    C_FLOAT         reduce using rule 86 (FACTOR -> LLAMADAF .)
    C_CHAR          reduce using rule 86 (FACTOR -> LLAMADAF .)
    NAME            reduce using rule 86 (FACTOR -> LLAMADAF .)
    FUNC            reduce using rule 86 (FACTOR -> LLAMADAF .)
    MAIN            reduce using rule 86 (FACTOR -> LLAMADAF .)
    LBRACKET        reduce using rule 86 (FACTOR -> LLAMADAF .)
    RPAREN          reduce using rule 86 (FACTOR -> LLAMADAF .)
    RSBRACKET       reduce using rule 86 (FACTOR -> LLAMADAF .)
    GREATER_OR_EQUAL reduce using rule 86 (FACTOR -> LLAMADAF .)
    LESS_OR_EQUAL   reduce using rule 86 (FACTOR -> LLAMADAF .)
    GREATER_THAN    reduce using rule 86 (FACTOR -> LLAMADAF .)
    LESS_THAN       reduce using rule 86 (FACTOR -> LLAMADAF .)
    IS_EQUAL        reduce using rule 86 (FACTOR -> LLAMADAF .)
    NOT_EQUAL       reduce using rule 86 (FACTOR -> LLAMADAF .)
    AND             reduce using rule 86 (FACTOR -> LLAMADAF .)
    OR              reduce using rule 86 (FACTOR -> LLAMADAF .)
    EQUALS          reduce using rule 86 (FACTOR -> LLAMADAF .)
    RBRACKET        reduce using rule 86 (FACTOR -> LLAMADAF .)


state 49

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 71

state 50

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN . PARAMS RPAREN V4 CUERPO
    (13) PARAMS -> . TIPO NAME P1
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 73
    TIPO                           shift and go to state 74

state 51

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 . SEMICOLON agregarVariables V3

    SEMICOLON       shift and go to state 75


state 52

    (6) V2 -> COMMA . VARIABLE agregarVarLista V2
    (29) VARIABLE -> . NAME E2

    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 76

state 53

    (7) V2 -> empty .

    SEMICOLON       reduce using rule 7 (V2 -> empty .)


state 54

    (44) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (81) FACTOR -> LPAREN . H_EXP RPAREN
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (42) E1 -> . EXP
    (43) E1 -> . EXP COMMA E1
    (57) H_EXP -> . T
    (32) ESTATUTO -> . ASIGNACION
    (33) ESTATUTO -> . LLAMADA
    (34) ESTATUTO -> . RETORNO
    (35) ESTATUTO -> . LECTURA
    (36) ESTATUTO -> . ESCRITURA
    (37) ESTATUTO -> . CONDICION
    (38) ESTATUTO -> . CICLO_W
    (39) ESTATUTO -> . CICLO_F
    (73) EXP -> . TERMINO T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (40) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (41) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (45) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (46) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (49) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (52) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (55) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (56) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (77) TERMINO -> . FACTOR F2
    (60) T_EXP -> . G
    (87) empty -> .
    (29) VARIABLE -> . NAME E2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (63) G_EXP -> . EXP B

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    NAME            shift and go to state 77
    RETURN          shift and go to state 90
    READ            shift and go to state 91
    PRINT           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    FROM            shift and go to state 95
    RPAREN          reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E1                             shift and go to state 78
    H_EXP                          shift and go to state 69
    ESTATUTO                       shift and go to state 79
    EXP                            shift and go to state 80
    T                              shift and go to state 70
    ASIGNACION                     shift and go to state 81
    LLAMADA                        shift and go to state 82
    RETORNO                        shift and go to state 83
    LECTURA                        shift and go to state 84
    ESCRITURA                      shift and go to state 85
    CONDICION                      shift and go to state 86
    CICLO_W                        shift and go to state 87
    CICLO_F                        shift and go to state 88
    TERMINO                        shift and go to state 41
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    VARIABLE                       shift and go to state 89
    FACTOR                         shift and go to state 42
    G                              shift and go to state 62
    LLAMADAF                       shift and go to state 48
    G_EXP                          shift and go to state 63

state 55

    (30) E2 -> LSBRACKET EXP . RSBRACKET

    RSBRACKET       shift and go to state 96


state 56

    (51) E2 -> S_EXP COMMA . E2
    (30) E2 -> . LSBRACKET EXP RSBRACKET
    (31) E2 -> . empty
    (50) E2 -> . S_EXP
    (51) E2 -> . S_EXP COMMA E2
    (87) empty -> .
    (71) S_EXP -> . C_STRING
    (72) S_EXP -> . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LSBRACKET       shift and go to state 36
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    S_EXP                          shift and go to state 39
    E2                             shift and go to state 97
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 57

    (73) EXP -> TERMINO T .

    COMMA           reduce using rule 73 (EXP -> TERMINO T .)
    SEMICOLON       reduce using rule 73 (EXP -> TERMINO T .)
    DIVIDE          reduce using rule 73 (EXP -> TERMINO T .)
    MULTIPLY        reduce using rule 73 (EXP -> TERMINO T .)
    PLUS            reduce using rule 73 (EXP -> TERMINO T .)
    MINUS           reduce using rule 73 (EXP -> TERMINO T .)
    LPAREN          reduce using rule 73 (EXP -> TERMINO T .)
    C_INT           reduce using rule 73 (EXP -> TERMINO T .)
    C_FLOAT         reduce using rule 73 (EXP -> TERMINO T .)
    C_CHAR          reduce using rule 73 (EXP -> TERMINO T .)
    NAME            reduce using rule 73 (EXP -> TERMINO T .)
    FUNC            reduce using rule 73 (EXP -> TERMINO T .)
    MAIN            reduce using rule 73 (EXP -> TERMINO T .)
    LBRACKET        reduce using rule 73 (EXP -> TERMINO T .)
    RPAREN          reduce using rule 73 (EXP -> TERMINO T .)
    RSBRACKET       reduce using rule 73 (EXP -> TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 73 (EXP -> TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 73 (EXP -> TERMINO T .)
    GREATER_THAN    reduce using rule 73 (EXP -> TERMINO T .)
    LESS_THAN       reduce using rule 73 (EXP -> TERMINO T .)
    IS_EQUAL        reduce using rule 73 (EXP -> TERMINO T .)
    NOT_EQUAL       reduce using rule 73 (EXP -> TERMINO T .)
    AND             reduce using rule 73 (EXP -> TERMINO T .)
    OR              reduce using rule 73 (EXP -> TERMINO T .)
    EQUALS          reduce using rule 73 (EXP -> TERMINO T .)
    RBRACKET        reduce using rule 73 (EXP -> TERMINO T .)


state 58

    (58) T -> T_EXP .
    (59) T -> T_EXP . OR T

  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 58 (T -> T_EXP .)
    SEMICOLON       reduce using rule 58 (T -> T_EXP .)
    DIVIDE          reduce using rule 58 (T -> T_EXP .)
    MULTIPLY        reduce using rule 58 (T -> T_EXP .)
    PLUS            reduce using rule 58 (T -> T_EXP .)
    MINUS           reduce using rule 58 (T -> T_EXP .)
    LPAREN          reduce using rule 58 (T -> T_EXP .)
    C_INT           reduce using rule 58 (T -> T_EXP .)
    C_FLOAT         reduce using rule 58 (T -> T_EXP .)
    C_CHAR          reduce using rule 58 (T -> T_EXP .)
    NAME            reduce using rule 58 (T -> T_EXP .)
    FUNC            reduce using rule 58 (T -> T_EXP .)
    MAIN            reduce using rule 58 (T -> T_EXP .)
    LBRACKET        reduce using rule 58 (T -> T_EXP .)
    RPAREN          reduce using rule 58 (T -> T_EXP .)
    RSBRACKET       reduce using rule 58 (T -> T_EXP .)
    GREATER_OR_EQUAL reduce using rule 58 (T -> T_EXP .)
    LESS_OR_EQUAL   reduce using rule 58 (T -> T_EXP .)
    GREATER_THAN    reduce using rule 58 (T -> T_EXP .)
    LESS_THAN       reduce using rule 58 (T -> T_EXP .)
    IS_EQUAL        reduce using rule 58 (T -> T_EXP .)
    NOT_EQUAL       reduce using rule 58 (T -> T_EXP .)
    AND             reduce using rule 58 (T -> T_EXP .)
    EQUALS          reduce using rule 58 (T -> T_EXP .)
    RBRACKET        reduce using rule 58 (T -> T_EXP .)
    OR              shift and go to state 98

  ! OR              [ reduce using rule 58 (T -> T_EXP .) ]


state 59

    (74) T -> PLUS . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    TERMINO                        shift and go to state 99
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 60

    (75) T -> MINUS . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    TERMINO                        shift and go to state 100
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 61

    (76) T -> empty .

    COMMA           reduce using rule 76 (T -> empty .)
    SEMICOLON       reduce using rule 76 (T -> empty .)
    DIVIDE          reduce using rule 76 (T -> empty .)
    MULTIPLY        reduce using rule 76 (T -> empty .)
    PLUS            reduce using rule 76 (T -> empty .)
    MINUS           reduce using rule 76 (T -> empty .)
    LPAREN          reduce using rule 76 (T -> empty .)
    C_INT           reduce using rule 76 (T -> empty .)
    C_FLOAT         reduce using rule 76 (T -> empty .)
    C_CHAR          reduce using rule 76 (T -> empty .)
    NAME            reduce using rule 76 (T -> empty .)
    FUNC            reduce using rule 76 (T -> empty .)
    MAIN            reduce using rule 76 (T -> empty .)
    LBRACKET        reduce using rule 76 (T -> empty .)
    RPAREN          reduce using rule 76 (T -> empty .)
    RSBRACKET       reduce using rule 76 (T -> empty .)
    GREATER_OR_EQUAL reduce using rule 76 (T -> empty .)
    LESS_OR_EQUAL   reduce using rule 76 (T -> empty .)
    GREATER_THAN    reduce using rule 76 (T -> empty .)
    LESS_THAN       reduce using rule 76 (T -> empty .)
    IS_EQUAL        reduce using rule 76 (T -> empty .)
    NOT_EQUAL       reduce using rule 76 (T -> empty .)
    AND             reduce using rule 76 (T -> empty .)
    OR              reduce using rule 76 (T -> empty .)
    EQUALS          reduce using rule 76 (T -> empty .)
    RBRACKET        reduce using rule 76 (T -> empty .)


state 62

    (60) T_EXP -> G .

    COMMA           reduce using rule 60 (T_EXP -> G .)
    SEMICOLON       reduce using rule 60 (T_EXP -> G .)
    DIVIDE          reduce using rule 60 (T_EXP -> G .)
    MULTIPLY        reduce using rule 60 (T_EXP -> G .)
    PLUS            reduce using rule 60 (T_EXP -> G .)
    MINUS           reduce using rule 60 (T_EXP -> G .)
    LPAREN          reduce using rule 60 (T_EXP -> G .)
    C_INT           reduce using rule 60 (T_EXP -> G .)
    C_FLOAT         reduce using rule 60 (T_EXP -> G .)
    C_CHAR          reduce using rule 60 (T_EXP -> G .)
    NAME            reduce using rule 60 (T_EXP -> G .)
    FUNC            reduce using rule 60 (T_EXP -> G .)
    MAIN            reduce using rule 60 (T_EXP -> G .)
    LBRACKET        reduce using rule 60 (T_EXP -> G .)
    RPAREN          reduce using rule 60 (T_EXP -> G .)
    RSBRACKET       reduce using rule 60 (T_EXP -> G .)
    GREATER_OR_EQUAL reduce using rule 60 (T_EXP -> G .)
    LESS_OR_EQUAL   reduce using rule 60 (T_EXP -> G .)
    GREATER_THAN    reduce using rule 60 (T_EXP -> G .)
    LESS_THAN       reduce using rule 60 (T_EXP -> G .)
    IS_EQUAL        reduce using rule 60 (T_EXP -> G .)
    NOT_EQUAL       reduce using rule 60 (T_EXP -> G .)
    AND             reduce using rule 60 (T_EXP -> G .)
    OR              reduce using rule 60 (T_EXP -> G .)
    EQUALS          reduce using rule 60 (T_EXP -> G .)
    RBRACKET        reduce using rule 60 (T_EXP -> G .)


state 63

    (61) G -> G_EXP .
    (62) G -> G_EXP . AND G

  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 61 (G -> G_EXP .)
    SEMICOLON       reduce using rule 61 (G -> G_EXP .)
    DIVIDE          reduce using rule 61 (G -> G_EXP .)
    MULTIPLY        reduce using rule 61 (G -> G_EXP .)
    PLUS            reduce using rule 61 (G -> G_EXP .)
    MINUS           reduce using rule 61 (G -> G_EXP .)
    LPAREN          reduce using rule 61 (G -> G_EXP .)
    C_INT           reduce using rule 61 (G -> G_EXP .)
    C_FLOAT         reduce using rule 61 (G -> G_EXP .)
    C_CHAR          reduce using rule 61 (G -> G_EXP .)
    NAME            reduce using rule 61 (G -> G_EXP .)
    FUNC            reduce using rule 61 (G -> G_EXP .)
    MAIN            reduce using rule 61 (G -> G_EXP .)
    LBRACKET        reduce using rule 61 (G -> G_EXP .)
    RPAREN          reduce using rule 61 (G -> G_EXP .)
    RSBRACKET       reduce using rule 61 (G -> G_EXP .)
    GREATER_OR_EQUAL reduce using rule 61 (G -> G_EXP .)
    LESS_OR_EQUAL   reduce using rule 61 (G -> G_EXP .)
    GREATER_THAN    reduce using rule 61 (G -> G_EXP .)
    LESS_THAN       reduce using rule 61 (G -> G_EXP .)
    IS_EQUAL        reduce using rule 61 (G -> G_EXP .)
    NOT_EQUAL       reduce using rule 61 (G -> G_EXP .)
    OR              reduce using rule 61 (G -> G_EXP .)
    EQUALS          reduce using rule 61 (G -> G_EXP .)
    RBRACKET        reduce using rule 61 (G -> G_EXP .)
    AND             shift and go to state 101

  ! AND             [ reduce using rule 61 (G -> G_EXP .) ]


state 64

    (63) G_EXP -> EXP . B
    (64) B -> . GREATER_OR_EQUAL EXP
    (65) B -> . LESS_OR_EQUAL EXP
    (66) B -> . GREATER_THAN EXP
    (67) B -> . LESS_THAN EXP
    (68) B -> . IS_EQUAL EXP
    (69) B -> . NOT_EQUAL EXP
    (70) B -> . empty
    (87) empty -> .

  ! shift/reduce conflict for GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    GREATER_OR_EQUAL shift and go to state 103
    LESS_OR_EQUAL   shift and go to state 104
    GREATER_THAN    shift and go to state 105
    LESS_THAN       shift and go to state 106
    IS_EQUAL        shift and go to state 107
    NOT_EQUAL       shift and go to state 108
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    LPAREN          reduce using rule 87 (empty -> .)
    C_INT           reduce using rule 87 (empty -> .)
    C_FLOAT         reduce using rule 87 (empty -> .)
    C_CHAR          reduce using rule 87 (empty -> .)
    NAME            reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)

  ! GREATER_OR_EQUAL [ reduce using rule 87 (empty -> .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 87 (empty -> .) ]
  ! GREATER_THAN    [ reduce using rule 87 (empty -> .) ]
  ! LESS_THAN       [ reduce using rule 87 (empty -> .) ]
  ! IS_EQUAL        [ reduce using rule 87 (empty -> .) ]
  ! NOT_EQUAL       [ reduce using rule 87 (empty -> .) ]

    B                              shift and go to state 102
    empty                          shift and go to state 109

state 65

    (77) TERMINO -> FACTOR F2 .

    COMMA           reduce using rule 77 (TERMINO -> FACTOR F2 .)
    SEMICOLON       reduce using rule 77 (TERMINO -> FACTOR F2 .)
    DIVIDE          reduce using rule 77 (TERMINO -> FACTOR F2 .)
    MULTIPLY        reduce using rule 77 (TERMINO -> FACTOR F2 .)
    PLUS            reduce using rule 77 (TERMINO -> FACTOR F2 .)
    MINUS           reduce using rule 77 (TERMINO -> FACTOR F2 .)
    LPAREN          reduce using rule 77 (TERMINO -> FACTOR F2 .)
    C_INT           reduce using rule 77 (TERMINO -> FACTOR F2 .)
    C_FLOAT         reduce using rule 77 (TERMINO -> FACTOR F2 .)
    C_CHAR          reduce using rule 77 (TERMINO -> FACTOR F2 .)
    NAME            reduce using rule 77 (TERMINO -> FACTOR F2 .)
    FUNC            reduce using rule 77 (TERMINO -> FACTOR F2 .)
    MAIN            reduce using rule 77 (TERMINO -> FACTOR F2 .)
    LBRACKET        reduce using rule 77 (TERMINO -> FACTOR F2 .)
    RPAREN          reduce using rule 77 (TERMINO -> FACTOR F2 .)
    RSBRACKET       reduce using rule 77 (TERMINO -> FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 77 (TERMINO -> FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 77 (TERMINO -> FACTOR F2 .)
    GREATER_THAN    reduce using rule 77 (TERMINO -> FACTOR F2 .)
    LESS_THAN       reduce using rule 77 (TERMINO -> FACTOR F2 .)
    IS_EQUAL        reduce using rule 77 (TERMINO -> FACTOR F2 .)
    NOT_EQUAL       reduce using rule 77 (TERMINO -> FACTOR F2 .)
    AND             reduce using rule 77 (TERMINO -> FACTOR F2 .)
    OR              reduce using rule 77 (TERMINO -> FACTOR F2 .)
    EQUALS          reduce using rule 77 (TERMINO -> FACTOR F2 .)
    RBRACKET        reduce using rule 77 (TERMINO -> FACTOR F2 .)


state 66

    (78) F2 -> DIVIDE . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    FACTOR                         shift and go to state 110
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 67

    (79) F2 -> MULTIPLY . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    FACTOR                         shift and go to state 111
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 68

    (80) F2 -> empty .

    COMMA           reduce using rule 80 (F2 -> empty .)
    SEMICOLON       reduce using rule 80 (F2 -> empty .)
    DIVIDE          reduce using rule 80 (F2 -> empty .)
    MULTIPLY        reduce using rule 80 (F2 -> empty .)
    PLUS            reduce using rule 80 (F2 -> empty .)
    MINUS           reduce using rule 80 (F2 -> empty .)
    LPAREN          reduce using rule 80 (F2 -> empty .)
    C_INT           reduce using rule 80 (F2 -> empty .)
    C_FLOAT         reduce using rule 80 (F2 -> empty .)
    C_CHAR          reduce using rule 80 (F2 -> empty .)
    NAME            reduce using rule 80 (F2 -> empty .)
    FUNC            reduce using rule 80 (F2 -> empty .)
    MAIN            reduce using rule 80 (F2 -> empty .)
    LBRACKET        reduce using rule 80 (F2 -> empty .)
    RPAREN          reduce using rule 80 (F2 -> empty .)
    RSBRACKET       reduce using rule 80 (F2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 80 (F2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 80 (F2 -> empty .)
    GREATER_THAN    reduce using rule 80 (F2 -> empty .)
    LESS_THAN       reduce using rule 80 (F2 -> empty .)
    IS_EQUAL        reduce using rule 80 (F2 -> empty .)
    NOT_EQUAL       reduce using rule 80 (F2 -> empty .)
    AND             reduce using rule 80 (F2 -> empty .)
    OR              reduce using rule 80 (F2 -> empty .)
    EQUALS          reduce using rule 80 (F2 -> empty .)
    RBRACKET        reduce using rule 80 (F2 -> empty .)


state 69

    (81) FACTOR -> LPAREN H_EXP . RPAREN

    RPAREN          shift and go to state 112


state 70

    (57) H_EXP -> T .

    RPAREN          reduce using rule 57 (H_EXP -> T .)


state 71

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO .

    $end            reduce using rule 28 (PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO .)


state 72

    (16) CUERPO -> LBRACKET . E RBRACKET
    (17) E -> . E1
    (18) E -> . empty
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (42) E1 -> . EXP
    (43) E1 -> . EXP COMMA E1
    (87) empty -> .
    (32) ESTATUTO -> . ASIGNACION
    (33) ESTATUTO -> . LLAMADA
    (34) ESTATUTO -> . RETORNO
    (35) ESTATUTO -> . LECTURA
    (36) ESTATUTO -> . ESCRITURA
    (37) ESTATUTO -> . CONDICION
    (38) ESTATUTO -> . CICLO_W
    (39) ESTATUTO -> . CICLO_F
    (73) EXP -> . TERMINO T
    (40) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (41) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (45) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (46) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (49) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (52) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (55) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (56) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (77) TERMINO -> . FACTOR F2
    (29) VARIABLE -> . NAME E2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RBRACKET        reduce using rule 87 (empty -> .)
    NAME            shift and go to state 77
    RETURN          shift and go to state 90
    READ            shift and go to state 91
    PRINT           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    FROM            shift and go to state 95
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E                              shift and go to state 113
    E1                             shift and go to state 114
    empty                          shift and go to state 115
    ESTATUTO                       shift and go to state 79
    EXP                            shift and go to state 116
    ASIGNACION                     shift and go to state 81
    LLAMADA                        shift and go to state 82
    RETORNO                        shift and go to state 83
    LECTURA                        shift and go to state 84
    ESCRITURA                      shift and go to state 85
    CONDICION                      shift and go to state 86
    CICLO_W                        shift and go to state 87
    CICLO_F                        shift and go to state 88
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 89
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 73

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS . RPAREN V4 CUERPO

    RPAREN          shift and go to state 117


state 74

    (13) PARAMS -> TIPO . NAME P1

    NAME            shift and go to state 118


state 75

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON . agregarVariables V3
    (91) agregarVariables -> .

    NAME            reduce using rule 91 (agregarVariables -> .)
    INT             reduce using rule 91 (agregarVariables -> .)
    FLOAT           reduce using rule 91 (agregarVariables -> .)
    CHAR            reduce using rule 91 (agregarVariables -> .)
    FUNC            reduce using rule 91 (agregarVariables -> .)
    MAIN            reduce using rule 91 (agregarVariables -> .)
    LBRACKET        reduce using rule 91 (agregarVariables -> .)
    RPAREN          reduce using rule 91 (agregarVariables -> .)

    agregarVariables               shift and go to state 119

state 76

    (6) V2 -> COMMA VARIABLE . agregarVarLista V2
    (94) agregarVarLista -> .

    COMMA           reduce using rule 94 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 94 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 120

state 77

    (41) LLAMADA -> NAME . LPAREN E1 RPAREN SEMICOLON
    (29) VARIABLE -> NAME . E2
    (44) LLAMADAF -> NAME . LPAREN E1 RPAREN
    (30) E2 -> . LSBRACKET EXP RSBRACKET
    (31) E2 -> . empty
    (50) E2 -> . S_EXP
    (51) E2 -> . S_EXP COMMA E2
    (87) empty -> .
    (71) S_EXP -> . C_STRING
    (72) S_EXP -> . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    LPAREN          shift and go to state 121
    LSBRACKET       shift and go to state 36
    EQUALS          reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    C_STRING        shift and go to state 40
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    E2                             shift and go to state 35
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 78

    (44) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 122


state 79

    (19) E1 -> ESTATUTO .
    (20) E1 -> ESTATUTO . E1
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (42) E1 -> . EXP
    (43) E1 -> . EXP COMMA E1
    (32) ESTATUTO -> . ASIGNACION
    (33) ESTATUTO -> . LLAMADA
    (34) ESTATUTO -> . RETORNO
    (35) ESTATUTO -> . LECTURA
    (36) ESTATUTO -> . ESCRITURA
    (37) ESTATUTO -> . CONDICION
    (38) ESTATUTO -> . CICLO_W
    (39) ESTATUTO -> . CICLO_F
    (73) EXP -> . TERMINO T
    (40) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (41) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (45) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (46) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (49) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (52) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (55) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (56) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (77) TERMINO -> . FACTOR F2
    (29) VARIABLE -> . NAME E2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    RPAREN          reduce using rule 19 (E1 -> ESTATUTO .)
    RBRACKET        reduce using rule 19 (E1 -> ESTATUTO .)
    NAME            shift and go to state 77
    RETURN          shift and go to state 90
    READ            shift and go to state 91
    PRINT           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    FROM            shift and go to state 95
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    ESTATUTO                       shift and go to state 79
    E1                             shift and go to state 123
    EXP                            shift and go to state 116
    ASIGNACION                     shift and go to state 81
    LLAMADA                        shift and go to state 82
    RETORNO                        shift and go to state 83
    LECTURA                        shift and go to state 84
    ESCRITURA                      shift and go to state 85
    CONDICION                      shift and go to state 86
    CICLO_W                        shift and go to state 87
    CICLO_F                        shift and go to state 88
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 89
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 80

    (42) E1 -> EXP .
    (43) E1 -> EXP . COMMA E1
    (63) G_EXP -> EXP . B
    (64) B -> . GREATER_OR_EQUAL EXP
    (65) B -> . LESS_OR_EQUAL EXP
    (66) B -> . GREATER_THAN EXP
    (67) B -> . LESS_THAN EXP
    (68) B -> . IS_EQUAL EXP
    (69) B -> . NOT_EQUAL EXP
    (70) B -> . empty
    (87) empty -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 42 (E1 -> EXP .)
    RPAREN          reduce using rule 42 (E1 -> EXP .)
    COMMA           shift and go to state 124
    GREATER_OR_EQUAL shift and go to state 103
    LESS_OR_EQUAL   shift and go to state 104
    GREATER_THAN    shift and go to state 105
    LESS_THAN       shift and go to state 106
    IS_EQUAL        shift and go to state 107
    NOT_EQUAL       shift and go to state 108
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)

  ! RPAREN          [ reduce using rule 87 (empty -> .) ]

    B                              shift and go to state 102
    empty                          shift and go to state 109

state 81

    (32) ESTATUTO -> ASIGNACION .

    NAME            reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    FROM            reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    LPAREN          reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    C_INT           reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    C_FLOAT         reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    C_CHAR          reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    RPAREN          reduce using rule 32 (ESTATUTO -> ASIGNACION .)
    RBRACKET        reduce using rule 32 (ESTATUTO -> ASIGNACION .)


state 82

    (33) ESTATUTO -> LLAMADA .

    NAME            reduce using rule 33 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 33 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 33 (ESTATUTO -> LLAMADA .)
    PRINT           reduce using rule 33 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 33 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 33 (ESTATUTO -> LLAMADA .)
    FROM            reduce using rule 33 (ESTATUTO -> LLAMADA .)
    LPAREN          reduce using rule 33 (ESTATUTO -> LLAMADA .)
    C_INT           reduce using rule 33 (ESTATUTO -> LLAMADA .)
    C_FLOAT         reduce using rule 33 (ESTATUTO -> LLAMADA .)
    C_CHAR          reduce using rule 33 (ESTATUTO -> LLAMADA .)
    RPAREN          reduce using rule 33 (ESTATUTO -> LLAMADA .)
    RBRACKET        reduce using rule 33 (ESTATUTO -> LLAMADA .)


state 83

    (34) ESTATUTO -> RETORNO .

    NAME            reduce using rule 34 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 34 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 34 (ESTATUTO -> RETORNO .)
    PRINT           reduce using rule 34 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 34 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 34 (ESTATUTO -> RETORNO .)
    FROM            reduce using rule 34 (ESTATUTO -> RETORNO .)
    LPAREN          reduce using rule 34 (ESTATUTO -> RETORNO .)
    C_INT           reduce using rule 34 (ESTATUTO -> RETORNO .)
    C_FLOAT         reduce using rule 34 (ESTATUTO -> RETORNO .)
    C_CHAR          reduce using rule 34 (ESTATUTO -> RETORNO .)
    RPAREN          reduce using rule 34 (ESTATUTO -> RETORNO .)
    RBRACKET        reduce using rule 34 (ESTATUTO -> RETORNO .)


state 84

    (35) ESTATUTO -> LECTURA .

    NAME            reduce using rule 35 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 35 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 35 (ESTATUTO -> LECTURA .)
    PRINT           reduce using rule 35 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 35 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 35 (ESTATUTO -> LECTURA .)
    FROM            reduce using rule 35 (ESTATUTO -> LECTURA .)
    LPAREN          reduce using rule 35 (ESTATUTO -> LECTURA .)
    C_INT           reduce using rule 35 (ESTATUTO -> LECTURA .)
    C_FLOAT         reduce using rule 35 (ESTATUTO -> LECTURA .)
    C_CHAR          reduce using rule 35 (ESTATUTO -> LECTURA .)
    RPAREN          reduce using rule 35 (ESTATUTO -> LECTURA .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> LECTURA .)


state 85

    (36) ESTATUTO -> ESCRITURA .

    NAME            reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    FROM            reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    LPAREN          reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    C_INT           reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    C_FLOAT         reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    C_CHAR          reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    RPAREN          reduce using rule 36 (ESTATUTO -> ESCRITURA .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> ESCRITURA .)


state 86

    (37) ESTATUTO -> CONDICION .

    NAME            reduce using rule 37 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 37 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 37 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 37 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 37 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 37 (ESTATUTO -> CONDICION .)
    FROM            reduce using rule 37 (ESTATUTO -> CONDICION .)
    LPAREN          reduce using rule 37 (ESTATUTO -> CONDICION .)
    C_INT           reduce using rule 37 (ESTATUTO -> CONDICION .)
    C_FLOAT         reduce using rule 37 (ESTATUTO -> CONDICION .)
    C_CHAR          reduce using rule 37 (ESTATUTO -> CONDICION .)
    RPAREN          reduce using rule 37 (ESTATUTO -> CONDICION .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> CONDICION .)


state 87

    (38) ESTATUTO -> CICLO_W .

    NAME            reduce using rule 38 (ESTATUTO -> CICLO_W .)
    RETURN          reduce using rule 38 (ESTATUTO -> CICLO_W .)
    READ            reduce using rule 38 (ESTATUTO -> CICLO_W .)
    PRINT           reduce using rule 38 (ESTATUTO -> CICLO_W .)
    IF              reduce using rule 38 (ESTATUTO -> CICLO_W .)
    WHILE           reduce using rule 38 (ESTATUTO -> CICLO_W .)
    FROM            reduce using rule 38 (ESTATUTO -> CICLO_W .)
    LPAREN          reduce using rule 38 (ESTATUTO -> CICLO_W .)
    C_INT           reduce using rule 38 (ESTATUTO -> CICLO_W .)
    C_FLOAT         reduce using rule 38 (ESTATUTO -> CICLO_W .)
    C_CHAR          reduce using rule 38 (ESTATUTO -> CICLO_W .)
    RPAREN          reduce using rule 38 (ESTATUTO -> CICLO_W .)
    RBRACKET        reduce using rule 38 (ESTATUTO -> CICLO_W .)


state 88

    (39) ESTATUTO -> CICLO_F .

    NAME            reduce using rule 39 (ESTATUTO -> CICLO_F .)
    RETURN          reduce using rule 39 (ESTATUTO -> CICLO_F .)
    READ            reduce using rule 39 (ESTATUTO -> CICLO_F .)
    PRINT           reduce using rule 39 (ESTATUTO -> CICLO_F .)
    IF              reduce using rule 39 (ESTATUTO -> CICLO_F .)
    WHILE           reduce using rule 39 (ESTATUTO -> CICLO_F .)
    FROM            reduce using rule 39 (ESTATUTO -> CICLO_F .)
    LPAREN          reduce using rule 39 (ESTATUTO -> CICLO_F .)
    C_INT           reduce using rule 39 (ESTATUTO -> CICLO_F .)
    C_FLOAT         reduce using rule 39 (ESTATUTO -> CICLO_F .)
    C_CHAR          reduce using rule 39 (ESTATUTO -> CICLO_F .)
    RPAREN          reduce using rule 39 (ESTATUTO -> CICLO_F .)
    RBRACKET        reduce using rule 39 (ESTATUTO -> CICLO_F .)


state 89

    (40) ASIGNACION -> VARIABLE . EQUALS EXP SEMICOLON
    (85) FACTOR -> VARIABLE .

    EQUALS          shift and go to state 125
    DIVIDE          reduce using rule 85 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 85 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 85 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 85 (FACTOR -> VARIABLE .)
    LPAREN          reduce using rule 85 (FACTOR -> VARIABLE .)
    C_INT           reduce using rule 85 (FACTOR -> VARIABLE .)
    C_FLOAT         reduce using rule 85 (FACTOR -> VARIABLE .)
    C_CHAR          reduce using rule 85 (FACTOR -> VARIABLE .)
    NAME            reduce using rule 85 (FACTOR -> VARIABLE .)
    COMMA           reduce using rule 85 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 85 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 85 (FACTOR -> VARIABLE .)
    AND             reduce using rule 85 (FACTOR -> VARIABLE .)
    OR              reduce using rule 85 (FACTOR -> VARIABLE .)
    RBRACKET        reduce using rule 85 (FACTOR -> VARIABLE .)


state 90

    (45) RETORNO -> RETURN . LPAREN EXP RPAREN SEMICOLON

    LPAREN          shift and go to state 126


state 91

    (46) LECTURA -> READ . LPAREN V3 RPAREN SEMICOLON

    LPAREN          shift and go to state 127


state 92

    (49) ESCRITURA -> PRINT . LPAREN E2 RPAREN SEMICOLON

    LPAREN          shift and go to state 128


state 93

    (52) CONDICION -> IF . LPAREN H_EXP RPAREN THEN CUERPO ELSE1

    LPAREN          shift and go to state 129


state 94

    (55) CICLO_W -> WHILE . LPAREN H_EXP RPAREN DO CUERPO

    LPAREN          shift and go to state 130


state 95

    (56) CICLO_F -> FROM . NAME EQUALS C_INT TO C_INT DO CUERPO

    NAME            shift and go to state 131


state 96

    (30) E2 -> LSBRACKET EXP RSBRACKET .

    COMMA           reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    SEMICOLON       reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    DIVIDE          reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    MULTIPLY        reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    PLUS            reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    MINUS           reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    LPAREN          reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_INT           reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_FLOAT         reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    C_CHAR          reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    NAME            reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    FUNC            reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    MAIN            reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    LBRACKET        reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    RPAREN          reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    RSBRACKET       reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_OR_EQUAL reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_OR_EQUAL   reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    GREATER_THAN    reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    LESS_THAN       reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    IS_EQUAL        reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    NOT_EQUAL       reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    AND             reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    OR              reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    EQUALS          reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)
    RBRACKET        reduce using rule 30 (E2 -> LSBRACKET EXP RSBRACKET .)


state 97

    (51) E2 -> S_EXP COMMA E2 .

    COMMA           reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    SEMICOLON       reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    DIVIDE          reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    MULTIPLY        reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    PLUS            reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    MINUS           reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    LPAREN          reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    C_INT           reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    C_FLOAT         reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    C_CHAR          reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    NAME            reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    FUNC            reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    MAIN            reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    LBRACKET        reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    RPAREN          reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    RSBRACKET       reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    GREATER_OR_EQUAL reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    LESS_OR_EQUAL   reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    GREATER_THAN    reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    LESS_THAN       reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    IS_EQUAL        reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    NOT_EQUAL       reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    AND             reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    OR              reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    EQUALS          reduce using rule 51 (E2 -> S_EXP COMMA E2 .)
    RBRACKET        reduce using rule 51 (E2 -> S_EXP COMMA E2 .)


state 98

    (59) T -> T_EXP OR . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 87 (empty -> .) ]
  ! MINUS           [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    T_EXP                          shift and go to state 58
    T                              shift and go to state 132
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 99

    (74) T -> PLUS TERMINO . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 87 (empty -> .) ]
  ! MINUS           [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 133
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 100

    (75) T -> MINUS TERMINO . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for C_INT resolved as shift
  ! shift/reduce conflict for C_FLOAT resolved as shift
  ! shift/reduce conflict for C_CHAR resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    DIVIDE          reduce using rule 87 (empty -> .)
    MULTIPLY        reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

  ! PLUS            [ reduce using rule 87 (empty -> .) ]
  ! MINUS           [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! C_INT           [ reduce using rule 87 (empty -> .) ]
  ! C_FLOAT         [ reduce using rule 87 (empty -> .) ]
  ! C_CHAR          [ reduce using rule 87 (empty -> .) ]
  ! NAME            [ reduce using rule 87 (empty -> .) ]

    TERMINO                        shift and go to state 41
    T                              shift and go to state 134
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 101

    (62) G -> G_EXP AND . G
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    G_EXP                          shift and go to state 63
    G                              shift and go to state 135
    EXP                            shift and go to state 64
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 102

    (63) G_EXP -> EXP B .

    COMMA           reduce using rule 63 (G_EXP -> EXP B .)
    SEMICOLON       reduce using rule 63 (G_EXP -> EXP B .)
    DIVIDE          reduce using rule 63 (G_EXP -> EXP B .)
    MULTIPLY        reduce using rule 63 (G_EXP -> EXP B .)
    PLUS            reduce using rule 63 (G_EXP -> EXP B .)
    MINUS           reduce using rule 63 (G_EXP -> EXP B .)
    LPAREN          reduce using rule 63 (G_EXP -> EXP B .)
    C_INT           reduce using rule 63 (G_EXP -> EXP B .)
    C_FLOAT         reduce using rule 63 (G_EXP -> EXP B .)
    C_CHAR          reduce using rule 63 (G_EXP -> EXP B .)
    NAME            reduce using rule 63 (G_EXP -> EXP B .)
    FUNC            reduce using rule 63 (G_EXP -> EXP B .)
    MAIN            reduce using rule 63 (G_EXP -> EXP B .)
    LBRACKET        reduce using rule 63 (G_EXP -> EXP B .)
    RPAREN          reduce using rule 63 (G_EXP -> EXP B .)
    RSBRACKET       reduce using rule 63 (G_EXP -> EXP B .)
    GREATER_OR_EQUAL reduce using rule 63 (G_EXP -> EXP B .)
    LESS_OR_EQUAL   reduce using rule 63 (G_EXP -> EXP B .)
    GREATER_THAN    reduce using rule 63 (G_EXP -> EXP B .)
    LESS_THAN       reduce using rule 63 (G_EXP -> EXP B .)
    IS_EQUAL        reduce using rule 63 (G_EXP -> EXP B .)
    NOT_EQUAL       reduce using rule 63 (G_EXP -> EXP B .)
    AND             reduce using rule 63 (G_EXP -> EXP B .)
    OR              reduce using rule 63 (G_EXP -> EXP B .)
    EQUALS          reduce using rule 63 (G_EXP -> EXP B .)
    RBRACKET        reduce using rule 63 (G_EXP -> EXP B .)


state 103

    (64) B -> GREATER_OR_EQUAL . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 136
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 104

    (65) B -> LESS_OR_EQUAL . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 137
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 105

    (66) B -> GREATER_THAN . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 138
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 106

    (67) B -> LESS_THAN . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 139
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 107

    (68) B -> IS_EQUAL . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 140
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 108

    (69) B -> NOT_EQUAL . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 141
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 109

    (70) B -> empty .

    COMMA           reduce using rule 70 (B -> empty .)
    SEMICOLON       reduce using rule 70 (B -> empty .)
    DIVIDE          reduce using rule 70 (B -> empty .)
    MULTIPLY        reduce using rule 70 (B -> empty .)
    PLUS            reduce using rule 70 (B -> empty .)
    MINUS           reduce using rule 70 (B -> empty .)
    LPAREN          reduce using rule 70 (B -> empty .)
    C_INT           reduce using rule 70 (B -> empty .)
    C_FLOAT         reduce using rule 70 (B -> empty .)
    C_CHAR          reduce using rule 70 (B -> empty .)
    NAME            reduce using rule 70 (B -> empty .)
    FUNC            reduce using rule 70 (B -> empty .)
    MAIN            reduce using rule 70 (B -> empty .)
    LBRACKET        reduce using rule 70 (B -> empty .)
    RPAREN          reduce using rule 70 (B -> empty .)
    RSBRACKET       reduce using rule 70 (B -> empty .)
    GREATER_OR_EQUAL reduce using rule 70 (B -> empty .)
    LESS_OR_EQUAL   reduce using rule 70 (B -> empty .)
    GREATER_THAN    reduce using rule 70 (B -> empty .)
    LESS_THAN       reduce using rule 70 (B -> empty .)
    IS_EQUAL        reduce using rule 70 (B -> empty .)
    NOT_EQUAL       reduce using rule 70 (B -> empty .)
    AND             reduce using rule 70 (B -> empty .)
    OR              reduce using rule 70 (B -> empty .)
    EQUALS          reduce using rule 70 (B -> empty .)
    RBRACKET        reduce using rule 70 (B -> empty .)


state 110

    (78) F2 -> DIVIDE FACTOR . F2
    (78) F2 -> . DIVIDE FACTOR F2
    (79) F2 -> . MULTIPLY FACTOR F2
    (80) F2 -> . empty
    (87) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    LPAREN          reduce using rule 87 (empty -> .)
    C_INT           reduce using rule 87 (empty -> .)
    C_FLOAT         reduce using rule 87 (empty -> .)
    C_CHAR          reduce using rule 87 (empty -> .)
    NAME            reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)

  ! DIVIDE          [ reduce using rule 87 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 87 (empty -> .) ]

    F2                             shift and go to state 142
    empty                          shift and go to state 68

state 111

    (79) F2 -> MULTIPLY FACTOR . F2
    (78) F2 -> . DIVIDE FACTOR F2
    (79) F2 -> . MULTIPLY FACTOR F2
    (80) F2 -> . empty
    (87) empty -> .

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
    DIVIDE          shift and go to state 66
    MULTIPLY        shift and go to state 67
    COMMA           reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    LPAREN          reduce using rule 87 (empty -> .)
    C_INT           reduce using rule 87 (empty -> .)
    C_FLOAT         reduce using rule 87 (empty -> .)
    C_CHAR          reduce using rule 87 (empty -> .)
    NAME            reduce using rule 87 (empty -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RSBRACKET       reduce using rule 87 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 87 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 87 (empty -> .)
    GREATER_THAN    reduce using rule 87 (empty -> .)
    LESS_THAN       reduce using rule 87 (empty -> .)
    IS_EQUAL        reduce using rule 87 (empty -> .)
    NOT_EQUAL       reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    EQUALS          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)

  ! DIVIDE          [ reduce using rule 87 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 87 (empty -> .) ]

    F2                             shift and go to state 143
    empty                          shift and go to state 68

state 112

    (81) FACTOR -> LPAREN H_EXP RPAREN .

    COMMA           reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    SEMICOLON       reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    DIVIDE          reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    MULTIPLY        reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    PLUS            reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    MINUS           reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    LPAREN          reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_INT           reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_FLOAT         reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    C_CHAR          reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    NAME            reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    FUNC            reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    MAIN            reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    LBRACKET        reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    RPAREN          reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    RSBRACKET       reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_OR_EQUAL reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_OR_EQUAL   reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    GREATER_THAN    reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    LESS_THAN       reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    IS_EQUAL        reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    NOT_EQUAL       reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    AND             reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    OR              reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    EQUALS          reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)
    RBRACKET        reduce using rule 81 (FACTOR -> LPAREN H_EXP RPAREN .)


state 113

    (16) CUERPO -> LBRACKET E . RBRACKET

    RBRACKET        shift and go to state 144


state 114

    (17) E -> E1 .

    RBRACKET        reduce using rule 17 (E -> E1 .)


state 115

    (18) E -> empty .

    RBRACKET        reduce using rule 18 (E -> empty .)


state 116

    (42) E1 -> EXP .
    (43) E1 -> EXP . COMMA E1

    RBRACKET        reduce using rule 42 (E1 -> EXP .)
    RPAREN          reduce using rule 42 (E1 -> EXP .)
    COMMA           shift and go to state 124


state 117

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN . V4 CUERPO
    (11) V4 -> . VARS
    (12) V4 -> . empty
    (4) VARS -> . borrarListaVar VAR V1
    (87) empty -> .
    (95) borrarListaVar -> .

    LBRACKET        reduce using rule 87 (empty -> .)
    VAR             reduce using rule 95 (borrarListaVar -> .)

    V4                             shift and go to state 145
    VARS                           shift and go to state 146
    empty                          shift and go to state 147
    borrarListaVar                 shift and go to state 7

state 118

    (13) PARAMS -> TIPO NAME . P1
    (14) P1 -> . COMMA PARAMS P1
    (15) P1 -> . empty
    (87) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 149
    RPAREN          reduce using rule 87 (empty -> .)

  ! COMMA           [ reduce using rule 87 (empty -> .) ]

    P1                             shift and go to state 148
    empty                          shift and go to state 150

state 119

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables . V3
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (47) V3 -> . VARIABLE COMMA V3
    (48) V3 -> . VARIABLE
    (95) borrarListaVar -> .
    (87) empty -> .
    (29) VARIABLE -> . NAME E2

    INT             reduce using rule 95 (borrarListaVar -> .)
    FLOAT           reduce using rule 95 (borrarListaVar -> .)
    CHAR            reduce using rule 95 (borrarListaVar -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 151
    V3                             shift and go to state 152
    borrarListaVar                 shift and go to state 153
    empty                          shift and go to state 154

state 120

    (6) V2 -> COMMA VARIABLE agregarVarLista . V2
    (6) V2 -> . COMMA VARIABLE agregarVarLista V2
    (7) V2 -> . empty
    (87) empty -> .

    COMMA           shift and go to state 52
    SEMICOLON       reduce using rule 87 (empty -> .)

    V2                             shift and go to state 155
    empty                          shift and go to state 53

state 121

    (41) LLAMADA -> NAME LPAREN . E1 RPAREN SEMICOLON
    (44) LLAMADAF -> NAME LPAREN . E1 RPAREN
    (81) FACTOR -> LPAREN . H_EXP RPAREN
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (42) E1 -> . EXP
    (43) E1 -> . EXP COMMA E1
    (57) H_EXP -> . T
    (32) ESTATUTO -> . ASIGNACION
    (33) ESTATUTO -> . LLAMADA
    (34) ESTATUTO -> . RETORNO
    (35) ESTATUTO -> . LECTURA
    (36) ESTATUTO -> . ESCRITURA
    (37) ESTATUTO -> . CONDICION
    (38) ESTATUTO -> . CICLO_W
    (39) ESTATUTO -> . CICLO_F
    (73) EXP -> . TERMINO T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (40) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (41) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (45) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (46) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (49) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (52) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (55) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (56) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (77) TERMINO -> . FACTOR F2
    (60) T_EXP -> . G
    (87) empty -> .
    (29) VARIABLE -> . NAME E2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN
    (63) G_EXP -> . EXP B

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    NAME            shift and go to state 77
    RETURN          shift and go to state 90
    READ            shift and go to state 91
    PRINT           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    FROM            shift and go to state 95
    RPAREN          reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    E1                             shift and go to state 156
    H_EXP                          shift and go to state 69
    ESTATUTO                       shift and go to state 79
    EXP                            shift and go to state 80
    T                              shift and go to state 70
    ASIGNACION                     shift and go to state 81
    LLAMADA                        shift and go to state 82
    RETORNO                        shift and go to state 83
    LECTURA                        shift and go to state 84
    ESCRITURA                      shift and go to state 85
    CONDICION                      shift and go to state 86
    CICLO_W                        shift and go to state 87
    CICLO_F                        shift and go to state 88
    TERMINO                        shift and go to state 41
    T_EXP                          shift and go to state 58
    empty                          shift and go to state 61
    VARIABLE                       shift and go to state 89
    FACTOR                         shift and go to state 42
    G                              shift and go to state 62
    LLAMADAF                       shift and go to state 48
    G_EXP                          shift and go to state 63

state 122

    (44) LLAMADAF -> NAME LPAREN E1 RPAREN .

    COMMA           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    SEMICOLON       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    DIVIDE          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    FUNC            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MAIN            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LBRACKET        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RSBRACKET       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    EQUALS          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 123

    (20) E1 -> ESTATUTO E1 .

    RPAREN          reduce using rule 20 (E1 -> ESTATUTO E1 .)
    RBRACKET        reduce using rule 20 (E1 -> ESTATUTO E1 .)


state 124

    (43) E1 -> EXP COMMA . E1
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (42) E1 -> . EXP
    (43) E1 -> . EXP COMMA E1
    (32) ESTATUTO -> . ASIGNACION
    (33) ESTATUTO -> . LLAMADA
    (34) ESTATUTO -> . RETORNO
    (35) ESTATUTO -> . LECTURA
    (36) ESTATUTO -> . ESCRITURA
    (37) ESTATUTO -> . CONDICION
    (38) ESTATUTO -> . CICLO_W
    (39) ESTATUTO -> . CICLO_F
    (73) EXP -> . TERMINO T
    (40) ASIGNACION -> . VARIABLE EQUALS EXP SEMICOLON
    (41) LLAMADA -> . NAME LPAREN E1 RPAREN SEMICOLON
    (45) RETORNO -> . RETURN LPAREN EXP RPAREN SEMICOLON
    (46) LECTURA -> . READ LPAREN V3 RPAREN SEMICOLON
    (49) ESCRITURA -> . PRINT LPAREN E2 RPAREN SEMICOLON
    (52) CONDICION -> . IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1
    (55) CICLO_W -> . WHILE LPAREN H_EXP RPAREN DO CUERPO
    (56) CICLO_F -> . FROM NAME EQUALS C_INT TO C_INT DO CUERPO
    (77) TERMINO -> . FACTOR F2
    (29) VARIABLE -> . NAME E2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    NAME            shift and go to state 77
    RETURN          shift and go to state 90
    READ            shift and go to state 91
    PRINT           shift and go to state 92
    IF              shift and go to state 93
    WHILE           shift and go to state 94
    FROM            shift and go to state 95
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46

    EXP                            shift and go to state 116
    E1                             shift and go to state 157
    ESTATUTO                       shift and go to state 79
    ASIGNACION                     shift and go to state 81
    LLAMADA                        shift and go to state 82
    RETORNO                        shift and go to state 83
    LECTURA                        shift and go to state 84
    ESCRITURA                      shift and go to state 85
    CONDICION                      shift and go to state 86
    CICLO_W                        shift and go to state 87
    CICLO_F                        shift and go to state 88
    TERMINO                        shift and go to state 41
    VARIABLE                       shift and go to state 89
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 125

    (40) ASIGNACION -> VARIABLE EQUALS . EXP SEMICOLON
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    VARIABLE                       shift and go to state 47
    EXP                            shift and go to state 158
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    LLAMADAF                       shift and go to state 48

state 126

    (45) RETORNO -> RETURN LPAREN . EXP RPAREN SEMICOLON
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    EXP                            shift and go to state 159
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 127

    (46) LECTURA -> READ LPAREN . V3 RPAREN SEMICOLON
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (47) V3 -> . VARIABLE COMMA V3
    (48) V3 -> . VARIABLE
    (95) borrarListaVar -> .
    (87) empty -> .
    (29) VARIABLE -> . NAME E2

    INT             reduce using rule 95 (borrarListaVar -> .)
    FLOAT           reduce using rule 95 (borrarListaVar -> .)
    CHAR            reduce using rule 95 (borrarListaVar -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    NAME            shift and go to state 30

    V3                             shift and go to state 160
    borrarListaVar                 shift and go to state 153
    empty                          shift and go to state 154
    VARIABLE                       shift and go to state 151

state 128

    (49) ESCRITURA -> PRINT LPAREN . E2 RPAREN SEMICOLON
    (30) E2 -> . LSBRACKET EXP RSBRACKET
    (31) E2 -> . empty
    (50) E2 -> . S_EXP
    (51) E2 -> . S_EXP COMMA E2
    (87) empty -> .
    (71) S_EXP -> . C_STRING
    (72) S_EXP -> . EXP
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    LSBRACKET       shift and go to state 36
    RPAREN          reduce using rule 87 (empty -> .)
    C_STRING        shift and go to state 40
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    E2                             shift and go to state 161
    EXP                            shift and go to state 37
    empty                          shift and go to state 38
    S_EXP                          shift and go to state 39
    TERMINO                        shift and go to state 41
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 129

    (52) CONDICION -> IF LPAREN . H_EXP RPAREN THEN CUERPO ELSE1
    (57) H_EXP -> . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 162
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 130

    (55) CICLO_W -> WHILE LPAREN . H_EXP RPAREN DO CUERPO
    (57) H_EXP -> . T
    (58) T -> . T_EXP
    (59) T -> . T_EXP OR T
    (74) T -> . PLUS TERMINO T
    (75) T -> . MINUS TERMINO T
    (76) T -> . empty
    (60) T_EXP -> . G
    (87) empty -> .
    (61) G -> . G_EXP
    (62) G -> . G_EXP AND G
    (63) G_EXP -> . EXP B
    (73) EXP -> . TERMINO T
    (77) TERMINO -> . FACTOR F2
    (81) FACTOR -> . LPAREN H_EXP RPAREN
    (82) FACTOR -> . C_INT
    (83) FACTOR -> . C_FLOAT
    (84) FACTOR -> . C_CHAR
    (85) FACTOR -> . VARIABLE
    (86) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME E2
    (44) LLAMADAF -> . NAME LPAREN E1 RPAREN

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    RPAREN          reduce using rule 87 (empty -> .)
    LPAREN          shift and go to state 43
    C_INT           shift and go to state 44
    C_FLOAT         shift and go to state 45
    C_CHAR          shift and go to state 46
    NAME            shift and go to state 34

    H_EXP                          shift and go to state 163
    T                              shift and go to state 70
    T_EXP                          shift and go to state 58
    TERMINO                        shift and go to state 41
    empty                          shift and go to state 61
    G                              shift and go to state 62
    G_EXP                          shift and go to state 63
    EXP                            shift and go to state 64
    FACTOR                         shift and go to state 42
    VARIABLE                       shift and go to state 47
    LLAMADAF                       shift and go to state 48

state 131

    (56) CICLO_F -> FROM NAME . EQUALS C_INT TO C_INT DO CUERPO

    EQUALS          shift and go to state 164


state 132

    (59) T -> T_EXP OR T .

    COMMA           reduce using rule 59 (T -> T_EXP OR T .)
    SEMICOLON       reduce using rule 59 (T -> T_EXP OR T .)
    DIVIDE          reduce using rule 59 (T -> T_EXP OR T .)
    MULTIPLY        reduce using rule 59 (T -> T_EXP OR T .)
    PLUS            reduce using rule 59 (T -> T_EXP OR T .)
    MINUS           reduce using rule 59 (T -> T_EXP OR T .)
    LPAREN          reduce using rule 59 (T -> T_EXP OR T .)
    C_INT           reduce using rule 59 (T -> T_EXP OR T .)
    C_FLOAT         reduce using rule 59 (T -> T_EXP OR T .)
    C_CHAR          reduce using rule 59 (T -> T_EXP OR T .)
    NAME            reduce using rule 59 (T -> T_EXP OR T .)
    FUNC            reduce using rule 59 (T -> T_EXP OR T .)
    MAIN            reduce using rule 59 (T -> T_EXP OR T .)
    LBRACKET        reduce using rule 59 (T -> T_EXP OR T .)
    RPAREN          reduce using rule 59 (T -> T_EXP OR T .)
    RSBRACKET       reduce using rule 59 (T -> T_EXP OR T .)
    GREATER_OR_EQUAL reduce using rule 59 (T -> T_EXP OR T .)
    LESS_OR_EQUAL   reduce using rule 59 (T -> T_EXP OR T .)
    GREATER_THAN    reduce using rule 59 (T -> T_EXP OR T .)
    LESS_THAN       reduce using rule 59 (T -> T_EXP OR T .)
    IS_EQUAL        reduce using rule 59 (T -> T_EXP OR T .)
    NOT_EQUAL       reduce using rule 59 (T -> T_EXP OR T .)
    AND             reduce using rule 59 (T -> T_EXP OR T .)
    OR              reduce using rule 59 (T -> T_EXP OR T .)
    EQUALS          reduce using rule 59 (T -> T_EXP OR T .)
    RBRACKET        reduce using rule 59 (T -> T_EXP OR T .)


state 133

    (74) T -> PLUS TERMINO T .

    COMMA           reduce using rule 74 (T -> PLUS TERMINO T .)
    SEMICOLON       reduce using rule 74 (T -> PLUS TERMINO T .)
    DIVIDE          reduce using rule 74 (T -> PLUS TERMINO T .)
    MULTIPLY        reduce using rule 74 (T -> PLUS TERMINO T .)
    PLUS            reduce using rule 74 (T -> PLUS TERMINO T .)
    MINUS           reduce using rule 74 (T -> PLUS TERMINO T .)
    LPAREN          reduce using rule 74 (T -> PLUS TERMINO T .)
    C_INT           reduce using rule 74 (T -> PLUS TERMINO T .)
    C_FLOAT         reduce using rule 74 (T -> PLUS TERMINO T .)
    C_CHAR          reduce using rule 74 (T -> PLUS TERMINO T .)
    NAME            reduce using rule 74 (T -> PLUS TERMINO T .)
    FUNC            reduce using rule 74 (T -> PLUS TERMINO T .)
    MAIN            reduce using rule 74 (T -> PLUS TERMINO T .)
    LBRACKET        reduce using rule 74 (T -> PLUS TERMINO T .)
    RPAREN          reduce using rule 74 (T -> PLUS TERMINO T .)
    RSBRACKET       reduce using rule 74 (T -> PLUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 74 (T -> PLUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 74 (T -> PLUS TERMINO T .)
    GREATER_THAN    reduce using rule 74 (T -> PLUS TERMINO T .)
    LESS_THAN       reduce using rule 74 (T -> PLUS TERMINO T .)
    IS_EQUAL        reduce using rule 74 (T -> PLUS TERMINO T .)
    NOT_EQUAL       reduce using rule 74 (T -> PLUS TERMINO T .)
    AND             reduce using rule 74 (T -> PLUS TERMINO T .)
    OR              reduce using rule 74 (T -> PLUS TERMINO T .)
    EQUALS          reduce using rule 74 (T -> PLUS TERMINO T .)
    RBRACKET        reduce using rule 74 (T -> PLUS TERMINO T .)


state 134

    (75) T -> MINUS TERMINO T .

    COMMA           reduce using rule 75 (T -> MINUS TERMINO T .)
    SEMICOLON       reduce using rule 75 (T -> MINUS TERMINO T .)
    DIVIDE          reduce using rule 75 (T -> MINUS TERMINO T .)
    MULTIPLY        reduce using rule 75 (T -> MINUS TERMINO T .)
    PLUS            reduce using rule 75 (T -> MINUS TERMINO T .)
    MINUS           reduce using rule 75 (T -> MINUS TERMINO T .)
    LPAREN          reduce using rule 75 (T -> MINUS TERMINO T .)
    C_INT           reduce using rule 75 (T -> MINUS TERMINO T .)
    C_FLOAT         reduce using rule 75 (T -> MINUS TERMINO T .)
    C_CHAR          reduce using rule 75 (T -> MINUS TERMINO T .)
    NAME            reduce using rule 75 (T -> MINUS TERMINO T .)
    FUNC            reduce using rule 75 (T -> MINUS TERMINO T .)
    MAIN            reduce using rule 75 (T -> MINUS TERMINO T .)
    LBRACKET        reduce using rule 75 (T -> MINUS TERMINO T .)
    RPAREN          reduce using rule 75 (T -> MINUS TERMINO T .)
    RSBRACKET       reduce using rule 75 (T -> MINUS TERMINO T .)
    GREATER_OR_EQUAL reduce using rule 75 (T -> MINUS TERMINO T .)
    LESS_OR_EQUAL   reduce using rule 75 (T -> MINUS TERMINO T .)
    GREATER_THAN    reduce using rule 75 (T -> MINUS TERMINO T .)
    LESS_THAN       reduce using rule 75 (T -> MINUS TERMINO T .)
    IS_EQUAL        reduce using rule 75 (T -> MINUS TERMINO T .)
    NOT_EQUAL       reduce using rule 75 (T -> MINUS TERMINO T .)
    AND             reduce using rule 75 (T -> MINUS TERMINO T .)
    OR              reduce using rule 75 (T -> MINUS TERMINO T .)
    EQUALS          reduce using rule 75 (T -> MINUS TERMINO T .)
    RBRACKET        reduce using rule 75 (T -> MINUS TERMINO T .)


state 135

    (62) G -> G_EXP AND G .

    COMMA           reduce using rule 62 (G -> G_EXP AND G .)
    SEMICOLON       reduce using rule 62 (G -> G_EXP AND G .)
    DIVIDE          reduce using rule 62 (G -> G_EXP AND G .)
    MULTIPLY        reduce using rule 62 (G -> G_EXP AND G .)
    PLUS            reduce using rule 62 (G -> G_EXP AND G .)
    MINUS           reduce using rule 62 (G -> G_EXP AND G .)
    LPAREN          reduce using rule 62 (G -> G_EXP AND G .)
    C_INT           reduce using rule 62 (G -> G_EXP AND G .)
    C_FLOAT         reduce using rule 62 (G -> G_EXP AND G .)
    C_CHAR          reduce using rule 62 (G -> G_EXP AND G .)
    NAME            reduce using rule 62 (G -> G_EXP AND G .)
    FUNC            reduce using rule 62 (G -> G_EXP AND G .)
    MAIN            reduce using rule 62 (G -> G_EXP AND G .)
    LBRACKET        reduce using rule 62 (G -> G_EXP AND G .)
    RPAREN          reduce using rule 62 (G -> G_EXP AND G .)
    RSBRACKET       reduce using rule 62 (G -> G_EXP AND G .)
    GREATER_OR_EQUAL reduce using rule 62 (G -> G_EXP AND G .)
    LESS_OR_EQUAL   reduce using rule 62 (G -> G_EXP AND G .)
    GREATER_THAN    reduce using rule 62 (G -> G_EXP AND G .)
    LESS_THAN       reduce using rule 62 (G -> G_EXP AND G .)
    IS_EQUAL        reduce using rule 62 (G -> G_EXP AND G .)
    NOT_EQUAL       reduce using rule 62 (G -> G_EXP AND G .)
    AND             reduce using rule 62 (G -> G_EXP AND G .)
    OR              reduce using rule 62 (G -> G_EXP AND G .)
    EQUALS          reduce using rule 62 (G -> G_EXP AND G .)
    RBRACKET        reduce using rule 62 (G -> G_EXP AND G .)


state 136

    (64) B -> GREATER_OR_EQUAL EXP .

    COMMA           reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    PLUS            reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    MINUS           reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    LPAREN          reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    C_INT           reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    NAME            reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    FUNC            reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    MAIN            reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    RPAREN          reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    AND             reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    OR              reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    EQUALS          reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 64 (B -> GREATER_OR_EQUAL EXP .)


state 137

    (65) B -> LESS_OR_EQUAL EXP .

    COMMA           reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    SEMICOLON       reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    DIVIDE          reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    MULTIPLY        reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    PLUS            reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    MINUS           reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    LPAREN          reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    C_INT           reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    C_FLOAT         reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    C_CHAR          reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    NAME            reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    FUNC            reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    MAIN            reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    LBRACKET        reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    RPAREN          reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    RSBRACKET       reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    GREATER_THAN    reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    LESS_THAN       reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    IS_EQUAL        reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    AND             reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    OR              reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    EQUALS          reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)
    RBRACKET        reduce using rule 65 (B -> LESS_OR_EQUAL EXP .)


state 138

    (66) B -> GREATER_THAN EXP .

    COMMA           reduce using rule 66 (B -> GREATER_THAN EXP .)
    SEMICOLON       reduce using rule 66 (B -> GREATER_THAN EXP .)
    DIVIDE          reduce using rule 66 (B -> GREATER_THAN EXP .)
    MULTIPLY        reduce using rule 66 (B -> GREATER_THAN EXP .)
    PLUS            reduce using rule 66 (B -> GREATER_THAN EXP .)
    MINUS           reduce using rule 66 (B -> GREATER_THAN EXP .)
    LPAREN          reduce using rule 66 (B -> GREATER_THAN EXP .)
    C_INT           reduce using rule 66 (B -> GREATER_THAN EXP .)
    C_FLOAT         reduce using rule 66 (B -> GREATER_THAN EXP .)
    C_CHAR          reduce using rule 66 (B -> GREATER_THAN EXP .)
    NAME            reduce using rule 66 (B -> GREATER_THAN EXP .)
    FUNC            reduce using rule 66 (B -> GREATER_THAN EXP .)
    MAIN            reduce using rule 66 (B -> GREATER_THAN EXP .)
    LBRACKET        reduce using rule 66 (B -> GREATER_THAN EXP .)
    RPAREN          reduce using rule 66 (B -> GREATER_THAN EXP .)
    RSBRACKET       reduce using rule 66 (B -> GREATER_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 66 (B -> GREATER_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 66 (B -> GREATER_THAN EXP .)
    GREATER_THAN    reduce using rule 66 (B -> GREATER_THAN EXP .)
    LESS_THAN       reduce using rule 66 (B -> GREATER_THAN EXP .)
    IS_EQUAL        reduce using rule 66 (B -> GREATER_THAN EXP .)
    NOT_EQUAL       reduce using rule 66 (B -> GREATER_THAN EXP .)
    AND             reduce using rule 66 (B -> GREATER_THAN EXP .)
    OR              reduce using rule 66 (B -> GREATER_THAN EXP .)
    EQUALS          reduce using rule 66 (B -> GREATER_THAN EXP .)
    RBRACKET        reduce using rule 66 (B -> GREATER_THAN EXP .)


state 139

    (67) B -> LESS_THAN EXP .

    COMMA           reduce using rule 67 (B -> LESS_THAN EXP .)
    SEMICOLON       reduce using rule 67 (B -> LESS_THAN EXP .)
    DIVIDE          reduce using rule 67 (B -> LESS_THAN EXP .)
    MULTIPLY        reduce using rule 67 (B -> LESS_THAN EXP .)
    PLUS            reduce using rule 67 (B -> LESS_THAN EXP .)
    MINUS           reduce using rule 67 (B -> LESS_THAN EXP .)
    LPAREN          reduce using rule 67 (B -> LESS_THAN EXP .)
    C_INT           reduce using rule 67 (B -> LESS_THAN EXP .)
    C_FLOAT         reduce using rule 67 (B -> LESS_THAN EXP .)
    C_CHAR          reduce using rule 67 (B -> LESS_THAN EXP .)
    NAME            reduce using rule 67 (B -> LESS_THAN EXP .)
    FUNC            reduce using rule 67 (B -> LESS_THAN EXP .)
    MAIN            reduce using rule 67 (B -> LESS_THAN EXP .)
    LBRACKET        reduce using rule 67 (B -> LESS_THAN EXP .)
    RPAREN          reduce using rule 67 (B -> LESS_THAN EXP .)
    RSBRACKET       reduce using rule 67 (B -> LESS_THAN EXP .)
    GREATER_OR_EQUAL reduce using rule 67 (B -> LESS_THAN EXP .)
    LESS_OR_EQUAL   reduce using rule 67 (B -> LESS_THAN EXP .)
    GREATER_THAN    reduce using rule 67 (B -> LESS_THAN EXP .)
    LESS_THAN       reduce using rule 67 (B -> LESS_THAN EXP .)
    IS_EQUAL        reduce using rule 67 (B -> LESS_THAN EXP .)
    NOT_EQUAL       reduce using rule 67 (B -> LESS_THAN EXP .)
    AND             reduce using rule 67 (B -> LESS_THAN EXP .)
    OR              reduce using rule 67 (B -> LESS_THAN EXP .)
    EQUALS          reduce using rule 67 (B -> LESS_THAN EXP .)
    RBRACKET        reduce using rule 67 (B -> LESS_THAN EXP .)


state 140

    (68) B -> IS_EQUAL EXP .

    COMMA           reduce using rule 68 (B -> IS_EQUAL EXP .)
    SEMICOLON       reduce using rule 68 (B -> IS_EQUAL EXP .)
    DIVIDE          reduce using rule 68 (B -> IS_EQUAL EXP .)
    MULTIPLY        reduce using rule 68 (B -> IS_EQUAL EXP .)
    PLUS            reduce using rule 68 (B -> IS_EQUAL EXP .)
    MINUS           reduce using rule 68 (B -> IS_EQUAL EXP .)
    LPAREN          reduce using rule 68 (B -> IS_EQUAL EXP .)
    C_INT           reduce using rule 68 (B -> IS_EQUAL EXP .)
    C_FLOAT         reduce using rule 68 (B -> IS_EQUAL EXP .)
    C_CHAR          reduce using rule 68 (B -> IS_EQUAL EXP .)
    NAME            reduce using rule 68 (B -> IS_EQUAL EXP .)
    FUNC            reduce using rule 68 (B -> IS_EQUAL EXP .)
    MAIN            reduce using rule 68 (B -> IS_EQUAL EXP .)
    LBRACKET        reduce using rule 68 (B -> IS_EQUAL EXP .)
    RPAREN          reduce using rule 68 (B -> IS_EQUAL EXP .)
    RSBRACKET       reduce using rule 68 (B -> IS_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 68 (B -> IS_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 68 (B -> IS_EQUAL EXP .)
    GREATER_THAN    reduce using rule 68 (B -> IS_EQUAL EXP .)
    LESS_THAN       reduce using rule 68 (B -> IS_EQUAL EXP .)
    IS_EQUAL        reduce using rule 68 (B -> IS_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 68 (B -> IS_EQUAL EXP .)
    AND             reduce using rule 68 (B -> IS_EQUAL EXP .)
    OR              reduce using rule 68 (B -> IS_EQUAL EXP .)
    EQUALS          reduce using rule 68 (B -> IS_EQUAL EXP .)
    RBRACKET        reduce using rule 68 (B -> IS_EQUAL EXP .)


state 141

    (69) B -> NOT_EQUAL EXP .

    COMMA           reduce using rule 69 (B -> NOT_EQUAL EXP .)
    SEMICOLON       reduce using rule 69 (B -> NOT_EQUAL EXP .)
    DIVIDE          reduce using rule 69 (B -> NOT_EQUAL EXP .)
    MULTIPLY        reduce using rule 69 (B -> NOT_EQUAL EXP .)
    PLUS            reduce using rule 69 (B -> NOT_EQUAL EXP .)
    MINUS           reduce using rule 69 (B -> NOT_EQUAL EXP .)
    LPAREN          reduce using rule 69 (B -> NOT_EQUAL EXP .)
    C_INT           reduce using rule 69 (B -> NOT_EQUAL EXP .)
    C_FLOAT         reduce using rule 69 (B -> NOT_EQUAL EXP .)
    C_CHAR          reduce using rule 69 (B -> NOT_EQUAL EXP .)
    NAME            reduce using rule 69 (B -> NOT_EQUAL EXP .)
    FUNC            reduce using rule 69 (B -> NOT_EQUAL EXP .)
    MAIN            reduce using rule 69 (B -> NOT_EQUAL EXP .)
    LBRACKET        reduce using rule 69 (B -> NOT_EQUAL EXP .)
    RPAREN          reduce using rule 69 (B -> NOT_EQUAL EXP .)
    RSBRACKET       reduce using rule 69 (B -> NOT_EQUAL EXP .)
    GREATER_OR_EQUAL reduce using rule 69 (B -> NOT_EQUAL EXP .)
    LESS_OR_EQUAL   reduce using rule 69 (B -> NOT_EQUAL EXP .)
    GREATER_THAN    reduce using rule 69 (B -> NOT_EQUAL EXP .)
    LESS_THAN       reduce using rule 69 (B -> NOT_EQUAL EXP .)
    IS_EQUAL        reduce using rule 69 (B -> NOT_EQUAL EXP .)
    NOT_EQUAL       reduce using rule 69 (B -> NOT_EQUAL EXP .)
    AND             reduce using rule 69 (B -> NOT_EQUAL EXP .)
    OR              reduce using rule 69 (B -> NOT_EQUAL EXP .)
    EQUALS          reduce using rule 69 (B -> NOT_EQUAL EXP .)
    RBRACKET        reduce using rule 69 (B -> NOT_EQUAL EXP .)


state 142

    (78) F2 -> DIVIDE FACTOR F2 .

    COMMA           reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    SEMICOLON       reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    DIVIDE          reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    MULTIPLY        reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    PLUS            reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    MINUS           reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    LPAREN          reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    C_INT           reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    C_FLOAT         reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    C_CHAR          reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    NAME            reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    FUNC            reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    MAIN            reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    LBRACKET        reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    RPAREN          reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    RSBRACKET       reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    GREATER_THAN    reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    LESS_THAN       reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    IS_EQUAL        reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    NOT_EQUAL       reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    AND             reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    OR              reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    EQUALS          reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)
    RBRACKET        reduce using rule 78 (F2 -> DIVIDE FACTOR F2 .)


state 143

    (79) F2 -> MULTIPLY FACTOR F2 .

    COMMA           reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    SEMICOLON       reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    DIVIDE          reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    MULTIPLY        reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    PLUS            reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    MINUS           reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    LPAREN          reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    C_INT           reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    C_FLOAT         reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    C_CHAR          reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    NAME            reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    FUNC            reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    MAIN            reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    LBRACKET        reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    RPAREN          reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    RSBRACKET       reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_OR_EQUAL reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_OR_EQUAL   reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    GREATER_THAN    reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    LESS_THAN       reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    IS_EQUAL        reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    NOT_EQUAL       reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    AND             reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    OR              reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    EQUALS          reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)
    RBRACKET        reduce using rule 79 (F2 -> MULTIPLY FACTOR F2 .)


state 144

    (16) CUERPO -> LBRACKET E RBRACKET .

    $end            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    FUNC            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    MAIN            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    ELSE            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    NAME            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    RETURN          reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    READ            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    PRINT           reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    IF              reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    WHILE           reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    FROM            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    LPAREN          reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    C_INT           reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    C_FLOAT         reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    C_CHAR          reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    RPAREN          reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)


state 145

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 165

state 146

    (11) V4 -> VARS .

    LBRACKET        reduce using rule 11 (V4 -> VARS .)


state 147

    (12) V4 -> empty .

    LBRACKET        reduce using rule 12 (V4 -> empty .)


state 148

    (13) PARAMS -> TIPO NAME P1 .

    RPAREN          reduce using rule 13 (PARAMS -> TIPO NAME P1 .)
    COMMA           reduce using rule 13 (PARAMS -> TIPO NAME P1 .)


state 149

    (14) P1 -> COMMA . PARAMS P1
    (13) PARAMS -> . TIPO NAME P1
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    PARAMS                         shift and go to state 166
    TIPO                           shift and go to state 74

state 150

    (15) P1 -> empty .

    RPAREN          reduce using rule 15 (P1 -> empty .)
    COMMA           reduce using rule 15 (P1 -> empty .)


state 151

    (47) V3 -> VARIABLE . COMMA V3
    (48) V3 -> VARIABLE .

    COMMA           shift and go to state 167
    FUNC            reduce using rule 48 (V3 -> VARIABLE .)
    MAIN            reduce using rule 48 (V3 -> VARIABLE .)
    LBRACKET        reduce using rule 48 (V3 -> VARIABLE .)
    RPAREN          reduce using rule 48 (V3 -> VARIABLE .)


state 152

    (5) V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .

    FUNC            reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    MAIN            reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    LBRACKET        reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)
    RPAREN          reduce using rule 5 (V1 -> TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3 .)


state 153

    (8) V3 -> borrarListaVar . V1
    (5) V1 -> . TIPO VARIABLE agregarVarLista V2 SEMICOLON agregarVariables V3
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    V1                             shift and go to state 168
    TIPO                           shift and go to state 22

state 154

    (9) V3 -> empty .

    FUNC            reduce using rule 9 (V3 -> empty .)
    MAIN            reduce using rule 9 (V3 -> empty .)
    LBRACKET        reduce using rule 9 (V3 -> empty .)
    RPAREN          reduce using rule 9 (V3 -> empty .)


state 155

    (6) V2 -> COMMA VARIABLE agregarVarLista V2 .

    SEMICOLON       reduce using rule 6 (V2 -> COMMA VARIABLE agregarVarLista V2 .)


state 156

    (41) LLAMADA -> NAME LPAREN E1 . RPAREN SEMICOLON
    (44) LLAMADAF -> NAME LPAREN E1 . RPAREN

    RPAREN          shift and go to state 169


state 157

    (43) E1 -> EXP COMMA E1 .

    RPAREN          reduce using rule 43 (E1 -> EXP COMMA E1 .)
    RBRACKET        reduce using rule 43 (E1 -> EXP COMMA E1 .)


state 158

    (40) ASIGNACION -> VARIABLE EQUALS EXP . SEMICOLON

    SEMICOLON       shift and go to state 170


state 159

    (45) RETORNO -> RETURN LPAREN EXP . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 160

    (46) LECTURA -> READ LPAREN V3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 172


state 161

    (49) ESCRITURA -> PRINT LPAREN E2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 173


state 162

    (52) CONDICION -> IF LPAREN H_EXP . RPAREN THEN CUERPO ELSE1

    RPAREN          shift and go to state 174


state 163

    (55) CICLO_W -> WHILE LPAREN H_EXP . RPAREN DO CUERPO

    RPAREN          shift and go to state 175


state 164

    (56) CICLO_F -> FROM NAME EQUALS . C_INT TO C_INT DO CUERPO

    C_INT           shift and go to state 176


state 165

    (10) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO .

    FUNC            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO .)
    MAIN            reduce using rule 10 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN PARAMS RPAREN V4 CUERPO .)


state 166

    (14) P1 -> COMMA PARAMS . P1
    (14) P1 -> . COMMA PARAMS P1
    (15) P1 -> . empty
    (87) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 149
    RPAREN          reduce using rule 87 (empty -> .)

  ! COMMA           [ reduce using rule 87 (empty -> .) ]

    P1                             shift and go to state 177
    empty                          shift and go to state 150

state 167

    (47) V3 -> VARIABLE COMMA . V3
    (8) V3 -> . borrarListaVar V1
    (9) V3 -> . empty
    (47) V3 -> . VARIABLE COMMA V3
    (48) V3 -> . VARIABLE
    (95) borrarListaVar -> .
    (87) empty -> .
    (29) VARIABLE -> . NAME E2

    INT             reduce using rule 95 (borrarListaVar -> .)
    FLOAT           reduce using rule 95 (borrarListaVar -> .)
    CHAR            reduce using rule 95 (borrarListaVar -> .)
    FUNC            reduce using rule 87 (empty -> .)
    MAIN            reduce using rule 87 (empty -> .)
    LBRACKET        reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    NAME            shift and go to state 30

    VARIABLE                       shift and go to state 151
    V3                             shift and go to state 178
    borrarListaVar                 shift and go to state 153
    empty                          shift and go to state 154

state 168

    (8) V3 -> borrarListaVar V1 .

    FUNC            reduce using rule 8 (V3 -> borrarListaVar V1 .)
    MAIN            reduce using rule 8 (V3 -> borrarListaVar V1 .)
    LBRACKET        reduce using rule 8 (V3 -> borrarListaVar V1 .)
    RPAREN          reduce using rule 8 (V3 -> borrarListaVar V1 .)


state 169

    (41) LLAMADA -> NAME LPAREN E1 RPAREN . SEMICOLON
    (44) LLAMADAF -> NAME LPAREN E1 RPAREN .

    SEMICOLON       shift and go to state 179
    DIVIDE          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MULTIPLY        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    PLUS            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    MINUS           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LPAREN          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_INT           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_FLOAT         reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    C_CHAR          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NAME            reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    COMMA           reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_OR_EQUAL reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_OR_EQUAL   reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    GREATER_THAN    reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    LESS_THAN       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    IS_EQUAL        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    NOT_EQUAL       reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RPAREN          reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    AND             reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    OR              reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)
    RBRACKET        reduce using rule 44 (LLAMADAF -> NAME LPAREN E1 RPAREN .)


state 170

    (40) ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .

    NAME            reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RETURN          reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    READ            reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    PRINT           reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    IF              reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    WHILE           reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    FROM            reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    LPAREN          reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_INT           reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_FLOAT         reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    C_CHAR          reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RPAREN          reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)
    RBRACKET        reduce using rule 40 (ASIGNACION -> VARIABLE EQUALS EXP SEMICOLON .)


state 171

    (45) RETORNO -> RETURN LPAREN EXP RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 180


state 172

    (46) LECTURA -> READ LPAREN V3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 173

    (49) ESCRITURA -> PRINT LPAREN E2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 174

    (52) CONDICION -> IF LPAREN H_EXP RPAREN . THEN CUERPO ELSE1

    THEN            shift and go to state 183


state 175

    (55) CICLO_W -> WHILE LPAREN H_EXP RPAREN . DO CUERPO

    DO              shift and go to state 184


state 176

    (56) CICLO_F -> FROM NAME EQUALS C_INT . TO C_INT DO CUERPO

    TO              shift and go to state 185


state 177

    (14) P1 -> COMMA PARAMS P1 .

    RPAREN          reduce using rule 14 (P1 -> COMMA PARAMS P1 .)
    COMMA           reduce using rule 14 (P1 -> COMMA PARAMS P1 .)


state 178

    (47) V3 -> VARIABLE COMMA V3 .

    FUNC            reduce using rule 47 (V3 -> VARIABLE COMMA V3 .)
    MAIN            reduce using rule 47 (V3 -> VARIABLE COMMA V3 .)
    LBRACKET        reduce using rule 47 (V3 -> VARIABLE COMMA V3 .)
    RPAREN          reduce using rule 47 (V3 -> VARIABLE COMMA V3 .)


state 179

    (41) LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .

    NAME            reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    READ            reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    PRINT           reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    IF              reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    FROM            reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_INT           reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 41 (LLAMADA -> NAME LPAREN E1 RPAREN SEMICOLON .)


state 180

    (45) RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .

    NAME            reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RETURN          reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    READ            reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    PRINT           reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    IF              reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    FROM            reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    LPAREN          reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_INT           reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RPAREN          reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 45 (RETORNO -> RETURN LPAREN EXP RPAREN SEMICOLON .)


state 181

    (46) LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .

    NAME            reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    READ            reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    IF              reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    FROM            reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_INT           reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 46 (LECTURA -> READ LPAREN V3 RPAREN SEMICOLON .)


state 182

    (49) ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .

    NAME            reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RETURN          reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    READ            reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    PRINT           reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    IF              reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    FROM            reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_INT           reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_FLOAT         reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    C_CHAR          reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 49 (ESCRITURA -> PRINT LPAREN E2 RPAREN SEMICOLON .)


state 183

    (52) CONDICION -> IF LPAREN H_EXP RPAREN THEN . CUERPO ELSE1
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 186

state 184

    (55) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 187

state 185

    (56) CICLO_F -> FROM NAME EQUALS C_INT TO . C_INT DO CUERPO

    C_INT           shift and go to state 188


state 186

    (52) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO . ELSE1
    (53) ELSE1 -> . ELSE CUERPO
    (54) ELSE1 -> . empty
    (87) empty -> .

    ELSE            shift and go to state 190
    NAME            reduce using rule 87 (empty -> .)
    RETURN          reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    PRINT           reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FROM            reduce using rule 87 (empty -> .)
    LPAREN          reduce using rule 87 (empty -> .)
    C_INT           reduce using rule 87 (empty -> .)
    C_FLOAT         reduce using rule 87 (empty -> .)
    C_CHAR          reduce using rule 87 (empty -> .)
    RPAREN          reduce using rule 87 (empty -> .)
    RBRACKET        reduce using rule 87 (empty -> .)

    ELSE1                          shift and go to state 189
    empty                          shift and go to state 191

state 187

    (55) CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .

    NAME            reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RETURN          reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    READ            reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    PRINT           reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    IF              reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    WHILE           reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    FROM            reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    LPAREN          reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_INT           reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_FLOAT         reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    C_CHAR          reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RPAREN          reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)
    RBRACKET        reduce using rule 55 (CICLO_W -> WHILE LPAREN H_EXP RPAREN DO CUERPO .)


state 188

    (56) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT . DO CUERPO

    DO              shift and go to state 192


state 189

    (52) CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .

    NAME            reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RETURN          reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    READ            reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    PRINT           reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    IF              reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    WHILE           reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    FROM            reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    LPAREN          reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_INT           reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_FLOAT         reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    C_CHAR          reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RPAREN          reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)
    RBRACKET        reduce using rule 52 (CONDICION -> IF LPAREN H_EXP RPAREN THEN CUERPO ELSE1 .)


state 190

    (53) ELSE1 -> ELSE . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 193

state 191

    (54) ELSE1 -> empty .

    NAME            reduce using rule 54 (ELSE1 -> empty .)
    RETURN          reduce using rule 54 (ELSE1 -> empty .)
    READ            reduce using rule 54 (ELSE1 -> empty .)
    PRINT           reduce using rule 54 (ELSE1 -> empty .)
    IF              reduce using rule 54 (ELSE1 -> empty .)
    WHILE           reduce using rule 54 (ELSE1 -> empty .)
    FROM            reduce using rule 54 (ELSE1 -> empty .)
    LPAREN          reduce using rule 54 (ELSE1 -> empty .)
    C_INT           reduce using rule 54 (ELSE1 -> empty .)
    C_FLOAT         reduce using rule 54 (ELSE1 -> empty .)
    C_CHAR          reduce using rule 54 (ELSE1 -> empty .)
    RPAREN          reduce using rule 54 (ELSE1 -> empty .)
    RBRACKET        reduce using rule 54 (ELSE1 -> empty .)


state 192

    (56) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 72

    CUERPO                         shift and go to state 194

state 193

    (53) ELSE1 -> ELSE CUERPO .

    NAME            reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    RETURN          reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    READ            reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    PRINT           reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    IF              reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    WHILE           reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    FROM            reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    LPAREN          reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    C_INT           reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    C_FLOAT         reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    C_CHAR          reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    RPAREN          reduce using rule 53 (ELSE1 -> ELSE CUERPO .)
    RBRACKET        reduce using rule 53 (ELSE1 -> ELSE CUERPO .)


state 194

    (56) CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .

    NAME            reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RETURN          reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    READ            reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    PRINT           reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    IF              reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    WHILE           reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    FROM            reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    LPAREN          reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_INT           reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_FLOAT         reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    C_CHAR          reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RPAREN          reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)
    RBRACKET        reduce using rule 56 (CICLO_F -> FROM NAME EQUALS C_INT TO C_INT DO CUERPO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 30 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 30 resolved as shift
WARNING: shift/reduce conflict for NAME in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 34 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 34 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for NAME in state 34 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 41 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 41 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 41 resolved as shift
WARNING: shift/reduce conflict for NAME in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 42 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 56 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 56 resolved as shift
WARNING: shift/reduce conflict for NAME in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 77 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 77 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 77 resolved as shift
WARNING: shift/reduce conflict for NAME in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 98 resolved as shift
WARNING: shift/reduce conflict for NAME in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 99 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 99 resolved as shift
WARNING: shift/reduce conflict for NAME in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 100 resolved as shift
WARNING: shift/reduce conflict for C_INT in state 100 resolved as shift
WARNING: shift/reduce conflict for C_FLOAT in state 100 resolved as shift
WARNING: shift/reduce conflict for C_CHAR in state 100 resolved as shift
WARNING: shift/reduce conflict for NAME in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 166 resolved as shift
WARNING: reduce/reduce conflict in state 80 resolved using rule (E1 -> EXP)
WARNING: rejected rule (empty -> <empty>) in state 80
