Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
Rule 2     F -> FUNCION F
Rule 3     F -> empty
Rule 4     VARS -> borrarListaVar VAR V1
Rule 5     VARS -> empty
Rule 6     V1 -> TIPO VARIABLEDer V2 SEMICOLON V3
Rule 7     V2 -> COMMA VARIABLEDer V2
Rule 8     V2 -> empty
Rule 9     V3 -> V1
Rule 10    V3 -> empty
Rule 11    FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
Rule 12    PARAMS -> TIPO NAME agregarVarLista P1
Rule 13    P1 -> P2
Rule 14    P1 -> empty
Rule 15    P2 -> COMMA PARAMS P1
Rule 16    CUERPO -> LBRACKET E RBRACKET
Rule 17    E -> E1
Rule 18    E -> empty
Rule 19    E1 -> ESTATUTO
Rule 20    E1 -> ESTATUTO E1
Rule 21    TIPO -> INT
Rule 22    TIPO -> FLOAT
Rule 23    TIPO -> CHAR
Rule 24    TIPO_FUNCION -> INT
Rule 25    TIPO_FUNCION -> FLOAT
Rule 26    TIPO_FUNCION -> CHAR
Rule 27    TIPO_FUNCION -> VOID
Rule 28    PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc
Rule 29    VARIABLE -> NAME agregarPilaOp E2
Rule 30    E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
Rule 31    E2 -> empty
Rule 32    VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der
Rule 33    E2Der -> LSBRACKET C_INT declararArray RSBRACKET
Rule 34    E2Der -> empty
Rule 35    ESTATUTO -> ASIGNACION
Rule 36    ESTATUTO -> LLAMADA
Rule 37    ESTATUTO -> RETORNO
Rule 38    ESTATUTO -> LECTURA
Rule 39    ESTATUTO -> ESCRITURA
Rule 40    ESTATUTO -> CONDICION
Rule 41    ESTATUTO -> CICLO_W
Rule 42    ESTATUTO -> CICLO_F
Rule 43    ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
Rule 44    LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
Rule 45    E4 -> EXP generarParam
Rule 46    E4 -> EXP generarParam COMMA E4
Rule 47    E4 -> empty
Rule 48    LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
Rule 49    RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON
Rule 50    LECTURA -> READ LPAREN V4 RPAREN SEMICOLON
Rule 51    V4 -> VARIABLE popRead COMMA V4
Rule 52    V4 -> VARIABLE popRead
Rule 53    ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON
Rule 54    E3 -> S_EXP popPrint
Rule 55    E3 -> S_EXP popPrint COMMA E3
Rule 56    CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
Rule 57    ELSE1 -> ELSE gotoElse CUERPO
Rule 58    ELSE1 -> empty
Rule 59    CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
Rule 60    CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
Rule 61    H_EXP -> T_EXP
Rule 62    H_EXP -> T_EXP OR meterOperador H_EXP popComp
Rule 63    T_EXP -> G_EXP
Rule 64    T_EXP -> G_EXP AND meterOperador T_EXP popComp
Rule 65    G_EXP -> EXP B popBool
Rule 66    B -> GREATER_OR_EQUAL meterOperador G_EXP
Rule 67    B -> LESS_OR_EQUAL meterOperador G_EXP
Rule 68    B -> GREATER_THAN meterOperador G_EXP
Rule 69    B -> LESS_THAN meterOperador G_EXP
Rule 70    B -> IS_EQUAL meterOperador G_EXP
Rule 71    B -> NOT_EQUAL meterOperador G_EXP
Rule 72    B -> empty
Rule 73    S_EXP -> C_STRING agregarConstString
Rule 74    S_EXP -> EXP
Rule 75    EXP -> TERMINO popSumaResta T
Rule 76    T -> PLUS meterOperador EXP
Rule 77    T -> MINUS meterOperador EXP
Rule 78    T -> empty
Rule 79    TERMINO -> FACTOR popMultDiv F2
Rule 80    F2 -> DIVIDE meterOperador TERMINO
Rule 81    F2 -> MULTIPLY meterOperador TERMINO
Rule 82    F2 -> empty
Rule 83    FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
Rule 84    FACTOR -> C_INT agregarConstInt
Rule 85    FACTOR -> C_FLOAT agregarConstFloat
Rule 86    FACTOR -> C_CHAR agregarConstChar
Rule 87    FACTOR -> VARIABLE
Rule 88    FACTOR -> LLAMADAF
Rule 89    empty -> <empty>
Rule 90    generarGosub -> <empty>
Rule 91    verificarLlamada -> <empty>
Rule 92    verificarParam -> <empty>
Rule 93    generarParam -> <empty>
Rule 94    generarEra -> <empty>
Rule 95    verificarFunc -> <empty>
Rule 96    verificarFuncVoid -> <empty>
Rule 97    terminarFunc -> <empty>
Rule 98    agregarLocalVar -> <empty>
Rule 99    agregarLocalVarGlobal -> <empty>
Rule 100   agregarParamTable -> <empty>
Rule 101   guardarArreglo -> <empty>
Rule 102   verificarArreglo -> <empty>
Rule 103   declararArray -> <empty>
Rule 104   agregarFrom -> <empty>
Rule 105   crearCompFrom -> <empty>
Rule 106   sumarFrom -> <empty>
Rule 107   agregarConstInt -> <empty>
Rule 108   agregarConstFloat -> <empty>
Rule 109   agregarConstChar -> <empty>
Rule 110   agregarConstString -> <empty>
Rule 111   scopeGlobal -> <empty>
Rule 112   scopeLocal -> <empty>
Rule 113   scopeTemp -> <empty>
Rule 114   scopeConst -> <empty>
Rule 115   gotoIf -> <empty>
Rule 116   terminarGoto -> <empty>
Rule 117   agregarWhile -> <empty>
Rule 118   terminarWhile -> <empty>
Rule 119   gotoElse -> <empty>
Rule 120   meterFondoFalso -> <empty>
Rule 121   quitarFondoFalso -> <empty>
Rule 122   agregarPilaOp -> <empty>
Rule 123   popPrint -> <empty>
Rule 124   popRead -> <empty>
Rule 125   popReturn -> <empty>
Rule 126   popComp -> <empty>
Rule 127   popBool -> <empty>
Rule 128   popIgual -> <empty>
Rule 129   popMultDiv -> <empty>
Rule 130   popSumaResta -> <empty>
Rule 131   meterIgual -> <empty>
Rule 132   meterBool -> <empty>
Rule 133   meterMultDiv -> <empty>
Rule 134   meterSumaResta -> <empty>
Rule 135   meterOperador -> <empty>
Rule 136   crearFuncGlobal -> <empty>
Rule 137   crearFuncMain -> <empty>
Rule 138   agregarFunc -> <empty>
Rule 139   agregarVariables -> <empty>
Rule 140   printFunciones -> <empty>
Rule 141   printTodo -> <empty>
Rule 142   agregarVarLista -> <empty>
Rule 143   borrarListaVar -> <empty>

Terminals, with rules where they appear

AND                  : 64
CHAR                 : 23 26
COMMA                : 7 15 46 51 55
C_CHAR               : 86
C_FLOAT              : 85
C_INT                : 33 84
C_STRING             : 73
DIVIDE               : 80
DO                   : 59 60
ELSE                 : 57
EQUALS               : 43 60
FLOAT                : 22 25
FROM                 : 60
FUNC                 : 11
GREATER_OR_EQUAL     : 66
GREATER_THAN         : 68
IF                   : 56
INT                  : 21 24
IS_EQUAL             : 70
LBRACKET             : 16
LESS_OR_EQUAL        : 67
LESS_THAN            : 69
LPAREN               : 11 28 44 48 49 50 53 56 59 83
LSBRACKET            : 30 33
MAIN                 : 28
MINUS                : 77
MULTIPLY             : 81
NAME                 : 1 11 12 29 32 44 48
NOT_EQUAL            : 71
OR                   : 62
PLUS                 : 76
PRINT                : 53
PROGRAM              : 1
RBRACKET             : 16
READ                 : 50
RETURN               : 49
RPAREN               : 11 28 44 48 49 50 53 56 59 83
RSBRACKET            : 30 33
SEMICOLON            : 1 6 43 44 49 50 53
THEN                 : 56
TO                   : 60
VAR                  : 4
VOID                 : 27
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

ASIGNACION           : 35
B                    : 65
CICLO_F              : 42
CICLO_W              : 41
CONDICION            : 40
CUERPO               : 11 28 56 57 59 60
E                    : 16
E1                   : 17 20
E2                   : 29
E2Der                : 32
E3                   : 53 55
E4                   : 44 46 48
ELSE1                : 56
ESCRITURA            : 39
ESTATUTO             : 19 20
EXP                  : 30 43 45 46 49 60 60 65 74 76 77
F                    : 1 2
F2                   : 79
FACTOR               : 79
FUNCION              : 2
G_EXP                : 63 64 66 67 68 69 70 71
H_EXP                : 56 59 62 83
LECTURA              : 38
LLAMADA              : 36
LLAMADAF             : 88
P1                   : 12 15
P2                   : 13
PARAMS               : 11 15
PRINCIPAL            : 1
PROGRAMA             : 0
RETORNO              : 37
S_EXP                : 54 55
T                    : 75
TERMINO              : 75 80 81
TIPO                 : 6 12
TIPO_FUNCION         : 11
T_EXP                : 61 62 64
V1                   : 4 9
V2                   : 6 7
V3                   : 6
V4                   : 50 51
VARIABLE             : 43 51 52 60 87
VARIABLEDer          : 6 7
VARS                 : 1 11
agregarConstChar     : 86
agregarConstFloat    : 85
agregarConstInt      : 84
agregarConstString   : 73
agregarFrom          : 60
agregarFunc          : 11
agregarLocalVar      : 11
agregarLocalVarGlobal : 1
agregarParamTable    : 11
agregarPilaOp        : 29
agregarVarLista      : 12 32
agregarVariables     : 11 32
agregarWhile         : 59 60
borrarListaVar       : 4 11 32
crearCompFrom        : 60
crearFuncGlobal      : 1
crearFuncMain        : 28
declararArray        : 33
empty                : 3 5 8 10 14 18 31 34 47 58 72 78 82
generarEra           : 44 48
generarGosub         : 44 48
generarParam         : 45 46
gotoElse             : 57
gotoIf               : 56 59 60
guardarArreglo       : 30
meterBool            : 
meterFondoFalso      : 30 44 48 83
meterIgual           : 
meterMultDiv         : 
meterOperador        : 43 60 62 64 66 67 68 69 70 71 76 77 80 81
meterSumaResta       : 
popBool              : 65
popComp              : 62 64
popIgual             : 43 60
popMultDiv           : 79
popPrint             : 54 55
popRead              : 51 52
popReturn            : 49
popSumaResta         : 75
printFunciones       : 
printTodo            : 1
quitarFondoFalso     : 30 44 48 83
scopeConst           : 
scopeGlobal          : 1
scopeLocal           : 11
scopeTemp            : 
sumarFrom            : 60
terminarFunc         : 11 28
terminarGoto         : 56
terminarWhile        : 59 60
verificarArreglo     : 30
verificarFunc        : 48
verificarFuncVoid    : 44
verificarLlamada     : 48
verificarParam       : 44 48

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (136) crearFuncGlobal -> .

    PROGRAM         reduce using rule 136 (crearFuncGlobal -> .)

    PROGRAMA                       shift and go to state 1
    crearFuncGlobal                shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> crearFuncGlobal . PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    PROGRAM         shift and go to state 3


state 3

    (1) PROGRAMA -> crearFuncGlobal PROGRAM . NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    NAME            shift and go to state 4


state 4

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME . SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo

    SEMICOLON       shift and go to state 5


state 5

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON . scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (111) scopeGlobal -> .

    FUNC            reduce using rule 111 (scopeGlobal -> .)
    MAIN            reduce using rule 111 (scopeGlobal -> .)
    VAR             reduce using rule 111 (scopeGlobal -> .)

    scopeGlobal                    shift and go to state 6

state 6

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal . VARS F agregarLocalVarGlobal PRINCIPAL printTodo
    (4) VARS -> . borrarListaVar VAR V1
    (5) VARS -> . empty
    (143) borrarListaVar -> .
    (89) empty -> .

    VAR             reduce using rule 143 (borrarListaVar -> .)
    FUNC            reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)

    VARS                           shift and go to state 7
    borrarListaVar                 shift and go to state 8
    empty                          shift and go to state 9

state 7

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS . F agregarLocalVarGlobal PRINCIPAL printTodo
    (2) F -> . FUNCION F
    (3) F -> . empty
    (11) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (89) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 89 (empty -> .)

    F                              shift and go to state 10
    FUNCION                        shift and go to state 11
    empty                          shift and go to state 12

state 8

    (4) VARS -> borrarListaVar . VAR V1

    VAR             shift and go to state 14


state 9

    (5) VARS -> empty .

    FUNC            reduce using rule 5 (VARS -> empty .)
    MAIN            reduce using rule 5 (VARS -> empty .)
    LBRACKET        reduce using rule 5 (VARS -> empty .)


state 10

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F . agregarLocalVarGlobal PRINCIPAL printTodo
    (99) agregarLocalVarGlobal -> .

    MAIN            reduce using rule 99 (agregarLocalVarGlobal -> .)

    agregarLocalVarGlobal          shift and go to state 15

state 11

    (2) F -> FUNCION . F
    (2) F -> . FUNCION F
    (3) F -> . empty
    (11) FUNCION -> . FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (89) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 89 (empty -> .)

    FUNCION                        shift and go to state 11
    F                              shift and go to state 16
    empty                          shift and go to state 12

state 12

    (3) F -> empty .

    MAIN            reduce using rule 3 (F -> empty .)


state 13

    (11) FUNCION -> FUNC . TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (24) TIPO_FUNCION -> . INT
    (25) TIPO_FUNCION -> . FLOAT
    (26) TIPO_FUNCION -> . CHAR
    (27) TIPO_FUNCION -> . VOID

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    VOID            shift and go to state 21

    TIPO_FUNCION                   shift and go to state 17

state 14

    (4) VARS -> borrarListaVar VAR . V1
    (6) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    V1                             shift and go to state 22
    TIPO                           shift and go to state 23

state 15

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal . PRINCIPAL printTodo
    (28) PRINCIPAL -> . MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc

    MAIN            shift and go to state 28

    PRINCIPAL                      shift and go to state 27

state 16

    (2) F -> FUNCION F .

    MAIN            reduce using rule 2 (F -> FUNCION F .)


state 17

    (11) FUNCION -> FUNC TIPO_FUNCION . NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc

    NAME            shift and go to state 29


state 18

    (24) TIPO_FUNCION -> INT .

    NAME            reduce using rule 24 (TIPO_FUNCION -> INT .)


state 19

    (25) TIPO_FUNCION -> FLOAT .

    NAME            reduce using rule 25 (TIPO_FUNCION -> FLOAT .)


state 20

    (26) TIPO_FUNCION -> CHAR .

    NAME            reduce using rule 26 (TIPO_FUNCION -> CHAR .)


state 21

    (27) TIPO_FUNCION -> VOID .

    NAME            reduce using rule 27 (TIPO_FUNCION -> VOID .)


state 22

    (4) VARS -> borrarListaVar VAR V1 .

    FUNC            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    MAIN            reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)
    LBRACKET        reduce using rule 4 (VARS -> borrarListaVar VAR V1 .)


state 23

    (6) V1 -> TIPO . VARIABLEDer V2 SEMICOLON V3
    (32) VARIABLEDer -> . NAME agregarVarLista agregarVariables borrarListaVar E2Der

    NAME            shift and go to state 31

    VARIABLEDer                    shift and go to state 30

state 24

    (21) TIPO -> INT .

    NAME            reduce using rule 21 (TIPO -> INT .)


state 25

    (22) TIPO -> FLOAT .

    NAME            reduce using rule 22 (TIPO -> FLOAT .)


state 26

    (23) TIPO -> CHAR .

    NAME            reduce using rule 23 (TIPO -> CHAR .)


state 27

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL . printTodo
    (141) printTodo -> .

    $end            reduce using rule 141 (printTodo -> .)

    printTodo                      shift and go to state 32

state 28

    (28) PRINCIPAL -> MAIN . LPAREN crearFuncMain RPAREN CUERPO terminarFunc

    LPAREN          shift and go to state 33


state 29

    (11) FUNCION -> FUNC TIPO_FUNCION NAME . agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (138) agregarFunc -> .

    LPAREN          reduce using rule 138 (agregarFunc -> .)

    agregarFunc                    shift and go to state 34

state 30

    (6) V1 -> TIPO VARIABLEDer . V2 SEMICOLON V3
    (7) V2 -> . COMMA VARIABLEDer V2
    (8) V2 -> . empty
    (89) empty -> .

    COMMA           shift and go to state 36
    SEMICOLON       reduce using rule 89 (empty -> .)

    V2                             shift and go to state 35
    empty                          shift and go to state 37

state 31

    (32) VARIABLEDer -> NAME . agregarVarLista agregarVariables borrarListaVar E2Der
    (142) agregarVarLista -> .

    LSBRACKET       reduce using rule 142 (agregarVarLista -> .)
    COMMA           reduce using rule 142 (agregarVarLista -> .)
    SEMICOLON       reduce using rule 142 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 38

state 32

    (1) PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo .

    $end            reduce using rule 1 (PROGRAMA -> crearFuncGlobal PROGRAM NAME SEMICOLON scopeGlobal VARS F agregarLocalVarGlobal PRINCIPAL printTodo .)


state 33

    (28) PRINCIPAL -> MAIN LPAREN . crearFuncMain RPAREN CUERPO terminarFunc
    (137) crearFuncMain -> .

    RPAREN          reduce using rule 137 (crearFuncMain -> .)

    crearFuncMain                  shift and go to state 39

state 34

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc . LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc

    LPAREN          shift and go to state 40


state 35

    (6) V1 -> TIPO VARIABLEDer V2 . SEMICOLON V3

    SEMICOLON       shift and go to state 41


state 36

    (7) V2 -> COMMA . VARIABLEDer V2
    (32) VARIABLEDer -> . NAME agregarVarLista agregarVariables borrarListaVar E2Der

    NAME            shift and go to state 31

    VARIABLEDer                    shift and go to state 42

state 37

    (8) V2 -> empty .

    SEMICOLON       reduce using rule 8 (V2 -> empty .)


state 38

    (32) VARIABLEDer -> NAME agregarVarLista . agregarVariables borrarListaVar E2Der
    (139) agregarVariables -> .

    LSBRACKET       reduce using rule 139 (agregarVariables -> .)
    COMMA           reduce using rule 139 (agregarVariables -> .)
    SEMICOLON       reduce using rule 139 (agregarVariables -> .)

    agregarVariables               shift and go to state 43

state 39

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain . RPAREN CUERPO terminarFunc

    RPAREN          shift and go to state 44


state 40

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN . borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (143) borrarListaVar -> .

    INT             reduce using rule 143 (borrarListaVar -> .)
    FLOAT           reduce using rule 143 (borrarListaVar -> .)
    CHAR            reduce using rule 143 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 45

state 41

    (6) V1 -> TIPO VARIABLEDer V2 SEMICOLON . V3
    (9) V3 -> . V1
    (10) V3 -> . empty
    (6) V1 -> . TIPO VARIABLEDer V2 SEMICOLON V3
    (89) empty -> .
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    FUNC            reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)
    LBRACKET        reduce using rule 89 (empty -> .)
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    TIPO                           shift and go to state 23
    V3                             shift and go to state 46
    V1                             shift and go to state 47
    empty                          shift and go to state 48

state 42

    (7) V2 -> COMMA VARIABLEDer . V2
    (7) V2 -> . COMMA VARIABLEDer V2
    (8) V2 -> . empty
    (89) empty -> .

    COMMA           shift and go to state 36
    SEMICOLON       reduce using rule 89 (empty -> .)

    V2                             shift and go to state 49
    empty                          shift and go to state 37

state 43

    (32) VARIABLEDer -> NAME agregarVarLista agregarVariables . borrarListaVar E2Der
    (143) borrarListaVar -> .

    LSBRACKET       reduce using rule 143 (borrarListaVar -> .)
    COMMA           reduce using rule 143 (borrarListaVar -> .)
    SEMICOLON       reduce using rule 143 (borrarListaVar -> .)

    borrarListaVar                 shift and go to state 50

state 44

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN . CUERPO terminarFunc
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 51

state 45

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar . scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (112) scopeLocal -> .

    INT             reduce using rule 112 (scopeLocal -> .)
    FLOAT           reduce using rule 112 (scopeLocal -> .)
    CHAR            reduce using rule 112 (scopeLocal -> .)

    scopeLocal                     shift and go to state 53

state 46

    (6) V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .

    FUNC            reduce using rule 6 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)
    MAIN            reduce using rule 6 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)
    LBRACKET        reduce using rule 6 (V1 -> TIPO VARIABLEDer V2 SEMICOLON V3 .)


state 47

    (9) V3 -> V1 .

    FUNC            reduce using rule 9 (V3 -> V1 .)
    MAIN            reduce using rule 9 (V3 -> V1 .)
    LBRACKET        reduce using rule 9 (V3 -> V1 .)


state 48

    (10) V3 -> empty .

    FUNC            reduce using rule 10 (V3 -> empty .)
    MAIN            reduce using rule 10 (V3 -> empty .)
    LBRACKET        reduce using rule 10 (V3 -> empty .)


state 49

    (7) V2 -> COMMA VARIABLEDer V2 .

    SEMICOLON       reduce using rule 7 (V2 -> COMMA VARIABLEDer V2 .)


state 50

    (32) VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar . E2Der
    (33) E2Der -> . LSBRACKET C_INT declararArray RSBRACKET
    (34) E2Der -> . empty
    (89) empty -> .

    LSBRACKET       shift and go to state 55
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)

    E2Der                          shift and go to state 54
    empty                          shift and go to state 56

state 51

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO . terminarFunc
    (97) terminarFunc -> .

    $end            reduce using rule 97 (terminarFunc -> .)

    terminarFunc                   shift and go to state 57

state 52

    (16) CUERPO -> LBRACKET . E RBRACKET
    (17) E -> . E1
    (18) E -> . empty
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (89) empty -> .
    (35) ESTATUTO -> . ASIGNACION
    (36) ESTATUTO -> . LLAMADA
    (37) ESTATUTO -> . RETORNO
    (38) ESTATUTO -> . LECTURA
    (39) ESTATUTO -> . ESCRITURA
    (40) ESTATUTO -> . CONDICION
    (41) ESTATUTO -> . CICLO_W
    (42) ESTATUTO -> . CICLO_F
    (43) ASIGNACION -> . VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
    (44) LLAMADA -> . NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (49) RETORNO -> . RETURN LPAREN EXP popReturn RPAREN SEMICOLON
    (50) LECTURA -> . READ LPAREN V4 RPAREN SEMICOLON
    (53) ESCRITURA -> . PRINT LPAREN E3 RPAREN SEMICOLON
    (56) CONDICION -> . IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (59) CICLO_W -> . WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (60) CICLO_F -> . FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (29) VARIABLE -> . NAME agregarPilaOp E2

    RBRACKET        reduce using rule 89 (empty -> .)
    NAME            shift and go to state 71
    RETURN          shift and go to state 72
    READ            shift and go to state 73
    PRINT           shift and go to state 74
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    FROM            shift and go to state 77

    E                              shift and go to state 58
    E1                             shift and go to state 59
    empty                          shift and go to state 60
    ESTATUTO                       shift and go to state 61
    ASIGNACION                     shift and go to state 62
    LLAMADA                        shift and go to state 63
    RETORNO                        shift and go to state 64
    LECTURA                        shift and go to state 65
    ESCRITURA                      shift and go to state 66
    CONDICION                      shift and go to state 67
    CICLO_W                        shift and go to state 68
    CICLO_F                        shift and go to state 69
    VARIABLE                       shift and go to state 70

state 53

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal . PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (12) PARAMS -> . TIPO NAME agregarVarLista P1
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    PARAMS                         shift and go to state 78
    TIPO                           shift and go to state 79

state 54

    (32) VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .

    COMMA           reduce using rule 32 (VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .)
    SEMICOLON       reduce using rule 32 (VARIABLEDer -> NAME agregarVarLista agregarVariables borrarListaVar E2Der .)


state 55

    (33) E2Der -> LSBRACKET . C_INT declararArray RSBRACKET

    C_INT           shift and go to state 80


state 56

    (34) E2Der -> empty .

    COMMA           reduce using rule 34 (E2Der -> empty .)
    SEMICOLON       reduce using rule 34 (E2Der -> empty .)


state 57

    (28) PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc .

    $end            reduce using rule 28 (PRINCIPAL -> MAIN LPAREN crearFuncMain RPAREN CUERPO terminarFunc .)


state 58

    (16) CUERPO -> LBRACKET E . RBRACKET

    RBRACKET        shift and go to state 81


state 59

    (17) E -> E1 .

    RBRACKET        reduce using rule 17 (E -> E1 .)


state 60

    (18) E -> empty .

    RBRACKET        reduce using rule 18 (E -> empty .)


state 61

    (19) E1 -> ESTATUTO .
    (20) E1 -> ESTATUTO . E1
    (19) E1 -> . ESTATUTO
    (20) E1 -> . ESTATUTO E1
    (35) ESTATUTO -> . ASIGNACION
    (36) ESTATUTO -> . LLAMADA
    (37) ESTATUTO -> . RETORNO
    (38) ESTATUTO -> . LECTURA
    (39) ESTATUTO -> . ESCRITURA
    (40) ESTATUTO -> . CONDICION
    (41) ESTATUTO -> . CICLO_W
    (42) ESTATUTO -> . CICLO_F
    (43) ASIGNACION -> . VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON
    (44) LLAMADA -> . NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (49) RETORNO -> . RETURN LPAREN EXP popReturn RPAREN SEMICOLON
    (50) LECTURA -> . READ LPAREN V4 RPAREN SEMICOLON
    (53) ESCRITURA -> . PRINT LPAREN E3 RPAREN SEMICOLON
    (56) CONDICION -> . IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (59) CICLO_W -> . WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (60) CICLO_F -> . FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (29) VARIABLE -> . NAME agregarPilaOp E2

    RBRACKET        reduce using rule 19 (E1 -> ESTATUTO .)
    NAME            shift and go to state 71
    RETURN          shift and go to state 72
    READ            shift and go to state 73
    PRINT           shift and go to state 74
    IF              shift and go to state 75
    WHILE           shift and go to state 76
    FROM            shift and go to state 77

    ESTATUTO                       shift and go to state 61
    E1                             shift and go to state 82
    ASIGNACION                     shift and go to state 62
    LLAMADA                        shift and go to state 63
    RETORNO                        shift and go to state 64
    LECTURA                        shift and go to state 65
    ESCRITURA                      shift and go to state 66
    CONDICION                      shift and go to state 67
    CICLO_W                        shift and go to state 68
    CICLO_F                        shift and go to state 69
    VARIABLE                       shift and go to state 70

state 62

    (35) ESTATUTO -> ASIGNACION .

    NAME            reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    READ            reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    FROM            reduce using rule 35 (ESTATUTO -> ASIGNACION .)
    RBRACKET        reduce using rule 35 (ESTATUTO -> ASIGNACION .)


state 63

    (36) ESTATUTO -> LLAMADA .

    NAME            reduce using rule 36 (ESTATUTO -> LLAMADA .)
    RETURN          reduce using rule 36 (ESTATUTO -> LLAMADA .)
    READ            reduce using rule 36 (ESTATUTO -> LLAMADA .)
    PRINT           reduce using rule 36 (ESTATUTO -> LLAMADA .)
    IF              reduce using rule 36 (ESTATUTO -> LLAMADA .)
    WHILE           reduce using rule 36 (ESTATUTO -> LLAMADA .)
    FROM            reduce using rule 36 (ESTATUTO -> LLAMADA .)
    RBRACKET        reduce using rule 36 (ESTATUTO -> LLAMADA .)


state 64

    (37) ESTATUTO -> RETORNO .

    NAME            reduce using rule 37 (ESTATUTO -> RETORNO .)
    RETURN          reduce using rule 37 (ESTATUTO -> RETORNO .)
    READ            reduce using rule 37 (ESTATUTO -> RETORNO .)
    PRINT           reduce using rule 37 (ESTATUTO -> RETORNO .)
    IF              reduce using rule 37 (ESTATUTO -> RETORNO .)
    WHILE           reduce using rule 37 (ESTATUTO -> RETORNO .)
    FROM            reduce using rule 37 (ESTATUTO -> RETORNO .)
    RBRACKET        reduce using rule 37 (ESTATUTO -> RETORNO .)


state 65

    (38) ESTATUTO -> LECTURA .

    NAME            reduce using rule 38 (ESTATUTO -> LECTURA .)
    RETURN          reduce using rule 38 (ESTATUTO -> LECTURA .)
    READ            reduce using rule 38 (ESTATUTO -> LECTURA .)
    PRINT           reduce using rule 38 (ESTATUTO -> LECTURA .)
    IF              reduce using rule 38 (ESTATUTO -> LECTURA .)
    WHILE           reduce using rule 38 (ESTATUTO -> LECTURA .)
    FROM            reduce using rule 38 (ESTATUTO -> LECTURA .)
    RBRACKET        reduce using rule 38 (ESTATUTO -> LECTURA .)


state 66

    (39) ESTATUTO -> ESCRITURA .

    NAME            reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    RETURN          reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    READ            reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    PRINT           reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    IF              reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    WHILE           reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    FROM            reduce using rule 39 (ESTATUTO -> ESCRITURA .)
    RBRACKET        reduce using rule 39 (ESTATUTO -> ESCRITURA .)


state 67

    (40) ESTATUTO -> CONDICION .

    NAME            reduce using rule 40 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 40 (ESTATUTO -> CONDICION .)
    READ            reduce using rule 40 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 40 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 40 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 40 (ESTATUTO -> CONDICION .)
    FROM            reduce using rule 40 (ESTATUTO -> CONDICION .)
    RBRACKET        reduce using rule 40 (ESTATUTO -> CONDICION .)


state 68

    (41) ESTATUTO -> CICLO_W .

    NAME            reduce using rule 41 (ESTATUTO -> CICLO_W .)
    RETURN          reduce using rule 41 (ESTATUTO -> CICLO_W .)
    READ            reduce using rule 41 (ESTATUTO -> CICLO_W .)
    PRINT           reduce using rule 41 (ESTATUTO -> CICLO_W .)
    IF              reduce using rule 41 (ESTATUTO -> CICLO_W .)
    WHILE           reduce using rule 41 (ESTATUTO -> CICLO_W .)
    FROM            reduce using rule 41 (ESTATUTO -> CICLO_W .)
    RBRACKET        reduce using rule 41 (ESTATUTO -> CICLO_W .)


state 69

    (42) ESTATUTO -> CICLO_F .

    NAME            reduce using rule 42 (ESTATUTO -> CICLO_F .)
    RETURN          reduce using rule 42 (ESTATUTO -> CICLO_F .)
    READ            reduce using rule 42 (ESTATUTO -> CICLO_F .)
    PRINT           reduce using rule 42 (ESTATUTO -> CICLO_F .)
    IF              reduce using rule 42 (ESTATUTO -> CICLO_F .)
    WHILE           reduce using rule 42 (ESTATUTO -> CICLO_F .)
    FROM            reduce using rule 42 (ESTATUTO -> CICLO_F .)
    RBRACKET        reduce using rule 42 (ESTATUTO -> CICLO_F .)


state 70

    (43) ASIGNACION -> VARIABLE . EQUALS meterOperador EXP popIgual SEMICOLON

    EQUALS          shift and go to state 83


state 71

    (44) LLAMADA -> NAME . verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (29) VARIABLE -> NAME . agregarPilaOp E2
    (96) verificarFuncVoid -> .
    (122) agregarPilaOp -> .

    LPAREN          reduce using rule 96 (verificarFuncVoid -> .)
    LSBRACKET       reduce using rule 122 (agregarPilaOp -> .)
    EQUALS          reduce using rule 122 (agregarPilaOp -> .)

    verificarFuncVoid              shift and go to state 84
    agregarPilaOp                  shift and go to state 85

state 72

    (49) RETORNO -> RETURN . LPAREN EXP popReturn RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 73

    (50) LECTURA -> READ . LPAREN V4 RPAREN SEMICOLON

    LPAREN          shift and go to state 87


state 74

    (53) ESCRITURA -> PRINT . LPAREN E3 RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 75

    (56) CONDICION -> IF . LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto

    LPAREN          shift and go to state 89


state 76

    (59) CICLO_W -> WHILE . agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (117) agregarWhile -> .

    LPAREN          reduce using rule 117 (agregarWhile -> .)

    agregarWhile                   shift and go to state 90

state 77

    (60) CICLO_F -> FROM . VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (29) VARIABLE -> . NAME agregarPilaOp E2

    NAME            shift and go to state 92

    VARIABLE                       shift and go to state 91

state 78

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS . agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (100) agregarParamTable -> .

    RPAREN          reduce using rule 100 (agregarParamTable -> .)

    agregarParamTable              shift and go to state 93

state 79

    (12) PARAMS -> TIPO . NAME agregarVarLista P1

    NAME            shift and go to state 94


state 80

    (33) E2Der -> LSBRACKET C_INT . declararArray RSBRACKET
    (103) declararArray -> .

    RSBRACKET       reduce using rule 103 (declararArray -> .)

    declararArray                  shift and go to state 95

state 81

    (16) CUERPO -> LBRACKET E RBRACKET .

    $end            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    ELSE            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    NAME            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    RETURN          reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    READ            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    PRINT           reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    IF              reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    WHILE           reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    FROM            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    RBRACKET        reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    FUNC            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)
    MAIN            reduce using rule 16 (CUERPO -> LBRACKET E RBRACKET .)


state 82

    (20) E1 -> ESTATUTO E1 .

    RBRACKET        reduce using rule 20 (E1 -> ESTATUTO E1 .)


state 83

    (43) ASIGNACION -> VARIABLE EQUALS . meterOperador EXP popIgual SEMICOLON
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 96

state 84

    (44) LLAMADA -> NAME verificarFuncVoid . LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON

    LPAREN          shift and go to state 97


state 85

    (29) VARIABLE -> NAME agregarPilaOp . E2
    (30) E2 -> . LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (31) E2 -> . empty
    (89) empty -> .

    LSBRACKET       shift and go to state 99
    EQUALS          reduce using rule 89 (empty -> .)
    DIVIDE          reduce using rule 89 (empty -> .)
    MULTIPLY        reduce using rule 89 (empty -> .)
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 89 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 89 (empty -> .)
    GREATER_THAN    reduce using rule 89 (empty -> .)
    LESS_THAN       reduce using rule 89 (empty -> .)
    IS_EQUAL        reduce using rule 89 (empty -> .)
    NOT_EQUAL       reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RSBRACKET       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    E2                             shift and go to state 98
    empty                          shift and go to state 100

state 86

    (49) RETORNO -> RETURN LPAREN . EXP popReturn RPAREN SEMICOLON
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    EXP                            shift and go to state 102
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 87

    (50) LECTURA -> READ LPAREN . V4 RPAREN SEMICOLON
    (51) V4 -> . VARIABLE popRead COMMA V4
    (52) V4 -> . VARIABLE popRead
    (29) VARIABLE -> . NAME agregarPilaOp E2

    NAME            shift and go to state 92

    V4                             shift and go to state 111
    VARIABLE                       shift and go to state 112

state 88

    (53) ESCRITURA -> PRINT LPAREN . E3 RPAREN SEMICOLON
    (54) E3 -> . S_EXP popPrint
    (55) E3 -> . S_EXP popPrint COMMA E3
    (73) S_EXP -> . C_STRING agregarConstString
    (74) S_EXP -> . EXP
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    C_STRING        shift and go to state 115
    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    E3                             shift and go to state 113
    S_EXP                          shift and go to state 114
    EXP                            shift and go to state 116
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 89

    (56) CONDICION -> IF LPAREN . H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto
    (61) H_EXP -> . T_EXP
    (62) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (63) T_EXP -> . G_EXP
    (64) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    H_EXP                          shift and go to state 117
    T_EXP                          shift and go to state 118
    G_EXP                          shift and go to state 119
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 90

    (59) CICLO_W -> WHILE agregarWhile . LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile

    LPAREN          shift and go to state 121


state 91

    (60) CICLO_F -> FROM VARIABLE . agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (104) agregarFrom -> .

    EQUALS          reduce using rule 104 (agregarFrom -> .)

    agregarFrom                    shift and go to state 122

state 92

    (29) VARIABLE -> NAME . agregarPilaOp E2
    (122) agregarPilaOp -> .

    LSBRACKET       reduce using rule 122 (agregarPilaOp -> .)
    EQUALS          reduce using rule 122 (agregarPilaOp -> .)
    COMMA           reduce using rule 122 (agregarPilaOp -> .)
    RPAREN          reduce using rule 122 (agregarPilaOp -> .)

    agregarPilaOp                  shift and go to state 85

state 93

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable . agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc
    (139) agregarVariables -> .

    RPAREN          reduce using rule 139 (agregarVariables -> .)

    agregarVariables               shift and go to state 123

state 94

    (12) PARAMS -> TIPO NAME . agregarVarLista P1
    (142) agregarVarLista -> .

    COMMA           reduce using rule 142 (agregarVarLista -> .)
    RPAREN          reduce using rule 142 (agregarVarLista -> .)

    agregarVarLista                shift and go to state 124

state 95

    (33) E2Der -> LSBRACKET C_INT declararArray . RSBRACKET

    RSBRACKET       shift and go to state 125


state 96

    (43) ASIGNACION -> VARIABLE EQUALS meterOperador . EXP popIgual SEMICOLON
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    VARIABLE                       shift and go to state 108
    EXP                            shift and go to state 126
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    LLAMADAF                       shift and go to state 109

state 97

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN . meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (120) meterFondoFalso -> .

    LPAREN          reduce using rule 120 (meterFondoFalso -> .)
    C_INT           reduce using rule 120 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 120 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 120 (meterFondoFalso -> .)
    NAME            reduce using rule 120 (meterFondoFalso -> .)
    RPAREN          reduce using rule 120 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 127

state 98

    (29) VARIABLE -> NAME agregarPilaOp E2 .

    EQUALS          reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    DIVIDE          reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    MULTIPLY        reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    PLUS            reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    MINUS           reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    RPAREN          reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    COMMA           reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    GREATER_OR_EQUAL reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    LESS_OR_EQUAL   reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    GREATER_THAN    reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    LESS_THAN       reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    IS_EQUAL        reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    NOT_EQUAL       reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    AND             reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    OR              reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    SEMICOLON       reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    RSBRACKET       reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    TO              reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)
    DO              reduce using rule 29 (VARIABLE -> NAME agregarPilaOp E2 .)


state 99

    (30) E2 -> LSBRACKET . guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (101) guardarArreglo -> .

    LPAREN          reduce using rule 101 (guardarArreglo -> .)
    C_INT           reduce using rule 101 (guardarArreglo -> .)
    C_FLOAT         reduce using rule 101 (guardarArreglo -> .)
    C_CHAR          reduce using rule 101 (guardarArreglo -> .)
    NAME            reduce using rule 101 (guardarArreglo -> .)

    guardarArreglo                 shift and go to state 128

state 100

    (31) E2 -> empty .

    EQUALS          reduce using rule 31 (E2 -> empty .)
    DIVIDE          reduce using rule 31 (E2 -> empty .)
    MULTIPLY        reduce using rule 31 (E2 -> empty .)
    PLUS            reduce using rule 31 (E2 -> empty .)
    MINUS           reduce using rule 31 (E2 -> empty .)
    RPAREN          reduce using rule 31 (E2 -> empty .)
    COMMA           reduce using rule 31 (E2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 31 (E2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 31 (E2 -> empty .)
    GREATER_THAN    reduce using rule 31 (E2 -> empty .)
    LESS_THAN       reduce using rule 31 (E2 -> empty .)
    IS_EQUAL        reduce using rule 31 (E2 -> empty .)
    NOT_EQUAL       reduce using rule 31 (E2 -> empty .)
    AND             reduce using rule 31 (E2 -> empty .)
    OR              reduce using rule 31 (E2 -> empty .)
    SEMICOLON       reduce using rule 31 (E2 -> empty .)
    RSBRACKET       reduce using rule 31 (E2 -> empty .)
    TO              reduce using rule 31 (E2 -> empty .)
    DO              reduce using rule 31 (E2 -> empty .)


state 101

    (83) FACTOR -> LPAREN . meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (120) meterFondoFalso -> .

    LPAREN          reduce using rule 120 (meterFondoFalso -> .)
    C_INT           reduce using rule 120 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 120 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 120 (meterFondoFalso -> .)
    NAME            reduce using rule 120 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 129

state 102

    (49) RETORNO -> RETURN LPAREN EXP . popReturn RPAREN SEMICOLON
    (125) popReturn -> .

    RPAREN          reduce using rule 125 (popReturn -> .)

    popReturn                      shift and go to state 130

state 103

    (75) EXP -> TERMINO . popSumaResta T
    (130) popSumaResta -> .

    PLUS            reduce using rule 130 (popSumaResta -> .)
    MINUS           reduce using rule 130 (popSumaResta -> .)
    RPAREN          reduce using rule 130 (popSumaResta -> .)
    COMMA           reduce using rule 130 (popSumaResta -> .)
    GREATER_OR_EQUAL reduce using rule 130 (popSumaResta -> .)
    LESS_OR_EQUAL   reduce using rule 130 (popSumaResta -> .)
    GREATER_THAN    reduce using rule 130 (popSumaResta -> .)
    LESS_THAN       reduce using rule 130 (popSumaResta -> .)
    IS_EQUAL        reduce using rule 130 (popSumaResta -> .)
    NOT_EQUAL       reduce using rule 130 (popSumaResta -> .)
    AND             reduce using rule 130 (popSumaResta -> .)
    OR              reduce using rule 130 (popSumaResta -> .)
    SEMICOLON       reduce using rule 130 (popSumaResta -> .)
    RSBRACKET       reduce using rule 130 (popSumaResta -> .)
    TO              reduce using rule 130 (popSumaResta -> .)
    DO              reduce using rule 130 (popSumaResta -> .)

    popSumaResta                   shift and go to state 131

state 104

    (79) TERMINO -> FACTOR . popMultDiv F2
    (129) popMultDiv -> .

    DIVIDE          reduce using rule 129 (popMultDiv -> .)
    MULTIPLY        reduce using rule 129 (popMultDiv -> .)
    PLUS            reduce using rule 129 (popMultDiv -> .)
    MINUS           reduce using rule 129 (popMultDiv -> .)
    RPAREN          reduce using rule 129 (popMultDiv -> .)
    COMMA           reduce using rule 129 (popMultDiv -> .)
    GREATER_OR_EQUAL reduce using rule 129 (popMultDiv -> .)
    LESS_OR_EQUAL   reduce using rule 129 (popMultDiv -> .)
    GREATER_THAN    reduce using rule 129 (popMultDiv -> .)
    LESS_THAN       reduce using rule 129 (popMultDiv -> .)
    IS_EQUAL        reduce using rule 129 (popMultDiv -> .)
    NOT_EQUAL       reduce using rule 129 (popMultDiv -> .)
    AND             reduce using rule 129 (popMultDiv -> .)
    OR              reduce using rule 129 (popMultDiv -> .)
    SEMICOLON       reduce using rule 129 (popMultDiv -> .)
    RSBRACKET       reduce using rule 129 (popMultDiv -> .)
    TO              reduce using rule 129 (popMultDiv -> .)
    DO              reduce using rule 129 (popMultDiv -> .)

    popMultDiv                     shift and go to state 132

state 105

    (84) FACTOR -> C_INT . agregarConstInt
    (107) agregarConstInt -> .

    DIVIDE          reduce using rule 107 (agregarConstInt -> .)
    MULTIPLY        reduce using rule 107 (agregarConstInt -> .)
    PLUS            reduce using rule 107 (agregarConstInt -> .)
    MINUS           reduce using rule 107 (agregarConstInt -> .)
    RPAREN          reduce using rule 107 (agregarConstInt -> .)
    COMMA           reduce using rule 107 (agregarConstInt -> .)
    GREATER_OR_EQUAL reduce using rule 107 (agregarConstInt -> .)
    LESS_OR_EQUAL   reduce using rule 107 (agregarConstInt -> .)
    GREATER_THAN    reduce using rule 107 (agregarConstInt -> .)
    LESS_THAN       reduce using rule 107 (agregarConstInt -> .)
    IS_EQUAL        reduce using rule 107 (agregarConstInt -> .)
    NOT_EQUAL       reduce using rule 107 (agregarConstInt -> .)
    AND             reduce using rule 107 (agregarConstInt -> .)
    OR              reduce using rule 107 (agregarConstInt -> .)
    SEMICOLON       reduce using rule 107 (agregarConstInt -> .)
    RSBRACKET       reduce using rule 107 (agregarConstInt -> .)
    TO              reduce using rule 107 (agregarConstInt -> .)
    DO              reduce using rule 107 (agregarConstInt -> .)

    agregarConstInt                shift and go to state 133

state 106

    (85) FACTOR -> C_FLOAT . agregarConstFloat
    (108) agregarConstFloat -> .

    DIVIDE          reduce using rule 108 (agregarConstFloat -> .)
    MULTIPLY        reduce using rule 108 (agregarConstFloat -> .)
    PLUS            reduce using rule 108 (agregarConstFloat -> .)
    MINUS           reduce using rule 108 (agregarConstFloat -> .)
    RPAREN          reduce using rule 108 (agregarConstFloat -> .)
    COMMA           reduce using rule 108 (agregarConstFloat -> .)
    GREATER_OR_EQUAL reduce using rule 108 (agregarConstFloat -> .)
    LESS_OR_EQUAL   reduce using rule 108 (agregarConstFloat -> .)
    GREATER_THAN    reduce using rule 108 (agregarConstFloat -> .)
    LESS_THAN       reduce using rule 108 (agregarConstFloat -> .)
    IS_EQUAL        reduce using rule 108 (agregarConstFloat -> .)
    NOT_EQUAL       reduce using rule 108 (agregarConstFloat -> .)
    AND             reduce using rule 108 (agregarConstFloat -> .)
    OR              reduce using rule 108 (agregarConstFloat -> .)
    SEMICOLON       reduce using rule 108 (agregarConstFloat -> .)
    RSBRACKET       reduce using rule 108 (agregarConstFloat -> .)
    TO              reduce using rule 108 (agregarConstFloat -> .)
    DO              reduce using rule 108 (agregarConstFloat -> .)

    agregarConstFloat              shift and go to state 134

state 107

    (86) FACTOR -> C_CHAR . agregarConstChar
    (109) agregarConstChar -> .

    DIVIDE          reduce using rule 109 (agregarConstChar -> .)
    MULTIPLY        reduce using rule 109 (agregarConstChar -> .)
    PLUS            reduce using rule 109 (agregarConstChar -> .)
    MINUS           reduce using rule 109 (agregarConstChar -> .)
    RPAREN          reduce using rule 109 (agregarConstChar -> .)
    COMMA           reduce using rule 109 (agregarConstChar -> .)
    GREATER_OR_EQUAL reduce using rule 109 (agregarConstChar -> .)
    LESS_OR_EQUAL   reduce using rule 109 (agregarConstChar -> .)
    GREATER_THAN    reduce using rule 109 (agregarConstChar -> .)
    LESS_THAN       reduce using rule 109 (agregarConstChar -> .)
    IS_EQUAL        reduce using rule 109 (agregarConstChar -> .)
    NOT_EQUAL       reduce using rule 109 (agregarConstChar -> .)
    AND             reduce using rule 109 (agregarConstChar -> .)
    OR              reduce using rule 109 (agregarConstChar -> .)
    SEMICOLON       reduce using rule 109 (agregarConstChar -> .)
    RSBRACKET       reduce using rule 109 (agregarConstChar -> .)
    TO              reduce using rule 109 (agregarConstChar -> .)
    DO              reduce using rule 109 (agregarConstChar -> .)

    agregarConstChar               shift and go to state 135

state 108

    (87) FACTOR -> VARIABLE .

    DIVIDE          reduce using rule 87 (FACTOR -> VARIABLE .)
    MULTIPLY        reduce using rule 87 (FACTOR -> VARIABLE .)
    PLUS            reduce using rule 87 (FACTOR -> VARIABLE .)
    MINUS           reduce using rule 87 (FACTOR -> VARIABLE .)
    RPAREN          reduce using rule 87 (FACTOR -> VARIABLE .)
    COMMA           reduce using rule 87 (FACTOR -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 87 (FACTOR -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 87 (FACTOR -> VARIABLE .)
    GREATER_THAN    reduce using rule 87 (FACTOR -> VARIABLE .)
    LESS_THAN       reduce using rule 87 (FACTOR -> VARIABLE .)
    IS_EQUAL        reduce using rule 87 (FACTOR -> VARIABLE .)
    NOT_EQUAL       reduce using rule 87 (FACTOR -> VARIABLE .)
    AND             reduce using rule 87 (FACTOR -> VARIABLE .)
    OR              reduce using rule 87 (FACTOR -> VARIABLE .)
    SEMICOLON       reduce using rule 87 (FACTOR -> VARIABLE .)
    RSBRACKET       reduce using rule 87 (FACTOR -> VARIABLE .)
    TO              reduce using rule 87 (FACTOR -> VARIABLE .)
    DO              reduce using rule 87 (FACTOR -> VARIABLE .)


state 109

    (88) FACTOR -> LLAMADAF .

    DIVIDE          reduce using rule 88 (FACTOR -> LLAMADAF .)
    MULTIPLY        reduce using rule 88 (FACTOR -> LLAMADAF .)
    PLUS            reduce using rule 88 (FACTOR -> LLAMADAF .)
    MINUS           reduce using rule 88 (FACTOR -> LLAMADAF .)
    RPAREN          reduce using rule 88 (FACTOR -> LLAMADAF .)
    COMMA           reduce using rule 88 (FACTOR -> LLAMADAF .)
    GREATER_OR_EQUAL reduce using rule 88 (FACTOR -> LLAMADAF .)
    LESS_OR_EQUAL   reduce using rule 88 (FACTOR -> LLAMADAF .)
    GREATER_THAN    reduce using rule 88 (FACTOR -> LLAMADAF .)
    LESS_THAN       reduce using rule 88 (FACTOR -> LLAMADAF .)
    IS_EQUAL        reduce using rule 88 (FACTOR -> LLAMADAF .)
    NOT_EQUAL       reduce using rule 88 (FACTOR -> LLAMADAF .)
    AND             reduce using rule 88 (FACTOR -> LLAMADAF .)
    OR              reduce using rule 88 (FACTOR -> LLAMADAF .)
    SEMICOLON       reduce using rule 88 (FACTOR -> LLAMADAF .)
    RSBRACKET       reduce using rule 88 (FACTOR -> LLAMADAF .)
    TO              reduce using rule 88 (FACTOR -> LLAMADAF .)
    DO              reduce using rule 88 (FACTOR -> LLAMADAF .)


state 110

    (29) VARIABLE -> NAME . agregarPilaOp E2
    (48) LLAMADAF -> NAME . verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (122) agregarPilaOp -> .
    (95) verificarFunc -> .

    LSBRACKET       reduce using rule 122 (agregarPilaOp -> .)
    DIVIDE          reduce using rule 122 (agregarPilaOp -> .)
    MULTIPLY        reduce using rule 122 (agregarPilaOp -> .)
    PLUS            reduce using rule 122 (agregarPilaOp -> .)
    MINUS           reduce using rule 122 (agregarPilaOp -> .)
    RPAREN          reduce using rule 122 (agregarPilaOp -> .)
    COMMA           reduce using rule 122 (agregarPilaOp -> .)
    GREATER_OR_EQUAL reduce using rule 122 (agregarPilaOp -> .)
    LESS_OR_EQUAL   reduce using rule 122 (agregarPilaOp -> .)
    GREATER_THAN    reduce using rule 122 (agregarPilaOp -> .)
    LESS_THAN       reduce using rule 122 (agregarPilaOp -> .)
    IS_EQUAL        reduce using rule 122 (agregarPilaOp -> .)
    NOT_EQUAL       reduce using rule 122 (agregarPilaOp -> .)
    AND             reduce using rule 122 (agregarPilaOp -> .)
    OR              reduce using rule 122 (agregarPilaOp -> .)
    SEMICOLON       reduce using rule 122 (agregarPilaOp -> .)
    RSBRACKET       reduce using rule 122 (agregarPilaOp -> .)
    TO              reduce using rule 122 (agregarPilaOp -> .)
    DO              reduce using rule 122 (agregarPilaOp -> .)
    LPAREN          reduce using rule 95 (verificarFunc -> .)

    agregarPilaOp                  shift and go to state 85
    verificarFunc                  shift and go to state 136

state 111

    (50) LECTURA -> READ LPAREN V4 . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 112

    (51) V4 -> VARIABLE . popRead COMMA V4
    (52) V4 -> VARIABLE . popRead
    (124) popRead -> .

    COMMA           reduce using rule 124 (popRead -> .)
    RPAREN          reduce using rule 124 (popRead -> .)

    popRead                        shift and go to state 138

state 113

    (53) ESCRITURA -> PRINT LPAREN E3 . RPAREN SEMICOLON

    RPAREN          shift and go to state 139


state 114

    (54) E3 -> S_EXP . popPrint
    (55) E3 -> S_EXP . popPrint COMMA E3
    (123) popPrint -> .

    COMMA           reduce using rule 123 (popPrint -> .)
    RPAREN          reduce using rule 123 (popPrint -> .)

    popPrint                       shift and go to state 140

state 115

    (73) S_EXP -> C_STRING . agregarConstString
    (110) agregarConstString -> .

    COMMA           reduce using rule 110 (agregarConstString -> .)
    RPAREN          reduce using rule 110 (agregarConstString -> .)

    agregarConstString             shift and go to state 141

state 116

    (74) S_EXP -> EXP .

    COMMA           reduce using rule 74 (S_EXP -> EXP .)
    RPAREN          reduce using rule 74 (S_EXP -> EXP .)


state 117

    (56) CONDICION -> IF LPAREN H_EXP . RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto

    RPAREN          shift and go to state 142


state 118

    (61) H_EXP -> T_EXP .
    (62) H_EXP -> T_EXP . OR meterOperador H_EXP popComp

    RPAREN          reduce using rule 61 (H_EXP -> T_EXP .)
    OR              shift and go to state 143


state 119

    (63) T_EXP -> G_EXP .
    (64) T_EXP -> G_EXP . AND meterOperador T_EXP popComp

    OR              reduce using rule 63 (T_EXP -> G_EXP .)
    RPAREN          reduce using rule 63 (T_EXP -> G_EXP .)
    AND             shift and go to state 144


state 120

    (65) G_EXP -> EXP . B popBool
    (66) B -> . GREATER_OR_EQUAL meterOperador G_EXP
    (67) B -> . LESS_OR_EQUAL meterOperador G_EXP
    (68) B -> . GREATER_THAN meterOperador G_EXP
    (69) B -> . LESS_THAN meterOperador G_EXP
    (70) B -> . IS_EQUAL meterOperador G_EXP
    (71) B -> . NOT_EQUAL meterOperador G_EXP
    (72) B -> . empty
    (89) empty -> .

    GREATER_OR_EQUAL shift and go to state 146
    LESS_OR_EQUAL   shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    IS_EQUAL        shift and go to state 150
    NOT_EQUAL       shift and go to state 151
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)

    B                              shift and go to state 145
    empty                          shift and go to state 152

state 121

    (59) CICLO_W -> WHILE agregarWhile LPAREN . H_EXP RPAREN DO gotoIf CUERPO terminarWhile
    (61) H_EXP -> . T_EXP
    (62) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (63) T_EXP -> . G_EXP
    (64) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    H_EXP                          shift and go to state 153
    T_EXP                          shift and go to state 118
    G_EXP                          shift and go to state 119
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 122

    (60) CICLO_F -> FROM VARIABLE agregarFrom . EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile

    EQUALS          shift and go to state 154


state 123

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables . RPAREN VARS agregarLocalVar CUERPO terminarFunc

    RPAREN          shift and go to state 155


state 124

    (12) PARAMS -> TIPO NAME agregarVarLista . P1
    (13) P1 -> . P2
    (14) P1 -> . empty
    (15) P2 -> . COMMA PARAMS P1
    (89) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 159
    RPAREN          reduce using rule 89 (empty -> .)

  ! COMMA           [ reduce using rule 89 (empty -> .) ]

    P1                             shift and go to state 156
    P2                             shift and go to state 157
    empty                          shift and go to state 158

state 125

    (33) E2Der -> LSBRACKET C_INT declararArray RSBRACKET .

    COMMA           reduce using rule 33 (E2Der -> LSBRACKET C_INT declararArray RSBRACKET .)
    SEMICOLON       reduce using rule 33 (E2Der -> LSBRACKET C_INT declararArray RSBRACKET .)


state 126

    (43) ASIGNACION -> VARIABLE EQUALS meterOperador EXP . popIgual SEMICOLON
    (128) popIgual -> .

    SEMICOLON       reduce using rule 128 (popIgual -> .)

    popIgual                       shift and go to state 160

state 127

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso . generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (94) generarEra -> .

    LPAREN          reduce using rule 94 (generarEra -> .)
    C_INT           reduce using rule 94 (generarEra -> .)
    C_FLOAT         reduce using rule 94 (generarEra -> .)
    C_CHAR          reduce using rule 94 (generarEra -> .)
    NAME            reduce using rule 94 (generarEra -> .)
    RPAREN          reduce using rule 94 (generarEra -> .)

    generarEra                     shift and go to state 161

state 128

    (30) E2 -> LSBRACKET guardarArreglo . meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso
    (120) meterFondoFalso -> .

    LPAREN          reduce using rule 120 (meterFondoFalso -> .)
    C_INT           reduce using rule 120 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 120 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 120 (meterFondoFalso -> .)
    NAME            reduce using rule 120 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 162

state 129

    (83) FACTOR -> LPAREN meterFondoFalso . H_EXP RPAREN quitarFondoFalso
    (61) H_EXP -> . T_EXP
    (62) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (63) T_EXP -> . G_EXP
    (64) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    H_EXP                          shift and go to state 163
    T_EXP                          shift and go to state 118
    G_EXP                          shift and go to state 119
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 130

    (49) RETORNO -> RETURN LPAREN EXP popReturn . RPAREN SEMICOLON

    RPAREN          shift and go to state 164


state 131

    (75) EXP -> TERMINO popSumaResta . T
    (76) T -> . PLUS meterOperador EXP
    (77) T -> . MINUS meterOperador EXP
    (78) T -> . empty
    (89) empty -> .

    PLUS            shift and go to state 166
    MINUS           shift and go to state 167
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 89 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 89 (empty -> .)
    GREATER_THAN    reduce using rule 89 (empty -> .)
    LESS_THAN       reduce using rule 89 (empty -> .)
    IS_EQUAL        reduce using rule 89 (empty -> .)
    NOT_EQUAL       reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RSBRACKET       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    T                              shift and go to state 165
    empty                          shift and go to state 168

state 132

    (79) TERMINO -> FACTOR popMultDiv . F2
    (80) F2 -> . DIVIDE meterOperador TERMINO
    (81) F2 -> . MULTIPLY meterOperador TERMINO
    (82) F2 -> . empty
    (89) empty -> .

    DIVIDE          shift and go to state 170
    MULTIPLY        shift and go to state 171
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    GREATER_OR_EQUAL reduce using rule 89 (empty -> .)
    LESS_OR_EQUAL   reduce using rule 89 (empty -> .)
    GREATER_THAN    reduce using rule 89 (empty -> .)
    LESS_THAN       reduce using rule 89 (empty -> .)
    IS_EQUAL        reduce using rule 89 (empty -> .)
    NOT_EQUAL       reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RSBRACKET       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    F2                             shift and go to state 169
    empty                          shift and go to state 172

state 133

    (84) FACTOR -> C_INT agregarConstInt .

    DIVIDE          reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    MULTIPLY        reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    PLUS            reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    MINUS           reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    RPAREN          reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    COMMA           reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    GREATER_OR_EQUAL reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    LESS_OR_EQUAL   reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    GREATER_THAN    reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    LESS_THAN       reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    IS_EQUAL        reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    NOT_EQUAL       reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    AND             reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    OR              reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    SEMICOLON       reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    RSBRACKET       reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    TO              reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)
    DO              reduce using rule 84 (FACTOR -> C_INT agregarConstInt .)


state 134

    (85) FACTOR -> C_FLOAT agregarConstFloat .

    DIVIDE          reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    MULTIPLY        reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    PLUS            reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    MINUS           reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    RPAREN          reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    COMMA           reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    GREATER_OR_EQUAL reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    LESS_OR_EQUAL   reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    GREATER_THAN    reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    LESS_THAN       reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    IS_EQUAL        reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    NOT_EQUAL       reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    AND             reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    OR              reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    SEMICOLON       reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    RSBRACKET       reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    TO              reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)
    DO              reduce using rule 85 (FACTOR -> C_FLOAT agregarConstFloat .)


state 135

    (86) FACTOR -> C_CHAR agregarConstChar .

    DIVIDE          reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    MULTIPLY        reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    PLUS            reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    MINUS           reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    RPAREN          reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    COMMA           reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    GREATER_OR_EQUAL reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    LESS_OR_EQUAL   reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    GREATER_THAN    reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    LESS_THAN       reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    IS_EQUAL        reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    NOT_EQUAL       reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    AND             reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    OR              reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    SEMICOLON       reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    RSBRACKET       reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    TO              reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)
    DO              reduce using rule 86 (FACTOR -> C_CHAR agregarConstChar .)


state 136

    (48) LLAMADAF -> NAME verificarFunc . LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 173


state 137

    (50) LECTURA -> READ LPAREN V4 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 138

    (51) V4 -> VARIABLE popRead . COMMA V4
    (52) V4 -> VARIABLE popRead .

    COMMA           shift and go to state 175
    RPAREN          reduce using rule 52 (V4 -> VARIABLE popRead .)


state 139

    (53) ESCRITURA -> PRINT LPAREN E3 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 140

    (54) E3 -> S_EXP popPrint .
    (55) E3 -> S_EXP popPrint . COMMA E3

    RPAREN          reduce using rule 54 (E3 -> S_EXP popPrint .)
    COMMA           shift and go to state 177


state 141

    (73) S_EXP -> C_STRING agregarConstString .

    COMMA           reduce using rule 73 (S_EXP -> C_STRING agregarConstString .)
    RPAREN          reduce using rule 73 (S_EXP -> C_STRING agregarConstString .)


state 142

    (56) CONDICION -> IF LPAREN H_EXP RPAREN . gotoIf THEN CUERPO ELSE1 terminarGoto
    (115) gotoIf -> .

    THEN            reduce using rule 115 (gotoIf -> .)

    gotoIf                         shift and go to state 178

state 143

    (62) H_EXP -> T_EXP OR . meterOperador H_EXP popComp
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 179

state 144

    (64) T_EXP -> G_EXP AND . meterOperador T_EXP popComp
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 180

state 145

    (65) G_EXP -> EXP B . popBool
    (127) popBool -> .

    AND             reduce using rule 127 (popBool -> .)
    OR              reduce using rule 127 (popBool -> .)
    RPAREN          reduce using rule 127 (popBool -> .)

    popBool                        shift and go to state 181

state 146

    (66) B -> GREATER_OR_EQUAL . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 182

state 147

    (67) B -> LESS_OR_EQUAL . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 183

state 148

    (68) B -> GREATER_THAN . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 184

state 149

    (69) B -> LESS_THAN . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 185

state 150

    (70) B -> IS_EQUAL . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 186

state 151

    (71) B -> NOT_EQUAL . meterOperador G_EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 187

state 152

    (72) B -> empty .

    AND             reduce using rule 72 (B -> empty .)
    OR              reduce using rule 72 (B -> empty .)
    RPAREN          reduce using rule 72 (B -> empty .)


state 153

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP . RPAREN DO gotoIf CUERPO terminarWhile

    RPAREN          shift and go to state 188


state 154

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS . meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 189

state 155

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN . VARS agregarLocalVar CUERPO terminarFunc
    (4) VARS -> . borrarListaVar VAR V1
    (5) VARS -> . empty
    (143) borrarListaVar -> .
    (89) empty -> .

    VAR             reduce using rule 143 (borrarListaVar -> .)
    LBRACKET        reduce using rule 89 (empty -> .)

    borrarListaVar                 shift and go to state 8
    VARS                           shift and go to state 190
    empty                          shift and go to state 9

state 156

    (12) PARAMS -> TIPO NAME agregarVarLista P1 .

    RPAREN          reduce using rule 12 (PARAMS -> TIPO NAME agregarVarLista P1 .)
    COMMA           reduce using rule 12 (PARAMS -> TIPO NAME agregarVarLista P1 .)


state 157

    (13) P1 -> P2 .

    COMMA           reduce using rule 13 (P1 -> P2 .)
    RPAREN          reduce using rule 13 (P1 -> P2 .)


state 158

    (14) P1 -> empty .

    COMMA           reduce using rule 14 (P1 -> empty .)
    RPAREN          reduce using rule 14 (P1 -> empty .)


state 159

    (15) P2 -> COMMA . PARAMS P1
    (12) PARAMS -> . TIPO NAME agregarVarLista P1
    (21) TIPO -> . INT
    (22) TIPO -> . FLOAT
    (23) TIPO -> . CHAR

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    PARAMS                         shift and go to state 191
    TIPO                           shift and go to state 79

state 160

    (43) ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual . SEMICOLON

    SEMICOLON       shift and go to state 192


state 161

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra . E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (45) E4 -> . EXP generarParam
    (46) E4 -> . EXP generarParam COMMA E4
    (47) E4 -> . empty
    (75) EXP -> . TERMINO popSumaResta T
    (89) empty -> .
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 89 (empty -> .)
    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    E4                             shift and go to state 193
    EXP                            shift and go to state 194
    empty                          shift and go to state 195
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 162

    (30) E2 -> LSBRACKET guardarArreglo meterFondoFalso . EXP RSBRACKET verificarArreglo quitarFondoFalso
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    EXP                            shift and go to state 196
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 163

    (83) FACTOR -> LPAREN meterFondoFalso H_EXP . RPAREN quitarFondoFalso

    RPAREN          shift and go to state 197


state 164

    (49) RETORNO -> RETURN LPAREN EXP popReturn RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 198


state 165

    (75) EXP -> TERMINO popSumaResta T .

    RPAREN          reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    COMMA           reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    GREATER_OR_EQUAL reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    LESS_OR_EQUAL   reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    GREATER_THAN    reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    LESS_THAN       reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    IS_EQUAL        reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    NOT_EQUAL       reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    AND             reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    OR              reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    SEMICOLON       reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    RSBRACKET       reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    TO              reduce using rule 75 (EXP -> TERMINO popSumaResta T .)
    DO              reduce using rule 75 (EXP -> TERMINO popSumaResta T .)


state 166

    (76) T -> PLUS . meterOperador EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 199

state 167

    (77) T -> MINUS . meterOperador EXP
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 200

state 168

    (78) T -> empty .

    RPAREN          reduce using rule 78 (T -> empty .)
    COMMA           reduce using rule 78 (T -> empty .)
    GREATER_OR_EQUAL reduce using rule 78 (T -> empty .)
    LESS_OR_EQUAL   reduce using rule 78 (T -> empty .)
    GREATER_THAN    reduce using rule 78 (T -> empty .)
    LESS_THAN       reduce using rule 78 (T -> empty .)
    IS_EQUAL        reduce using rule 78 (T -> empty .)
    NOT_EQUAL       reduce using rule 78 (T -> empty .)
    AND             reduce using rule 78 (T -> empty .)
    OR              reduce using rule 78 (T -> empty .)
    SEMICOLON       reduce using rule 78 (T -> empty .)
    RSBRACKET       reduce using rule 78 (T -> empty .)
    TO              reduce using rule 78 (T -> empty .)
    DO              reduce using rule 78 (T -> empty .)


state 169

    (79) TERMINO -> FACTOR popMultDiv F2 .

    PLUS            reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    MINUS           reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    RPAREN          reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    COMMA           reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    GREATER_OR_EQUAL reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    LESS_OR_EQUAL   reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    GREATER_THAN    reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    LESS_THAN       reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    IS_EQUAL        reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    NOT_EQUAL       reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    AND             reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    OR              reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    SEMICOLON       reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    RSBRACKET       reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    TO              reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)
    DO              reduce using rule 79 (TERMINO -> FACTOR popMultDiv F2 .)


state 170

    (80) F2 -> DIVIDE . meterOperador TERMINO
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 201

state 171

    (81) F2 -> MULTIPLY . meterOperador TERMINO
    (135) meterOperador -> .

    LPAREN          reduce using rule 135 (meterOperador -> .)
    C_INT           reduce using rule 135 (meterOperador -> .)
    C_FLOAT         reduce using rule 135 (meterOperador -> .)
    C_CHAR          reduce using rule 135 (meterOperador -> .)
    NAME            reduce using rule 135 (meterOperador -> .)

    meterOperador                  shift and go to state 202

state 172

    (82) F2 -> empty .

    PLUS            reduce using rule 82 (F2 -> empty .)
    MINUS           reduce using rule 82 (F2 -> empty .)
    RPAREN          reduce using rule 82 (F2 -> empty .)
    COMMA           reduce using rule 82 (F2 -> empty .)
    GREATER_OR_EQUAL reduce using rule 82 (F2 -> empty .)
    LESS_OR_EQUAL   reduce using rule 82 (F2 -> empty .)
    GREATER_THAN    reduce using rule 82 (F2 -> empty .)
    LESS_THAN       reduce using rule 82 (F2 -> empty .)
    IS_EQUAL        reduce using rule 82 (F2 -> empty .)
    NOT_EQUAL       reduce using rule 82 (F2 -> empty .)
    AND             reduce using rule 82 (F2 -> empty .)
    OR              reduce using rule 82 (F2 -> empty .)
    SEMICOLON       reduce using rule 82 (F2 -> empty .)
    RSBRACKET       reduce using rule 82 (F2 -> empty .)
    TO              reduce using rule 82 (F2 -> empty .)
    DO              reduce using rule 82 (F2 -> empty .)


state 173

    (48) LLAMADAF -> NAME verificarFunc LPAREN . meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (120) meterFondoFalso -> .

    LPAREN          reduce using rule 120 (meterFondoFalso -> .)
    C_INT           reduce using rule 120 (meterFondoFalso -> .)
    C_FLOAT         reduce using rule 120 (meterFondoFalso -> .)
    C_CHAR          reduce using rule 120 (meterFondoFalso -> .)
    NAME            reduce using rule 120 (meterFondoFalso -> .)
    RPAREN          reduce using rule 120 (meterFondoFalso -> .)

    meterFondoFalso                shift and go to state 203

state 174

    (50) LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .

    NAME            reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    RETURN          reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    READ            reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    PRINT           reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    IF              reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    FROM            reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 50 (LECTURA -> READ LPAREN V4 RPAREN SEMICOLON .)


state 175

    (51) V4 -> VARIABLE popRead COMMA . V4
    (51) V4 -> . VARIABLE popRead COMMA V4
    (52) V4 -> . VARIABLE popRead
    (29) VARIABLE -> . NAME agregarPilaOp E2

    NAME            shift and go to state 92

    VARIABLE                       shift and go to state 112
    V4                             shift and go to state 204

state 176

    (53) ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .

    NAME            reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    RETURN          reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    READ            reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    PRINT           reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    IF              reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    WHILE           reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    FROM            reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 53 (ESCRITURA -> PRINT LPAREN E3 RPAREN SEMICOLON .)


state 177

    (55) E3 -> S_EXP popPrint COMMA . E3
    (54) E3 -> . S_EXP popPrint
    (55) E3 -> . S_EXP popPrint COMMA E3
    (73) S_EXP -> . C_STRING agregarConstString
    (74) S_EXP -> . EXP
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    C_STRING        shift and go to state 115
    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    S_EXP                          shift and go to state 114
    E3                             shift and go to state 205
    EXP                            shift and go to state 116
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 178

    (56) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf . THEN CUERPO ELSE1 terminarGoto

    THEN            shift and go to state 206


state 179

    (62) H_EXP -> T_EXP OR meterOperador . H_EXP popComp
    (61) H_EXP -> . T_EXP
    (62) H_EXP -> . T_EXP OR meterOperador H_EXP popComp
    (63) T_EXP -> . G_EXP
    (64) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    T_EXP                          shift and go to state 118
    H_EXP                          shift and go to state 207
    G_EXP                          shift and go to state 119
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 180

    (64) T_EXP -> G_EXP AND meterOperador . T_EXP popComp
    (63) T_EXP -> . G_EXP
    (64) T_EXP -> . G_EXP AND meterOperador T_EXP popComp
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 119
    T_EXP                          shift and go to state 208
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 181

    (65) G_EXP -> EXP B popBool .

    AND             reduce using rule 65 (G_EXP -> EXP B popBool .)
    OR              reduce using rule 65 (G_EXP -> EXP B popBool .)
    RPAREN          reduce using rule 65 (G_EXP -> EXP B popBool .)


state 182

    (66) B -> GREATER_OR_EQUAL meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 209
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 183

    (67) B -> LESS_OR_EQUAL meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 210
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 184

    (68) B -> GREATER_THAN meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 211
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 185

    (69) B -> LESS_THAN meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 212
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 186

    (70) B -> IS_EQUAL meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 213
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 187

    (71) B -> NOT_EQUAL meterOperador . G_EXP
    (65) G_EXP -> . EXP B popBool
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    G_EXP                          shift and go to state 214
    EXP                            shift and go to state 120
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 188

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN . DO gotoIf CUERPO terminarWhile

    DO              shift and go to state 215


state 189

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador . EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    VARIABLE                       shift and go to state 108
    EXP                            shift and go to state 216
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    LLAMADAF                       shift and go to state 109

state 190

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS . agregarLocalVar CUERPO terminarFunc
    (98) agregarLocalVar -> .

    LBRACKET        reduce using rule 98 (agregarLocalVar -> .)

    agregarLocalVar                shift and go to state 217

state 191

    (15) P2 -> COMMA PARAMS . P1
    (13) P1 -> . P2
    (14) P1 -> . empty
    (15) P2 -> . COMMA PARAMS P1
    (89) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 159
    RPAREN          reduce using rule 89 (empty -> .)

  ! COMMA           [ reduce using rule 89 (empty -> .) ]

    P1                             shift and go to state 218
    P2                             shift and go to state 157
    empty                          shift and go to state 158

state 192

    (43) ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .

    NAME            reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    RETURN          reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    READ            reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    PRINT           reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    IF              reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    WHILE           reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    FROM            reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)
    RBRACKET        reduce using rule 43 (ASIGNACION -> VARIABLE EQUALS meterOperador EXP popIgual SEMICOLON .)


state 193

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 . verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON
    (92) verificarParam -> .

    RPAREN          reduce using rule 92 (verificarParam -> .)

    verificarParam                 shift and go to state 219

state 194

    (45) E4 -> EXP . generarParam
    (46) E4 -> EXP . generarParam COMMA E4
    (93) generarParam -> .

    COMMA           reduce using rule 93 (generarParam -> .)
    RPAREN          reduce using rule 93 (generarParam -> .)

    generarParam                   shift and go to state 220

state 195

    (47) E4 -> empty .

    RPAREN          reduce using rule 47 (E4 -> empty .)


state 196

    (30) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP . RSBRACKET verificarArreglo quitarFondoFalso

    RSBRACKET       shift and go to state 221


state 197

    (83) FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN . quitarFondoFalso
    (121) quitarFondoFalso -> .

    DIVIDE          reduce using rule 121 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 121 (quitarFondoFalso -> .)
    PLUS            reduce using rule 121 (quitarFondoFalso -> .)
    MINUS           reduce using rule 121 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 121 (quitarFondoFalso -> .)
    COMMA           reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 121 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 121 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 121 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 121 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 121 (quitarFondoFalso -> .)
    AND             reduce using rule 121 (quitarFondoFalso -> .)
    OR              reduce using rule 121 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 121 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 121 (quitarFondoFalso -> .)
    TO              reduce using rule 121 (quitarFondoFalso -> .)
    DO              reduce using rule 121 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 222

state 198

    (49) RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .

    NAME            reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    RETURN          reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    READ            reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    PRINT           reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    IF              reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    WHILE           reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    FROM            reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 49 (RETORNO -> RETURN LPAREN EXP popReturn RPAREN SEMICOLON .)


state 199

    (76) T -> PLUS meterOperador . EXP
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    EXP                            shift and go to state 223
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 200

    (77) T -> MINUS meterOperador . EXP
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    EXP                            shift and go to state 224
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 201

    (80) F2 -> DIVIDE meterOperador . TERMINO
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    TERMINO                        shift and go to state 225
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 202

    (81) F2 -> MULTIPLY meterOperador . TERMINO
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    TERMINO                        shift and go to state 226
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 203

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso . generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (94) generarEra -> .

    LPAREN          reduce using rule 94 (generarEra -> .)
    C_INT           reduce using rule 94 (generarEra -> .)
    C_FLOAT         reduce using rule 94 (generarEra -> .)
    C_CHAR          reduce using rule 94 (generarEra -> .)
    NAME            reduce using rule 94 (generarEra -> .)
    RPAREN          reduce using rule 94 (generarEra -> .)

    generarEra                     shift and go to state 227

state 204

    (51) V4 -> VARIABLE popRead COMMA V4 .

    RPAREN          reduce using rule 51 (V4 -> VARIABLE popRead COMMA V4 .)


state 205

    (55) E3 -> S_EXP popPrint COMMA E3 .

    RPAREN          reduce using rule 55 (E3 -> S_EXP popPrint COMMA E3 .)


state 206

    (56) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN . CUERPO ELSE1 terminarGoto
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 228

state 207

    (62) H_EXP -> T_EXP OR meterOperador H_EXP . popComp
    (126) popComp -> .

    RPAREN          reduce using rule 126 (popComp -> .)

    popComp                        shift and go to state 229

state 208

    (64) T_EXP -> G_EXP AND meterOperador T_EXP . popComp
    (126) popComp -> .

    OR              reduce using rule 126 (popComp -> .)
    RPAREN          reduce using rule 126 (popComp -> .)

    popComp                        shift and go to state 230

state 209

    (66) B -> GREATER_OR_EQUAL meterOperador G_EXP .

    AND             reduce using rule 66 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 66 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 66 (B -> GREATER_OR_EQUAL meterOperador G_EXP .)


state 210

    (67) B -> LESS_OR_EQUAL meterOperador G_EXP .

    AND             reduce using rule 67 (B -> LESS_OR_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 67 (B -> LESS_OR_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 67 (B -> LESS_OR_EQUAL meterOperador G_EXP .)


state 211

    (68) B -> GREATER_THAN meterOperador G_EXP .

    AND             reduce using rule 68 (B -> GREATER_THAN meterOperador G_EXP .)
    OR              reduce using rule 68 (B -> GREATER_THAN meterOperador G_EXP .)
    RPAREN          reduce using rule 68 (B -> GREATER_THAN meterOperador G_EXP .)


state 212

    (69) B -> LESS_THAN meterOperador G_EXP .

    AND             reduce using rule 69 (B -> LESS_THAN meterOperador G_EXP .)
    OR              reduce using rule 69 (B -> LESS_THAN meterOperador G_EXP .)
    RPAREN          reduce using rule 69 (B -> LESS_THAN meterOperador G_EXP .)


state 213

    (70) B -> IS_EQUAL meterOperador G_EXP .

    AND             reduce using rule 70 (B -> IS_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 70 (B -> IS_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 70 (B -> IS_EQUAL meterOperador G_EXP .)


state 214

    (71) B -> NOT_EQUAL meterOperador G_EXP .

    AND             reduce using rule 71 (B -> NOT_EQUAL meterOperador G_EXP .)
    OR              reduce using rule 71 (B -> NOT_EQUAL meterOperador G_EXP .)
    RPAREN          reduce using rule 71 (B -> NOT_EQUAL meterOperador G_EXP .)


state 215

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO . gotoIf CUERPO terminarWhile
    (115) gotoIf -> .

    LBRACKET        reduce using rule 115 (gotoIf -> .)

    gotoIf                         shift and go to state 231

state 216

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP . popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (128) popIgual -> .

    TO              reduce using rule 128 (popIgual -> .)

    popIgual                       shift and go to state 232

state 217

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar . CUERPO terminarFunc
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 233

state 218

    (15) P2 -> COMMA PARAMS P1 .

    COMMA           reduce using rule 15 (P2 -> COMMA PARAMS P1 .)
    RPAREN          reduce using rule 15 (P2 -> COMMA PARAMS P1 .)


state 219

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam . RPAREN quitarFondoFalso generarGosub SEMICOLON

    RPAREN          shift and go to state 234


state 220

    (45) E4 -> EXP generarParam .
    (46) E4 -> EXP generarParam . COMMA E4

    RPAREN          reduce using rule 45 (E4 -> EXP generarParam .)
    COMMA           shift and go to state 235


state 221

    (30) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET . verificarArreglo quitarFondoFalso
    (102) verificarArreglo -> .

    EQUALS          reduce using rule 102 (verificarArreglo -> .)
    DIVIDE          reduce using rule 102 (verificarArreglo -> .)
    MULTIPLY        reduce using rule 102 (verificarArreglo -> .)
    PLUS            reduce using rule 102 (verificarArreglo -> .)
    MINUS           reduce using rule 102 (verificarArreglo -> .)
    RPAREN          reduce using rule 102 (verificarArreglo -> .)
    COMMA           reduce using rule 102 (verificarArreglo -> .)
    GREATER_OR_EQUAL reduce using rule 102 (verificarArreglo -> .)
    LESS_OR_EQUAL   reduce using rule 102 (verificarArreglo -> .)
    GREATER_THAN    reduce using rule 102 (verificarArreglo -> .)
    LESS_THAN       reduce using rule 102 (verificarArreglo -> .)
    IS_EQUAL        reduce using rule 102 (verificarArreglo -> .)
    NOT_EQUAL       reduce using rule 102 (verificarArreglo -> .)
    AND             reduce using rule 102 (verificarArreglo -> .)
    OR              reduce using rule 102 (verificarArreglo -> .)
    SEMICOLON       reduce using rule 102 (verificarArreglo -> .)
    RSBRACKET       reduce using rule 102 (verificarArreglo -> .)
    TO              reduce using rule 102 (verificarArreglo -> .)
    DO              reduce using rule 102 (verificarArreglo -> .)

    verificarArreglo               shift and go to state 236

state 222

    (83) FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .

    DIVIDE          reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    MULTIPLY        reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    PLUS            reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    MINUS           reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    RPAREN          reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    COMMA           reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    GREATER_OR_EQUAL reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    LESS_OR_EQUAL   reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    GREATER_THAN    reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    LESS_THAN       reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    IS_EQUAL        reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    NOT_EQUAL       reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    AND             reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    OR              reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    SEMICOLON       reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    RSBRACKET       reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    TO              reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)
    DO              reduce using rule 83 (FACTOR -> LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso .)


state 223

    (76) T -> PLUS meterOperador EXP .

    RPAREN          reduce using rule 76 (T -> PLUS meterOperador EXP .)
    COMMA           reduce using rule 76 (T -> PLUS meterOperador EXP .)
    GREATER_OR_EQUAL reduce using rule 76 (T -> PLUS meterOperador EXP .)
    LESS_OR_EQUAL   reduce using rule 76 (T -> PLUS meterOperador EXP .)
    GREATER_THAN    reduce using rule 76 (T -> PLUS meterOperador EXP .)
    LESS_THAN       reduce using rule 76 (T -> PLUS meterOperador EXP .)
    IS_EQUAL        reduce using rule 76 (T -> PLUS meterOperador EXP .)
    NOT_EQUAL       reduce using rule 76 (T -> PLUS meterOperador EXP .)
    AND             reduce using rule 76 (T -> PLUS meterOperador EXP .)
    OR              reduce using rule 76 (T -> PLUS meterOperador EXP .)
    SEMICOLON       reduce using rule 76 (T -> PLUS meterOperador EXP .)
    RSBRACKET       reduce using rule 76 (T -> PLUS meterOperador EXP .)
    TO              reduce using rule 76 (T -> PLUS meterOperador EXP .)
    DO              reduce using rule 76 (T -> PLUS meterOperador EXP .)


state 224

    (77) T -> MINUS meterOperador EXP .

    RPAREN          reduce using rule 77 (T -> MINUS meterOperador EXP .)
    COMMA           reduce using rule 77 (T -> MINUS meterOperador EXP .)
    GREATER_OR_EQUAL reduce using rule 77 (T -> MINUS meterOperador EXP .)
    LESS_OR_EQUAL   reduce using rule 77 (T -> MINUS meterOperador EXP .)
    GREATER_THAN    reduce using rule 77 (T -> MINUS meterOperador EXP .)
    LESS_THAN       reduce using rule 77 (T -> MINUS meterOperador EXP .)
    IS_EQUAL        reduce using rule 77 (T -> MINUS meterOperador EXP .)
    NOT_EQUAL       reduce using rule 77 (T -> MINUS meterOperador EXP .)
    AND             reduce using rule 77 (T -> MINUS meterOperador EXP .)
    OR              reduce using rule 77 (T -> MINUS meterOperador EXP .)
    SEMICOLON       reduce using rule 77 (T -> MINUS meterOperador EXP .)
    RSBRACKET       reduce using rule 77 (T -> MINUS meterOperador EXP .)
    TO              reduce using rule 77 (T -> MINUS meterOperador EXP .)
    DO              reduce using rule 77 (T -> MINUS meterOperador EXP .)


state 225

    (80) F2 -> DIVIDE meterOperador TERMINO .

    PLUS            reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    MINUS           reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    RPAREN          reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    COMMA           reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    GREATER_OR_EQUAL reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    LESS_OR_EQUAL   reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    GREATER_THAN    reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    LESS_THAN       reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    IS_EQUAL        reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    NOT_EQUAL       reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    AND             reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    OR              reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    SEMICOLON       reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    RSBRACKET       reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    TO              reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)
    DO              reduce using rule 80 (F2 -> DIVIDE meterOperador TERMINO .)


state 226

    (81) F2 -> MULTIPLY meterOperador TERMINO .

    PLUS            reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    MINUS           reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    RPAREN          reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    COMMA           reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    GREATER_OR_EQUAL reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    LESS_OR_EQUAL   reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    GREATER_THAN    reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    LESS_THAN       reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    IS_EQUAL        reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    NOT_EQUAL       reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    AND             reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    OR              reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    SEMICOLON       reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    RSBRACKET       reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    TO              reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)
    DO              reduce using rule 81 (F2 -> MULTIPLY meterOperador TERMINO .)


state 227

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra . E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (45) E4 -> . EXP generarParam
    (46) E4 -> . EXP generarParam COMMA E4
    (47) E4 -> . empty
    (75) EXP -> . TERMINO popSumaResta T
    (89) empty -> .
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 89 (empty -> .)
    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    E4                             shift and go to state 237
    EXP                            shift and go to state 194
    empty                          shift and go to state 195
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 228

    (56) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO . ELSE1 terminarGoto
    (57) ELSE1 -> . ELSE gotoElse CUERPO
    (58) ELSE1 -> . empty
    (89) empty -> .

    ELSE            shift and go to state 239
    NAME            reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FROM            reduce using rule 89 (empty -> .)
    RBRACKET        reduce using rule 89 (empty -> .)

    ELSE1                          shift and go to state 238
    empty                          shift and go to state 240

state 229

    (62) H_EXP -> T_EXP OR meterOperador H_EXP popComp .

    RPAREN          reduce using rule 62 (H_EXP -> T_EXP OR meterOperador H_EXP popComp .)


state 230

    (64) T_EXP -> G_EXP AND meterOperador T_EXP popComp .

    OR              reduce using rule 64 (T_EXP -> G_EXP AND meterOperador T_EXP popComp .)
    RPAREN          reduce using rule 64 (T_EXP -> G_EXP AND meterOperador T_EXP popComp .)


state 231

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf . CUERPO terminarWhile
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 241

state 232

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual . agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (117) agregarWhile -> .

    TO              reduce using rule 117 (agregarWhile -> .)

    agregarWhile                   shift and go to state 242

state 233

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO . terminarFunc
    (97) terminarFunc -> .

    FUNC            reduce using rule 97 (terminarFunc -> .)
    MAIN            reduce using rule 97 (terminarFunc -> .)

    terminarFunc                   shift and go to state 243

state 234

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN . quitarFondoFalso generarGosub SEMICOLON
    (121) quitarFondoFalso -> .

    SEMICOLON       reduce using rule 121 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 244

state 235

    (46) E4 -> EXP generarParam COMMA . E4
    (45) E4 -> . EXP generarParam
    (46) E4 -> . EXP generarParam COMMA E4
    (47) E4 -> . empty
    (75) EXP -> . TERMINO popSumaResta T
    (89) empty -> .
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          reduce using rule 89 (empty -> .)
    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    EXP                            shift and go to state 194
    E4                             shift and go to state 245
    empty                          shift and go to state 195
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    VARIABLE                       shift and go to state 108
    LLAMADAF                       shift and go to state 109

state 236

    (30) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo . quitarFondoFalso
    (121) quitarFondoFalso -> .

    EQUALS          reduce using rule 121 (quitarFondoFalso -> .)
    DIVIDE          reduce using rule 121 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 121 (quitarFondoFalso -> .)
    PLUS            reduce using rule 121 (quitarFondoFalso -> .)
    MINUS           reduce using rule 121 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 121 (quitarFondoFalso -> .)
    COMMA           reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 121 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 121 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 121 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 121 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 121 (quitarFondoFalso -> .)
    AND             reduce using rule 121 (quitarFondoFalso -> .)
    OR              reduce using rule 121 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 121 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 121 (quitarFondoFalso -> .)
    TO              reduce using rule 121 (quitarFondoFalso -> .)
    DO              reduce using rule 121 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 246

state 237

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 . verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub
    (92) verificarParam -> .

    RPAREN          reduce using rule 92 (verificarParam -> .)

    verificarParam                 shift and go to state 247

state 238

    (56) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 . terminarGoto
    (116) terminarGoto -> .

    NAME            reduce using rule 116 (terminarGoto -> .)
    RETURN          reduce using rule 116 (terminarGoto -> .)
    READ            reduce using rule 116 (terminarGoto -> .)
    PRINT           reduce using rule 116 (terminarGoto -> .)
    IF              reduce using rule 116 (terminarGoto -> .)
    WHILE           reduce using rule 116 (terminarGoto -> .)
    FROM            reduce using rule 116 (terminarGoto -> .)
    RBRACKET        reduce using rule 116 (terminarGoto -> .)

    terminarGoto                   shift and go to state 248

state 239

    (57) ELSE1 -> ELSE . gotoElse CUERPO
    (119) gotoElse -> .

    LBRACKET        reduce using rule 119 (gotoElse -> .)

    gotoElse                       shift and go to state 249

state 240

    (58) ELSE1 -> empty .

    NAME            reduce using rule 58 (ELSE1 -> empty .)
    RETURN          reduce using rule 58 (ELSE1 -> empty .)
    READ            reduce using rule 58 (ELSE1 -> empty .)
    PRINT           reduce using rule 58 (ELSE1 -> empty .)
    IF              reduce using rule 58 (ELSE1 -> empty .)
    WHILE           reduce using rule 58 (ELSE1 -> empty .)
    FROM            reduce using rule 58 (ELSE1 -> empty .)
    RBRACKET        reduce using rule 58 (ELSE1 -> empty .)


state 241

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO . terminarWhile
    (118) terminarWhile -> .

    NAME            reduce using rule 118 (terminarWhile -> .)
    RETURN          reduce using rule 118 (terminarWhile -> .)
    READ            reduce using rule 118 (terminarWhile -> .)
    PRINT           reduce using rule 118 (terminarWhile -> .)
    IF              reduce using rule 118 (terminarWhile -> .)
    WHILE           reduce using rule 118 (terminarWhile -> .)
    FROM            reduce using rule 118 (terminarWhile -> .)
    RBRACKET        reduce using rule 118 (terminarWhile -> .)

    terminarWhile                  shift and go to state 250

state 242

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile . TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile

    TO              shift and go to state 251


state 243

    (11) FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc .

    FUNC            reduce using rule 11 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc .)
    MAIN            reduce using rule 11 (FUNCION -> FUNC TIPO_FUNCION NAME agregarFunc LPAREN borrarListaVar scopeLocal PARAMS agregarParamTable agregarVariables RPAREN VARS agregarLocalVar CUERPO terminarFunc .)


state 244

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso . generarGosub SEMICOLON
    (90) generarGosub -> .

    SEMICOLON       reduce using rule 90 (generarGosub -> .)

    generarGosub                   shift and go to state 252

state 245

    (46) E4 -> EXP generarParam COMMA E4 .

    RPAREN          reduce using rule 46 (E4 -> EXP generarParam COMMA E4 .)


state 246

    (30) E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .

    EQUALS          reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    DIVIDE          reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    MULTIPLY        reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    PLUS            reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    MINUS           reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    RPAREN          reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    COMMA           reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    GREATER_OR_EQUAL reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    LESS_OR_EQUAL   reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    GREATER_THAN    reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    LESS_THAN       reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    IS_EQUAL        reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    NOT_EQUAL       reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    AND             reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    OR              reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    SEMICOLON       reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    RSBRACKET       reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    TO              reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)
    DO              reduce using rule 30 (E2 -> LSBRACKET guardarArreglo meterFondoFalso EXP RSBRACKET verificarArreglo quitarFondoFalso .)


state 247

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam . RPAREN quitarFondoFalso verificarLlamada generarGosub

    RPAREN          shift and go to state 253


state 248

    (56) CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .

    NAME            reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    RETURN          reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    READ            reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    PRINT           reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    IF              reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    WHILE           reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    FROM            reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)
    RBRACKET        reduce using rule 56 (CONDICION -> IF LPAREN H_EXP RPAREN gotoIf THEN CUERPO ELSE1 terminarGoto .)


state 249

    (57) ELSE1 -> ELSE gotoElse . CUERPO
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 254

state 250

    (59) CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .

    NAME            reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    RETURN          reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    READ            reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    PRINT           reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    IF              reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    WHILE           reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    FROM            reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)
    RBRACKET        reduce using rule 59 (CICLO_W -> WHILE agregarWhile LPAREN H_EXP RPAREN DO gotoIf CUERPO terminarWhile .)


state 251

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO . EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (75) EXP -> . TERMINO popSumaResta T
    (79) TERMINO -> . FACTOR popMultDiv F2
    (83) FACTOR -> . LPAREN meterFondoFalso H_EXP RPAREN quitarFondoFalso
    (84) FACTOR -> . C_INT agregarConstInt
    (85) FACTOR -> . C_FLOAT agregarConstFloat
    (86) FACTOR -> . C_CHAR agregarConstChar
    (87) FACTOR -> . VARIABLE
    (88) FACTOR -> . LLAMADAF
    (29) VARIABLE -> . NAME agregarPilaOp E2
    (48) LLAMADAF -> . NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub

    LPAREN          shift and go to state 101
    C_INT           shift and go to state 105
    C_FLOAT         shift and go to state 106
    C_CHAR          shift and go to state 107
    NAME            shift and go to state 110

    VARIABLE                       shift and go to state 108
    EXP                            shift and go to state 255
    TERMINO                        shift and go to state 103
    FACTOR                         shift and go to state 104
    LLAMADAF                       shift and go to state 109

state 252

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub . SEMICOLON

    SEMICOLON       shift and go to state 256


state 253

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN . quitarFondoFalso verificarLlamada generarGosub
    (121) quitarFondoFalso -> .

    DIVIDE          reduce using rule 121 (quitarFondoFalso -> .)
    MULTIPLY        reduce using rule 121 (quitarFondoFalso -> .)
    PLUS            reduce using rule 121 (quitarFondoFalso -> .)
    MINUS           reduce using rule 121 (quitarFondoFalso -> .)
    RPAREN          reduce using rule 121 (quitarFondoFalso -> .)
    COMMA           reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_OR_EQUAL reduce using rule 121 (quitarFondoFalso -> .)
    LESS_OR_EQUAL   reduce using rule 121 (quitarFondoFalso -> .)
    GREATER_THAN    reduce using rule 121 (quitarFondoFalso -> .)
    LESS_THAN       reduce using rule 121 (quitarFondoFalso -> .)
    IS_EQUAL        reduce using rule 121 (quitarFondoFalso -> .)
    NOT_EQUAL       reduce using rule 121 (quitarFondoFalso -> .)
    AND             reduce using rule 121 (quitarFondoFalso -> .)
    OR              reduce using rule 121 (quitarFondoFalso -> .)
    SEMICOLON       reduce using rule 121 (quitarFondoFalso -> .)
    RSBRACKET       reduce using rule 121 (quitarFondoFalso -> .)
    TO              reduce using rule 121 (quitarFondoFalso -> .)
    DO              reduce using rule 121 (quitarFondoFalso -> .)

    quitarFondoFalso               shift and go to state 257

state 254

    (57) ELSE1 -> ELSE gotoElse CUERPO .

    NAME            reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    RETURN          reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    READ            reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    PRINT           reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    IF              reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    WHILE           reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    FROM            reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)
    RBRACKET        reduce using rule 57 (ELSE1 -> ELSE gotoElse CUERPO .)


state 255

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP . crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile
    (105) crearCompFrom -> .

    DO              reduce using rule 105 (crearCompFrom -> .)

    crearCompFrom                  shift and go to state 258

state 256

    (44) LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .

    NAME            reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    RETURN          reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    READ            reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    PRINT           reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    IF              reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    WHILE           reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    FROM            reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)
    RBRACKET        reduce using rule 44 (LLAMADA -> NAME verificarFuncVoid LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso generarGosub SEMICOLON .)


state 257

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso . verificarLlamada generarGosub
    (91) verificarLlamada -> .

    DIVIDE          reduce using rule 91 (verificarLlamada -> .)
    MULTIPLY        reduce using rule 91 (verificarLlamada -> .)
    PLUS            reduce using rule 91 (verificarLlamada -> .)
    MINUS           reduce using rule 91 (verificarLlamada -> .)
    RPAREN          reduce using rule 91 (verificarLlamada -> .)
    COMMA           reduce using rule 91 (verificarLlamada -> .)
    GREATER_OR_EQUAL reduce using rule 91 (verificarLlamada -> .)
    LESS_OR_EQUAL   reduce using rule 91 (verificarLlamada -> .)
    GREATER_THAN    reduce using rule 91 (verificarLlamada -> .)
    LESS_THAN       reduce using rule 91 (verificarLlamada -> .)
    IS_EQUAL        reduce using rule 91 (verificarLlamada -> .)
    NOT_EQUAL       reduce using rule 91 (verificarLlamada -> .)
    AND             reduce using rule 91 (verificarLlamada -> .)
    OR              reduce using rule 91 (verificarLlamada -> .)
    SEMICOLON       reduce using rule 91 (verificarLlamada -> .)
    RSBRACKET       reduce using rule 91 (verificarLlamada -> .)
    TO              reduce using rule 91 (verificarLlamada -> .)
    DO              reduce using rule 91 (verificarLlamada -> .)

    verificarLlamada               shift and go to state 259

state 258

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom . DO gotoIf CUERPO sumarFrom terminarWhile

    DO              shift and go to state 260


state 259

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada . generarGosub
    (90) generarGosub -> .

    DIVIDE          reduce using rule 90 (generarGosub -> .)
    MULTIPLY        reduce using rule 90 (generarGosub -> .)
    PLUS            reduce using rule 90 (generarGosub -> .)
    MINUS           reduce using rule 90 (generarGosub -> .)
    RPAREN          reduce using rule 90 (generarGosub -> .)
    COMMA           reduce using rule 90 (generarGosub -> .)
    GREATER_OR_EQUAL reduce using rule 90 (generarGosub -> .)
    LESS_OR_EQUAL   reduce using rule 90 (generarGosub -> .)
    GREATER_THAN    reduce using rule 90 (generarGosub -> .)
    LESS_THAN       reduce using rule 90 (generarGosub -> .)
    IS_EQUAL        reduce using rule 90 (generarGosub -> .)
    NOT_EQUAL       reduce using rule 90 (generarGosub -> .)
    AND             reduce using rule 90 (generarGosub -> .)
    OR              reduce using rule 90 (generarGosub -> .)
    SEMICOLON       reduce using rule 90 (generarGosub -> .)
    RSBRACKET       reduce using rule 90 (generarGosub -> .)
    TO              reduce using rule 90 (generarGosub -> .)
    DO              reduce using rule 90 (generarGosub -> .)

    generarGosub                   shift and go to state 261

state 260

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO . gotoIf CUERPO sumarFrom terminarWhile
    (115) gotoIf -> .

    LBRACKET        reduce using rule 115 (gotoIf -> .)

    gotoIf                         shift and go to state 262

state 261

    (48) LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .

    DIVIDE          reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    MULTIPLY        reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    PLUS            reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    MINUS           reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    RPAREN          reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    COMMA           reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    GREATER_OR_EQUAL reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    LESS_OR_EQUAL   reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    GREATER_THAN    reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    LESS_THAN       reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    IS_EQUAL        reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    NOT_EQUAL       reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    AND             reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    OR              reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    SEMICOLON       reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    RSBRACKET       reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    TO              reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)
    DO              reduce using rule 48 (LLAMADAF -> NAME verificarFunc LPAREN meterFondoFalso generarEra E4 verificarParam RPAREN quitarFondoFalso verificarLlamada generarGosub .)


state 262

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf . CUERPO sumarFrom terminarWhile
    (16) CUERPO -> . LBRACKET E RBRACKET

    LBRACKET        shift and go to state 52

    CUERPO                         shift and go to state 263

state 263

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO . sumarFrom terminarWhile
    (106) sumarFrom -> .

    NAME            reduce using rule 106 (sumarFrom -> .)
    RETURN          reduce using rule 106 (sumarFrom -> .)
    READ            reduce using rule 106 (sumarFrom -> .)
    PRINT           reduce using rule 106 (sumarFrom -> .)
    IF              reduce using rule 106 (sumarFrom -> .)
    WHILE           reduce using rule 106 (sumarFrom -> .)
    FROM            reduce using rule 106 (sumarFrom -> .)
    RBRACKET        reduce using rule 106 (sumarFrom -> .)

    sumarFrom                      shift and go to state 264

state 264

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom . terminarWhile
    (118) terminarWhile -> .

    NAME            reduce using rule 118 (terminarWhile -> .)
    RETURN          reduce using rule 118 (terminarWhile -> .)
    READ            reduce using rule 118 (terminarWhile -> .)
    PRINT           reduce using rule 118 (terminarWhile -> .)
    IF              reduce using rule 118 (terminarWhile -> .)
    WHILE           reduce using rule 118 (terminarWhile -> .)
    FROM            reduce using rule 118 (terminarWhile -> .)
    RBRACKET        reduce using rule 118 (terminarWhile -> .)

    terminarWhile                  shift and go to state 265

state 265

    (60) CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .

    NAME            reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    RETURN          reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    READ            reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    PRINT           reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    IF              reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    WHILE           reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    FROM            reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)
    RBRACKET        reduce using rule 60 (CICLO_F -> FROM VARIABLE agregarFrom EQUALS meterOperador EXP popIgual agregarWhile TO EXP crearCompFrom DO gotoIf CUERPO sumarFrom terminarWhile .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 124 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 191 resolved as shift
